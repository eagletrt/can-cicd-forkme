// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primary.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_primary_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_primary_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_primary_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_primary_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primary_2eproto;
namespace primary {
class CarStatus;
struct CarStatusDefaultTypeInternal;
extern CarStatusDefaultTypeInternal _CarStatus_default_instance_;
class CoolingStatus;
struct CoolingStatusDefaultTypeInternal;
extern CoolingStatusDefaultTypeInternal _CoolingStatus_default_instance_;
class DasErrors;
struct DasErrorsDefaultTypeInternal;
extern DasErrorsDefaultTypeInternal _DasErrors_default_instance_;
class DasVersion;
struct DasVersionDefaultTypeInternal;
extern DasVersionDefaultTypeInternal _DasVersion_default_instance_;
class HandcartStatus;
struct HandcartStatusDefaultTypeInternal;
extern HandcartStatusDefaultTypeInternal _HandcartStatus_default_instance_;
class HvCellBalancingStatus;
struct HvCellBalancingStatusDefaultTypeInternal;
extern HvCellBalancingStatusDefaultTypeInternal _HvCellBalancingStatus_default_instance_;
class HvCellsTemp;
struct HvCellsTempDefaultTypeInternal;
extern HvCellsTempDefaultTypeInternal _HvCellsTemp_default_instance_;
class HvCellsVoltage;
struct HvCellsVoltageDefaultTypeInternal;
extern HvCellsVoltageDefaultTypeInternal _HvCellsVoltage_default_instance_;
class HvCurrent;
struct HvCurrentDefaultTypeInternal;
extern HvCurrentDefaultTypeInternal _HvCurrent_default_instance_;
class HvErrors;
struct HvErrorsDefaultTypeInternal;
extern HvErrorsDefaultTypeInternal _HvErrors_default_instance_;
class HvTemp;
struct HvTempDefaultTypeInternal;
extern HvTempDefaultTypeInternal _HvTemp_default_instance_;
class HvVersion;
struct HvVersionDefaultTypeInternal;
extern HvVersionDefaultTypeInternal _HvVersion_default_instance_;
class HvVoltage;
struct HvVoltageDefaultTypeInternal;
extern HvVoltageDefaultTypeInternal _HvVoltage_default_instance_;
class InvLResponse;
struct InvLResponseDefaultTypeInternal;
extern InvLResponseDefaultTypeInternal _InvLResponse_default_instance_;
class InvLSetTorque;
struct InvLSetTorqueDefaultTypeInternal;
extern InvLSetTorqueDefaultTypeInternal _InvLSetTorque_default_instance_;
class LvCurrent;
struct LvCurrentDefaultTypeInternal;
extern LvCurrentDefaultTypeInternal _LvCurrent_default_instance_;
class LvTemperature;
struct LvTemperatureDefaultTypeInternal;
extern LvTemperatureDefaultTypeInternal _LvTemperature_default_instance_;
class LvVersion;
struct LvVersionDefaultTypeInternal;
extern LvVersionDefaultTypeInternal _LvVersion_default_instance_;
class LvVoltage;
struct LvVoltageDefaultTypeInternal;
extern LvVoltageDefaultTypeInternal _LvVoltage_default_instance_;
class Marker;
struct MarkerDefaultTypeInternal;
extern MarkerDefaultTypeInternal _Marker_default_instance_;
class PrimaryFenice;
struct PrimaryFeniceDefaultTypeInternal;
extern PrimaryFeniceDefaultTypeInternal _PrimaryFenice_default_instance_;
class SetCarStatus;
struct SetCarStatusDefaultTypeInternal;
extern SetCarStatusDefaultTypeInternal _SetCarStatus_default_instance_;
class SetCellBalancingStatus;
struct SetCellBalancingStatusDefaultTypeInternal;
extern SetCellBalancingStatusDefaultTypeInternal _SetCellBalancingStatus_default_instance_;
class SetPedalsRange;
struct SetPedalsRangeDefaultTypeInternal;
extern SetPedalsRangeDefaultTypeInternal _SetPedalsRange_default_instance_;
class SetTlmStatus;
struct SetTlmStatusDefaultTypeInternal;
extern SetTlmStatusDefaultTypeInternal _SetTlmStatus_default_instance_;
class SetTsStatus;
struct SetTsStatusDefaultTypeInternal;
extern SetTsStatusDefaultTypeInternal _SetTsStatus_default_instance_;
class Speed;
struct SpeedDefaultTypeInternal;
extern SpeedDefaultTypeInternal _Speed_default_instance_;
class SteerStatus;
struct SteerStatusDefaultTypeInternal;
extern SteerStatusDefaultTypeInternal _SteerStatus_default_instance_;
class SteerSystemStatus;
struct SteerSystemStatusDefaultTypeInternal;
extern SteerSystemStatusDefaultTypeInternal _SteerSystemStatus_default_instance_;
class SteerVersion;
struct SteerVersionDefaultTypeInternal;
extern SteerVersionDefaultTypeInternal _SteerVersion_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TlmStatus;
struct TlmStatusDefaultTypeInternal;
extern TlmStatusDefaultTypeInternal _TlmStatus_default_instance_;
class TlmVersion;
struct TlmVersionDefaultTypeInternal;
extern TlmVersionDefaultTypeInternal _TlmVersion_default_instance_;
class TsStatus;
struct TsStatusDefaultTypeInternal;
extern TsStatusDefaultTypeInternal _TsStatus_default_instance_;
}  // namespace primary
PROTOBUF_NAMESPACE_OPEN
template<> ::primary::CarStatus* Arena::CreateMaybeMessage<::primary::CarStatus>(Arena*);
template<> ::primary::CoolingStatus* Arena::CreateMaybeMessage<::primary::CoolingStatus>(Arena*);
template<> ::primary::DasErrors* Arena::CreateMaybeMessage<::primary::DasErrors>(Arena*);
template<> ::primary::DasVersion* Arena::CreateMaybeMessage<::primary::DasVersion>(Arena*);
template<> ::primary::HandcartStatus* Arena::CreateMaybeMessage<::primary::HandcartStatus>(Arena*);
template<> ::primary::HvCellBalancingStatus* Arena::CreateMaybeMessage<::primary::HvCellBalancingStatus>(Arena*);
template<> ::primary::HvCellsTemp* Arena::CreateMaybeMessage<::primary::HvCellsTemp>(Arena*);
template<> ::primary::HvCellsVoltage* Arena::CreateMaybeMessage<::primary::HvCellsVoltage>(Arena*);
template<> ::primary::HvCurrent* Arena::CreateMaybeMessage<::primary::HvCurrent>(Arena*);
template<> ::primary::HvErrors* Arena::CreateMaybeMessage<::primary::HvErrors>(Arena*);
template<> ::primary::HvTemp* Arena::CreateMaybeMessage<::primary::HvTemp>(Arena*);
template<> ::primary::HvVersion* Arena::CreateMaybeMessage<::primary::HvVersion>(Arena*);
template<> ::primary::HvVoltage* Arena::CreateMaybeMessage<::primary::HvVoltage>(Arena*);
template<> ::primary::InvLResponse* Arena::CreateMaybeMessage<::primary::InvLResponse>(Arena*);
template<> ::primary::InvLSetTorque* Arena::CreateMaybeMessage<::primary::InvLSetTorque>(Arena*);
template<> ::primary::LvCurrent* Arena::CreateMaybeMessage<::primary::LvCurrent>(Arena*);
template<> ::primary::LvTemperature* Arena::CreateMaybeMessage<::primary::LvTemperature>(Arena*);
template<> ::primary::LvVersion* Arena::CreateMaybeMessage<::primary::LvVersion>(Arena*);
template<> ::primary::LvVoltage* Arena::CreateMaybeMessage<::primary::LvVoltage>(Arena*);
template<> ::primary::Marker* Arena::CreateMaybeMessage<::primary::Marker>(Arena*);
template<> ::primary::PrimaryFenice* Arena::CreateMaybeMessage<::primary::PrimaryFenice>(Arena*);
template<> ::primary::SetCarStatus* Arena::CreateMaybeMessage<::primary::SetCarStatus>(Arena*);
template<> ::primary::SetCellBalancingStatus* Arena::CreateMaybeMessage<::primary::SetCellBalancingStatus>(Arena*);
template<> ::primary::SetPedalsRange* Arena::CreateMaybeMessage<::primary::SetPedalsRange>(Arena*);
template<> ::primary::SetTlmStatus* Arena::CreateMaybeMessage<::primary::SetTlmStatus>(Arena*);
template<> ::primary::SetTsStatus* Arena::CreateMaybeMessage<::primary::SetTsStatus>(Arena*);
template<> ::primary::Speed* Arena::CreateMaybeMessage<::primary::Speed>(Arena*);
template<> ::primary::SteerStatus* Arena::CreateMaybeMessage<::primary::SteerStatus>(Arena*);
template<> ::primary::SteerSystemStatus* Arena::CreateMaybeMessage<::primary::SteerSystemStatus>(Arena*);
template<> ::primary::SteerVersion* Arena::CreateMaybeMessage<::primary::SteerVersion>(Arena*);
template<> ::primary::Timestamp* Arena::CreateMaybeMessage<::primary::Timestamp>(Arena*);
template<> ::primary::TlmStatus* Arena::CreateMaybeMessage<::primary::TlmStatus>(Arena*);
template<> ::primary::TlmVersion* Arena::CreateMaybeMessage<::primary::TlmVersion>(Arena*);
template<> ::primary::TsStatus* Arena::CreateMaybeMessage<::primary::TsStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace primary {

enum TlmStatusType : int {
  TLM_STATUS_ON = 0,
  TLM_STATUS_OFF = 1,
  TlmStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TlmStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TlmStatusType_IsValid(int value);
constexpr TlmStatusType TlmStatusType_MIN = TLM_STATUS_ON;
constexpr TlmStatusType TlmStatusType_MAX = TLM_STATUS_OFF;
constexpr int TlmStatusType_ARRAYSIZE = TlmStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TlmStatusType_descriptor();
template<typename T>
inline const std::string& TlmStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TlmStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TlmStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TlmStatusType_descriptor(), enum_t_value);
}
inline bool TlmStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TlmStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TlmStatusType>(
    TlmStatusType_descriptor(), name, value);
}
enum RaceTypeType : int {
  RACE_TYPE_ACCELERATION = 0,
  RACE_TYPE_SKIDPAD = 1,
  RACE_TYPE_AUTOCROSS = 2,
  RACE_TYPE_ENDURANCE = 3,
  RaceTypeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RaceTypeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RaceTypeType_IsValid(int value);
constexpr RaceTypeType RaceTypeType_MIN = RACE_TYPE_ACCELERATION;
constexpr RaceTypeType RaceTypeType_MAX = RACE_TYPE_ENDURANCE;
constexpr int RaceTypeType_ARRAYSIZE = RaceTypeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaceTypeType_descriptor();
template<typename T>
inline const std::string& RaceTypeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RaceTypeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RaceTypeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RaceTypeType_descriptor(), enum_t_value);
}
inline bool RaceTypeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RaceTypeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RaceTypeType>(
    RaceTypeType_descriptor(), name, value);
}
enum InverterStatusType : int {
  INVERTER_STATUS_OFF = 0,
  INVERTER_STATUS_IDLE = 1,
  INVERTER_STATUS_ON = 2,
  InverterStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InverterStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InverterStatusType_IsValid(int value);
constexpr InverterStatusType InverterStatusType_MIN = INVERTER_STATUS_OFF;
constexpr InverterStatusType InverterStatusType_MAX = INVERTER_STATUS_ON;
constexpr int InverterStatusType_ARRAYSIZE = InverterStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InverterStatusType_descriptor();
template<typename T>
inline const std::string& InverterStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InverterStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InverterStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InverterStatusType_descriptor(), enum_t_value);
}
inline bool InverterStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InverterStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InverterStatusType>(
    InverterStatusType_descriptor(), name, value);
}
enum CarStatusType : int {
  CAR_STATUS_IDLE = 0,
  CAR_STATUS_SETUP = 1,
  CAR_STATUS_RUN = 2,
  CarStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CarStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CarStatusType_IsValid(int value);
constexpr CarStatusType CarStatusType_MIN = CAR_STATUS_IDLE;
constexpr CarStatusType CarStatusType_MAX = CAR_STATUS_RUN;
constexpr int CarStatusType_ARRAYSIZE = CarStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarStatusType_descriptor();
template<typename T>
inline const std::string& CarStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CarStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CarStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CarStatusType_descriptor(), enum_t_value);
}
inline bool CarStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CarStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CarStatusType>(
    CarStatusType_descriptor(), name, value);
}
enum TsStatusType : int {
  TS_STATUS_OFF = 0,
  TS_STATUS_PRECHARGE = 1,
  TS_STATUS_ON = 2,
  TS_STATUS_FATAL = 3,
  TsStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TsStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TsStatusType_IsValid(int value);
constexpr TsStatusType TsStatusType_MIN = TS_STATUS_OFF;
constexpr TsStatusType TsStatusType_MAX = TS_STATUS_FATAL;
constexpr int TsStatusType_ARRAYSIZE = TsStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsStatusType_descriptor();
template<typename T>
inline const std::string& TsStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TsStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TsStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TsStatusType_descriptor(), enum_t_value);
}
inline bool TsStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TsStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TsStatusType>(
    TsStatusType_descriptor(), name, value);
}
enum TsStatusSetType : int {
  TS_STATUS_SET_OFF = 0,
  TS_STATUS_SET_ON = 1,
  TsStatusSetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TsStatusSetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TsStatusSetType_IsValid(int value);
constexpr TsStatusSetType TsStatusSetType_MIN = TS_STATUS_SET_OFF;
constexpr TsStatusSetType TsStatusSetType_MAX = TS_STATUS_SET_ON;
constexpr int TsStatusSetType_ARRAYSIZE = TsStatusSetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsStatusSetType_descriptor();
template<typename T>
inline const std::string& TsStatusSetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TsStatusSetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TsStatusSetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TsStatusSetType_descriptor(), enum_t_value);
}
inline bool TsStatusSetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TsStatusSetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TsStatusSetType>(
    TsStatusSetType_descriptor(), name, value);
}
enum SetBalancingStatusType : int {
  SET_BALANCING_STATUS_OFF = 0,
  SET_BALANCING_STATUS_ON = 1,
  SetBalancingStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetBalancingStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetBalancingStatusType_IsValid(int value);
constexpr SetBalancingStatusType SetBalancingStatusType_MIN = SET_BALANCING_STATUS_OFF;
constexpr SetBalancingStatusType SetBalancingStatusType_MAX = SET_BALANCING_STATUS_ON;
constexpr int SetBalancingStatusType_ARRAYSIZE = SetBalancingStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetBalancingStatusType_descriptor();
template<typename T>
inline const std::string& SetBalancingStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetBalancingStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetBalancingStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetBalancingStatusType_descriptor(), enum_t_value);
}
inline bool SetBalancingStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetBalancingStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetBalancingStatusType>(
    SetBalancingStatusType_descriptor(), name, value);
}
enum TractionControlType : int {
  TRACTION_CONTROL_OFF = 0,
  TRACTION_CONTROL_SLIP_CONTROL = 1,
  TRACTION_CONTROL_TORQUE_VECTORING = 2,
  TRACTION_CONTROL_COMPLETE = 3,
  TractionControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TractionControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TractionControlType_IsValid(int value);
constexpr TractionControlType TractionControlType_MIN = TRACTION_CONTROL_OFF;
constexpr TractionControlType TractionControlType_MAX = TRACTION_CONTROL_COMPLETE;
constexpr int TractionControlType_ARRAYSIZE = TractionControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TractionControlType_descriptor();
template<typename T>
inline const std::string& TractionControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TractionControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TractionControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TractionControlType_descriptor(), enum_t_value);
}
inline bool TractionControlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TractionControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TractionControlType>(
    TractionControlType_descriptor(), name, value);
}
enum MapType : int {
  MAP_R = 0,
  MAP_D20 = 1,
  MAP_D40 = 2,
  MAP_D60 = 3,
  MAP_D80 = 4,
  MAP_D100 = 5,
  MapType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MapType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MapType_IsValid(int value);
constexpr MapType MapType_MIN = MAP_R;
constexpr MapType MapType_MAX = MAP_D100;
constexpr int MapType_ARRAYSIZE = MapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapType_descriptor();
template<typename T>
inline const std::string& MapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MapType_descriptor(), enum_t_value);
}
inline bool MapType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MapType>(
    MapType_descriptor(), name, value);
}
enum CarStatusSetType : int {
  CAR_STATUS_SET_IDLE = 0,
  CAR_STATUS_SET_RUN = 1,
  CarStatusSetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CarStatusSetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CarStatusSetType_IsValid(int value);
constexpr CarStatusSetType CarStatusSetType_MIN = CAR_STATUS_SET_IDLE;
constexpr CarStatusSetType CarStatusSetType_MAX = CAR_STATUS_SET_RUN;
constexpr int CarStatusSetType_ARRAYSIZE = CarStatusSetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarStatusSetType_descriptor();
template<typename T>
inline const std::string& CarStatusSetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CarStatusSetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CarStatusSetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CarStatusSetType_descriptor(), enum_t_value);
}
inline bool CarStatusSetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CarStatusSetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CarStatusSetType>(
    CarStatusSetType_descriptor(), name, value);
}
enum BoundType : int {
  BOUND_SET_MAX = 0,
  BOUND_SET_MIN = 1,
  BoundType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BoundType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BoundType_IsValid(int value);
constexpr BoundType BoundType_MIN = BOUND_SET_MAX;
constexpr BoundType BoundType_MAX = BOUND_SET_MIN;
constexpr int BoundType_ARRAYSIZE = BoundType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundType_descriptor();
template<typename T>
inline const std::string& BoundType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoundType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoundType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoundType_descriptor(), enum_t_value);
}
inline bool BoundType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoundType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoundType>(
    BoundType_descriptor(), name, value);
}
enum PedalType : int {
  PEDAL_ACCELERATOR = 0,
  PEDAL_BRAKE = 1,
  PedalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PedalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PedalType_IsValid(int value);
constexpr PedalType PedalType_MIN = PEDAL_ACCELERATOR;
constexpr PedalType PedalType_MAX = PEDAL_BRAKE;
constexpr int PedalType_ARRAYSIZE = PedalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PedalType_descriptor();
template<typename T>
inline const std::string& PedalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PedalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PedalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PedalType_descriptor(), enum_t_value);
}
inline bool PedalType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PedalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PedalType>(
    PedalType_descriptor(), name, value);
}
enum BalancingStatusType : int {
  BALANCING_STATUS_OFF = 0,
  BALANCING_STATUS_ON = 1,
  BalancingStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BalancingStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BalancingStatusType_IsValid(int value);
constexpr BalancingStatusType BalancingStatusType_MIN = BALANCING_STATUS_OFF;
constexpr BalancingStatusType BalancingStatusType_MAX = BALANCING_STATUS_ON;
constexpr int BalancingStatusType_ARRAYSIZE = BalancingStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BalancingStatusType_descriptor();
template<typename T>
inline const std::string& BalancingStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BalancingStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BalancingStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BalancingStatusType_descriptor(), enum_t_value);
}
inline bool BalancingStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BalancingStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BalancingStatusType>(
    BalancingStatusType_descriptor(), name, value);
}
// ===================================================================

class SteerVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SteerVersion) */ {
 public:
  inline SteerVersion() : SteerVersion(nullptr) {}
  ~SteerVersion() override;
  explicit PROTOBUF_CONSTEXPR SteerVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SteerVersion(const SteerVersion& from);
  SteerVersion(SteerVersion&& from) noexcept
    : SteerVersion() {
    *this = ::std::move(from);
  }

  inline SteerVersion& operator=(const SteerVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteerVersion& operator=(SteerVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SteerVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const SteerVersion* internal_default_instance() {
    return reinterpret_cast<const SteerVersion*>(
               &_SteerVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SteerVersion& a, SteerVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(SteerVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SteerVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SteerVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SteerVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SteerVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SteerVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteerVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SteerVersion";
  }
  protected:
  explicit SteerVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentVersionFieldNumber = 1,
    kCancicdVersionFieldNumber = 2,
  };
  // uint32 component_version = 1;
  void clear_component_version();
  uint32_t component_version() const;
  void set_component_version(uint32_t value);
  private:
  uint32_t _internal_component_version() const;
  void _internal_set_component_version(uint32_t value);
  public:

  // uint32 cancicd_version = 2;
  void clear_cancicd_version();
  uint32_t cancicd_version() const;
  void set_cancicd_version(uint32_t value);
  private:
  uint32_t _internal_cancicd_version() const;
  void _internal_set_cancicd_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SteerVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t component_version_;
  uint32_t cancicd_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class DasVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.DasVersion) */ {
 public:
  inline DasVersion() : DasVersion(nullptr) {}
  ~DasVersion() override;
  explicit PROTOBUF_CONSTEXPR DasVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DasVersion(const DasVersion& from);
  DasVersion(DasVersion&& from) noexcept
    : DasVersion() {
    *this = ::std::move(from);
  }

  inline DasVersion& operator=(const DasVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline DasVersion& operator=(DasVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DasVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const DasVersion* internal_default_instance() {
    return reinterpret_cast<const DasVersion*>(
               &_DasVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DasVersion& a, DasVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(DasVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DasVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DasVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DasVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DasVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DasVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DasVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.DasVersion";
  }
  protected:
  explicit DasVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentVersionFieldNumber = 1,
    kCancicdVersionFieldNumber = 2,
  };
  // uint32 component_version = 1;
  void clear_component_version();
  uint32_t component_version() const;
  void set_component_version(uint32_t value);
  private:
  uint32_t _internal_component_version() const;
  void _internal_set_component_version(uint32_t value);
  public:

  // uint32 cancicd_version = 2;
  void clear_cancicd_version();
  uint32_t cancicd_version() const;
  void set_cancicd_version(uint32_t value);
  private:
  uint32_t _internal_cancicd_version() const;
  void _internal_set_cancicd_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.DasVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t component_version_;
  uint32_t cancicd_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvVersion) */ {
 public:
  inline HvVersion() : HvVersion(nullptr) {}
  ~HvVersion() override;
  explicit PROTOBUF_CONSTEXPR HvVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvVersion(const HvVersion& from);
  HvVersion(HvVersion&& from) noexcept
    : HvVersion() {
    *this = ::std::move(from);
  }

  inline HvVersion& operator=(const HvVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvVersion& operator=(HvVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvVersion* internal_default_instance() {
    return reinterpret_cast<const HvVersion*>(
               &_HvVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HvVersion& a, HvVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(HvVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvVersion";
  }
  protected:
  explicit HvVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentVersionFieldNumber = 1,
    kCancicdVersionFieldNumber = 2,
  };
  // uint32 component_version = 1;
  void clear_component_version();
  uint32_t component_version() const;
  void set_component_version(uint32_t value);
  private:
  uint32_t _internal_component_version() const;
  void _internal_set_component_version(uint32_t value);
  public:

  // uint32 cancicd_version = 2;
  void clear_cancicd_version();
  uint32_t cancicd_version() const;
  void set_cancicd_version(uint32_t value);
  private:
  uint32_t _internal_cancicd_version() const;
  void _internal_set_cancicd_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t component_version_;
  uint32_t cancicd_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class LvVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.LvVersion) */ {
 public:
  inline LvVersion() : LvVersion(nullptr) {}
  ~LvVersion() override;
  explicit PROTOBUF_CONSTEXPR LvVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LvVersion(const LvVersion& from);
  LvVersion(LvVersion&& from) noexcept
    : LvVersion() {
    *this = ::std::move(from);
  }

  inline LvVersion& operator=(const LvVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline LvVersion& operator=(LvVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LvVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const LvVersion* internal_default_instance() {
    return reinterpret_cast<const LvVersion*>(
               &_LvVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LvVersion& a, LvVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(LvVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LvVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LvVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LvVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LvVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LvVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LvVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.LvVersion";
  }
  protected:
  explicit LvVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentVersionFieldNumber = 1,
    kCancicdVersionFieldNumber = 2,
  };
  // uint32 component_version = 1;
  void clear_component_version();
  uint32_t component_version() const;
  void set_component_version(uint32_t value);
  private:
  uint32_t _internal_component_version() const;
  void _internal_set_component_version(uint32_t value);
  public:

  // uint32 cancicd_version = 2;
  void clear_cancicd_version();
  uint32_t cancicd_version() const;
  void set_cancicd_version(uint32_t value);
  private:
  uint32_t _internal_cancicd_version() const;
  void _internal_set_cancicd_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.LvVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t component_version_;
  uint32_t cancicd_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class TlmVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.TlmVersion) */ {
 public:
  inline TlmVersion() : TlmVersion(nullptr) {}
  ~TlmVersion() override;
  explicit PROTOBUF_CONSTEXPR TlmVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TlmVersion(const TlmVersion& from);
  TlmVersion(TlmVersion&& from) noexcept
    : TlmVersion() {
    *this = ::std::move(from);
  }

  inline TlmVersion& operator=(const TlmVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TlmVersion& operator=(TlmVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TlmVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const TlmVersion* internal_default_instance() {
    return reinterpret_cast<const TlmVersion*>(
               &_TlmVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TlmVersion& a, TlmVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(TlmVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TlmVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TlmVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TlmVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TlmVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TlmVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TlmVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.TlmVersion";
  }
  protected:
  explicit TlmVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentVersionFieldNumber = 1,
    kCancicdVersionFieldNumber = 2,
  };
  // uint32 component_version = 1;
  void clear_component_version();
  uint32_t component_version() const;
  void set_component_version(uint32_t value);
  private:
  uint32_t _internal_component_version() const;
  void _internal_set_component_version(uint32_t value);
  public:

  // uint32 cancicd_version = 2;
  void clear_cancicd_version();
  uint32_t cancicd_version() const;
  void set_cancicd_version(uint32_t value);
  private:
  uint32_t _internal_cancicd_version() const;
  void _internal_set_cancicd_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.TlmVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t component_version_;
  uint32_t cancicd_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit PROTOBUF_CONSTEXPR Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timestamp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint32 timestamp = 1;
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SetTlmStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SetTlmStatus) */ {
 public:
  inline SetTlmStatus() : SetTlmStatus(nullptr) {}
  ~SetTlmStatus() override;
  explicit PROTOBUF_CONSTEXPR SetTlmStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTlmStatus(const SetTlmStatus& from);
  SetTlmStatus(SetTlmStatus&& from) noexcept
    : SetTlmStatus() {
    *this = ::std::move(from);
  }

  inline SetTlmStatus& operator=(const SetTlmStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTlmStatus& operator=(SetTlmStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTlmStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTlmStatus* internal_default_instance() {
    return reinterpret_cast<const SetTlmStatus*>(
               &_SetTlmStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetTlmStatus& a, SetTlmStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTlmStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTlmStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTlmStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTlmStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTlmStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTlmStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTlmStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SetTlmStatus";
  }
  protected:
  explicit SetTlmStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlmStatusFieldNumber = 1,
    kRaceTypeFieldNumber = 2,
    kDriverFieldNumber = 3,
    kCircuitFieldNumber = 4,
  };
  // .primary.TlmStatusType tlm_status = 1;
  void clear_tlm_status();
  ::primary::TlmStatusType tlm_status() const;
  void set_tlm_status(::primary::TlmStatusType value);
  private:
  ::primary::TlmStatusType _internal_tlm_status() const;
  void _internal_set_tlm_status(::primary::TlmStatusType value);
  public:

  // .primary.RaceTypeType race_type = 2;
  void clear_race_type();
  ::primary::RaceTypeType race_type() const;
  void set_race_type(::primary::RaceTypeType value);
  private:
  ::primary::RaceTypeType _internal_race_type() const;
  void _internal_set_race_type(::primary::RaceTypeType value);
  public:

  // uint32 driver = 3;
  void clear_driver();
  uint32_t driver() const;
  void set_driver(uint32_t value);
  private:
  uint32_t _internal_driver() const;
  void _internal_set_driver(uint32_t value);
  public:

  // uint32 circuit = 4;
  void clear_circuit();
  uint32_t circuit() const;
  void set_circuit(uint32_t value);
  private:
  uint32_t _internal_circuit() const;
  void _internal_set_circuit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SetTlmStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int tlm_status_;
  int race_type_;
  uint32_t driver_;
  uint32_t circuit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SteerSystemStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SteerSystemStatus) */ {
 public:
  inline SteerSystemStatus() : SteerSystemStatus(nullptr) {}
  ~SteerSystemStatus() override;
  explicit PROTOBUF_CONSTEXPR SteerSystemStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SteerSystemStatus(const SteerSystemStatus& from);
  SteerSystemStatus(SteerSystemStatus&& from) noexcept
    : SteerSystemStatus() {
    *this = ::std::move(from);
  }

  inline SteerSystemStatus& operator=(const SteerSystemStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteerSystemStatus& operator=(SteerSystemStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SteerSystemStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SteerSystemStatus* internal_default_instance() {
    return reinterpret_cast<const SteerSystemStatus*>(
               &_SteerSystemStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SteerSystemStatus& a, SteerSystemStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SteerSystemStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SteerSystemStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SteerSystemStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SteerSystemStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SteerSystemStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SteerSystemStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteerSystemStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SteerSystemStatus";
  }
  protected:
  explicit SteerSystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocTempFieldNumber = 1,
  };
  // uint32 soc_temp = 1;
  void clear_soc_temp();
  uint32_t soc_temp() const;
  void set_soc_temp(uint32_t value);
  private:
  uint32_t _internal_soc_temp() const;
  void _internal_set_soc_temp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SteerSystemStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t soc_temp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class Marker final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:primary.Marker) */ {
 public:
  inline Marker() : Marker(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Marker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Marker(const Marker& from);
  Marker(Marker&& from) noexcept
    : Marker() {
    *this = ::std::move(from);
  }

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker& operator=(Marker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marker& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marker* internal_default_instance() {
    return reinterpret_cast<const Marker*>(
               &_Marker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Marker& a, Marker& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Marker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Marker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Marker& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Marker& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.Marker";
  }
  protected:
  explicit Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:primary.Marker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class TlmStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.TlmStatus) */ {
 public:
  inline TlmStatus() : TlmStatus(nullptr) {}
  ~TlmStatus() override;
  explicit PROTOBUF_CONSTEXPR TlmStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TlmStatus(const TlmStatus& from);
  TlmStatus(TlmStatus&& from) noexcept
    : TlmStatus() {
    *this = ::std::move(from);
  }

  inline TlmStatus& operator=(const TlmStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TlmStatus& operator=(TlmStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TlmStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TlmStatus* internal_default_instance() {
    return reinterpret_cast<const TlmStatus*>(
               &_TlmStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TlmStatus& a, TlmStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TlmStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TlmStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TlmStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TlmStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TlmStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TlmStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TlmStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.TlmStatus";
  }
  protected:
  explicit TlmStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlmStatusFieldNumber = 1,
    kRaceTypeFieldNumber = 2,
    kDriverFieldNumber = 3,
    kCircuitFieldNumber = 4,
  };
  // .primary.TlmStatusType tlm_status = 1;
  void clear_tlm_status();
  ::primary::TlmStatusType tlm_status() const;
  void set_tlm_status(::primary::TlmStatusType value);
  private:
  ::primary::TlmStatusType _internal_tlm_status() const;
  void _internal_set_tlm_status(::primary::TlmStatusType value);
  public:

  // .primary.RaceTypeType race_type = 2;
  void clear_race_type();
  ::primary::RaceTypeType race_type() const;
  void set_race_type(::primary::RaceTypeType value);
  private:
  ::primary::RaceTypeType _internal_race_type() const;
  void _internal_set_race_type(::primary::RaceTypeType value);
  public:

  // uint32 driver = 3;
  void clear_driver();
  uint32_t driver() const;
  void set_driver(uint32_t value);
  private:
  uint32_t _internal_driver() const;
  void _internal_set_driver(uint32_t value);
  public:

  // uint32 circuit = 4;
  void clear_circuit();
  uint32_t circuit() const;
  void set_circuit(uint32_t value);
  private:
  uint32_t _internal_circuit() const;
  void _internal_set_circuit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.TlmStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int tlm_status_;
  int race_type_;
  uint32_t driver_;
  uint32_t circuit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class CarStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.CarStatus) */ {
 public:
  inline CarStatus() : CarStatus(nullptr) {}
  ~CarStatus() override;
  explicit PROTOBUF_CONSTEXPR CarStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarStatus(const CarStatus& from);
  CarStatus(CarStatus&& from) noexcept
    : CarStatus() {
    *this = ::std::move(from);
  }

  inline CarStatus& operator=(const CarStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarStatus& operator=(CarStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarStatus* internal_default_instance() {
    return reinterpret_cast<const CarStatus*>(
               &_CarStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CarStatus& a, CarStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CarStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CarStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.CarStatus";
  }
  protected:
  explicit CarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInverterLFieldNumber = 1,
    kInverterRFieldNumber = 2,
    kCarStatusFieldNumber = 3,
  };
  // .primary.InverterStatusType inverter_l = 1;
  void clear_inverter_l();
  ::primary::InverterStatusType inverter_l() const;
  void set_inverter_l(::primary::InverterStatusType value);
  private:
  ::primary::InverterStatusType _internal_inverter_l() const;
  void _internal_set_inverter_l(::primary::InverterStatusType value);
  public:

  // .primary.InverterStatusType inverter_r = 2;
  void clear_inverter_r();
  ::primary::InverterStatusType inverter_r() const;
  void set_inverter_r(::primary::InverterStatusType value);
  private:
  ::primary::InverterStatusType _internal_inverter_r() const;
  void _internal_set_inverter_r(::primary::InverterStatusType value);
  public:

  // .primary.CarStatusType car_status = 3;
  void clear_car_status();
  ::primary::CarStatusType car_status() const;
  void set_car_status(::primary::CarStatusType value);
  private:
  ::primary::CarStatusType _internal_car_status() const;
  void _internal_set_car_status(::primary::CarStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.CarStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int inverter_l_;
  int inverter_r_;
  int car_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class DasErrors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.DasErrors) */ {
 public:
  inline DasErrors() : DasErrors(nullptr) {}
  ~DasErrors() override;
  explicit PROTOBUF_CONSTEXPR DasErrors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DasErrors(const DasErrors& from);
  DasErrors(DasErrors&& from) noexcept
    : DasErrors() {
    *this = ::std::move(from);
  }

  inline DasErrors& operator=(const DasErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline DasErrors& operator=(DasErrors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DasErrors& default_instance() {
    return *internal_default_instance();
  }
  static inline const DasErrors* internal_default_instance() {
    return reinterpret_cast<const DasErrors*>(
               &_DasErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DasErrors& a, DasErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(DasErrors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DasErrors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DasErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DasErrors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DasErrors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DasErrors& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DasErrors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.DasErrors";
  }
  protected:
  explicit DasErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDasErrorFieldNumber = 1,
  };
  // uint32 das_error = 1;
  void clear_das_error();
  uint32_t das_error() const;
  void set_das_error(uint32_t value);
  private:
  uint32_t _internal_das_error() const;
  void _internal_set_das_error(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.DasErrors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t das_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class Speed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.Speed) */ {
 public:
  inline Speed() : Speed(nullptr) {}
  ~Speed() override;
  explicit PROTOBUF_CONSTEXPR Speed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Speed(const Speed& from);
  Speed(Speed&& from) noexcept
    : Speed() {
    *this = ::std::move(from);
  }

  inline Speed& operator=(const Speed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Speed& operator=(Speed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Speed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Speed* internal_default_instance() {
    return reinterpret_cast<const Speed*>(
               &_Speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Speed& a, Speed& b) {
    a.Swap(&b);
  }
  inline void Swap(Speed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Speed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Speed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Speed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Speed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Speed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Speed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.Speed";
  }
  protected:
  explicit Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncoderRFieldNumber = 1,
    kEncoderLFieldNumber = 2,
    kInverterRFieldNumber = 3,
    kInverterLFieldNumber = 4,
  };
  // uint32 encoder_r = 1;
  void clear_encoder_r();
  uint32_t encoder_r() const;
  void set_encoder_r(uint32_t value);
  private:
  uint32_t _internal_encoder_r() const;
  void _internal_set_encoder_r(uint32_t value);
  public:

  // uint32 encoder_l = 2;
  void clear_encoder_l();
  uint32_t encoder_l() const;
  void set_encoder_l(uint32_t value);
  private:
  uint32_t _internal_encoder_l() const;
  void _internal_set_encoder_l(uint32_t value);
  public:

  // uint32 inverter_r = 3;
  void clear_inverter_r();
  uint32_t inverter_r() const;
  void set_inverter_r(uint32_t value);
  private:
  uint32_t _internal_inverter_r() const;
  void _internal_set_inverter_r(uint32_t value);
  public:

  // uint32 inverter_l = 4;
  void clear_inverter_l();
  uint32_t inverter_l() const;
  void set_inverter_l(uint32_t value);
  private:
  uint32_t _internal_inverter_l() const;
  void _internal_set_inverter_l(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.Speed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t encoder_r_;
  uint32_t encoder_l_;
  uint32_t inverter_r_;
  uint32_t inverter_l_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvVoltage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvVoltage) */ {
 public:
  inline HvVoltage() : HvVoltage(nullptr) {}
  ~HvVoltage() override;
  explicit PROTOBUF_CONSTEXPR HvVoltage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvVoltage(const HvVoltage& from);
  HvVoltage(HvVoltage&& from) noexcept
    : HvVoltage() {
    *this = ::std::move(from);
  }

  inline HvVoltage& operator=(const HvVoltage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvVoltage& operator=(HvVoltage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvVoltage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvVoltage* internal_default_instance() {
    return reinterpret_cast<const HvVoltage*>(
               &_HvVoltage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HvVoltage& a, HvVoltage& b) {
    a.Swap(&b);
  }
  inline void Swap(HvVoltage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvVoltage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvVoltage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvVoltage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvVoltage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvVoltage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvVoltage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvVoltage";
  }
  protected:
  explicit HvVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackVoltageFieldNumber = 1,
    kBusVoltageFieldNumber = 2,
    kMaxCellVoltageFieldNumber = 3,
    kMinCellVoltageFieldNumber = 4,
  };
  // uint32 pack_voltage = 1;
  void clear_pack_voltage();
  uint32_t pack_voltage() const;
  void set_pack_voltage(uint32_t value);
  private:
  uint32_t _internal_pack_voltage() const;
  void _internal_set_pack_voltage(uint32_t value);
  public:

  // uint32 bus_voltage = 2;
  void clear_bus_voltage();
  uint32_t bus_voltage() const;
  void set_bus_voltage(uint32_t value);
  private:
  uint32_t _internal_bus_voltage() const;
  void _internal_set_bus_voltage(uint32_t value);
  public:

  // uint32 max_cell_voltage = 3;
  void clear_max_cell_voltage();
  uint32_t max_cell_voltage() const;
  void set_max_cell_voltage(uint32_t value);
  private:
  uint32_t _internal_max_cell_voltage() const;
  void _internal_set_max_cell_voltage(uint32_t value);
  public:

  // uint32 min_cell_voltage = 4;
  void clear_min_cell_voltage();
  uint32_t min_cell_voltage() const;
  void set_min_cell_voltage(uint32_t value);
  private:
  uint32_t _internal_min_cell_voltage() const;
  void _internal_set_min_cell_voltage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvVoltage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t pack_voltage_;
  uint32_t bus_voltage_;
  uint32_t max_cell_voltage_;
  uint32_t min_cell_voltage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvCurrent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvCurrent) */ {
 public:
  inline HvCurrent() : HvCurrent(nullptr) {}
  ~HvCurrent() override;
  explicit PROTOBUF_CONSTEXPR HvCurrent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvCurrent(const HvCurrent& from);
  HvCurrent(HvCurrent&& from) noexcept
    : HvCurrent() {
    *this = ::std::move(from);
  }

  inline HvCurrent& operator=(const HvCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvCurrent& operator=(HvCurrent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvCurrent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvCurrent* internal_default_instance() {
    return reinterpret_cast<const HvCurrent*>(
               &_HvCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HvCurrent& a, HvCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(HvCurrent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvCurrent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvCurrent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvCurrent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvCurrent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvCurrent";
  }
  protected:
  explicit HvCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kPowerFieldNumber = 2,
  };
  // uint32 current = 1;
  void clear_current();
  uint32_t current() const;
  void set_current(uint32_t value);
  private:
  uint32_t _internal_current() const;
  void _internal_set_current(uint32_t value);
  public:

  // int32 power = 2;
  void clear_power();
  int32_t power() const;
  void set_power(int32_t value);
  private:
  int32_t _internal_power() const;
  void _internal_set_power(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t current_;
  int32_t power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvTemp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvTemp) */ {
 public:
  inline HvTemp() : HvTemp(nullptr) {}
  ~HvTemp() override;
  explicit PROTOBUF_CONSTEXPR HvTemp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvTemp(const HvTemp& from);
  HvTemp(HvTemp&& from) noexcept
    : HvTemp() {
    *this = ::std::move(from);
  }

  inline HvTemp& operator=(const HvTemp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvTemp& operator=(HvTemp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvTemp& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvTemp* internal_default_instance() {
    return reinterpret_cast<const HvTemp*>(
               &_HvTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HvTemp& a, HvTemp& b) {
    a.Swap(&b);
  }
  inline void Swap(HvTemp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvTemp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvTemp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvTemp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvTemp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvTemp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvTemp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvTemp";
  }
  protected:
  explicit HvTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageTempFieldNumber = 1,
    kMaxTempFieldNumber = 2,
    kMinTempFieldNumber = 3,
  };
  // uint32 average_temp = 1;
  void clear_average_temp();
  uint32_t average_temp() const;
  void set_average_temp(uint32_t value);
  private:
  uint32_t _internal_average_temp() const;
  void _internal_set_average_temp(uint32_t value);
  public:

  // uint32 max_temp = 2;
  void clear_max_temp();
  uint32_t max_temp() const;
  void set_max_temp(uint32_t value);
  private:
  uint32_t _internal_max_temp() const;
  void _internal_set_max_temp(uint32_t value);
  public:

  // uint32 min_temp = 3;
  void clear_min_temp();
  uint32_t min_temp() const;
  void set_min_temp(uint32_t value);
  private:
  uint32_t _internal_min_temp() const;
  void _internal_set_min_temp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvTemp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t average_temp_;
  uint32_t max_temp_;
  uint32_t min_temp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvErrors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvErrors) */ {
 public:
  inline HvErrors() : HvErrors(nullptr) {}
  ~HvErrors() override;
  explicit PROTOBUF_CONSTEXPR HvErrors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvErrors(const HvErrors& from);
  HvErrors(HvErrors&& from) noexcept
    : HvErrors() {
    *this = ::std::move(from);
  }

  inline HvErrors& operator=(const HvErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvErrors& operator=(HvErrors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvErrors& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvErrors* internal_default_instance() {
    return reinterpret_cast<const HvErrors*>(
               &_HvErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(HvErrors& a, HvErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(HvErrors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvErrors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvErrors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvErrors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvErrors& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvErrors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvErrors";
  }
  protected:
  explicit HvErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 1,
    kErrorsFieldNumber = 2,
  };
  // uint32 warnings = 1;
  void clear_warnings();
  uint32_t warnings() const;
  void set_warnings(uint32_t value);
  private:
  uint32_t _internal_warnings() const;
  void _internal_set_warnings(uint32_t value);
  public:

  // uint32 errors = 2;
  void clear_errors();
  uint32_t errors() const;
  void set_errors(uint32_t value);
  private:
  uint32_t _internal_errors() const;
  void _internal_set_errors(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvErrors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t warnings_;
  uint32_t errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class TsStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.TsStatus) */ {
 public:
  inline TsStatus() : TsStatus(nullptr) {}
  ~TsStatus() override;
  explicit PROTOBUF_CONSTEXPR TsStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TsStatus(const TsStatus& from);
  TsStatus(TsStatus&& from) noexcept
    : TsStatus() {
    *this = ::std::move(from);
  }

  inline TsStatus& operator=(const TsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsStatus& operator=(TsStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TsStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TsStatus* internal_default_instance() {
    return reinterpret_cast<const TsStatus*>(
               &_TsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TsStatus& a, TsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TsStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TsStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TsStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TsStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.TsStatus";
  }
  protected:
  explicit TsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsStatusFieldNumber = 1,
  };
  // .primary.TsStatusType ts_status = 1;
  void clear_ts_status();
  ::primary::TsStatusType ts_status() const;
  void set_ts_status(::primary::TsStatusType value);
  private:
  ::primary::TsStatusType _internal_ts_status() const;
  void _internal_set_ts_status(::primary::TsStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.TsStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int ts_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SetTsStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SetTsStatus) */ {
 public:
  inline SetTsStatus() : SetTsStatus(nullptr) {}
  ~SetTsStatus() override;
  explicit PROTOBUF_CONSTEXPR SetTsStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTsStatus(const SetTsStatus& from);
  SetTsStatus(SetTsStatus&& from) noexcept
    : SetTsStatus() {
    *this = ::std::move(from);
  }

  inline SetTsStatus& operator=(const SetTsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTsStatus& operator=(SetTsStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTsStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTsStatus* internal_default_instance() {
    return reinterpret_cast<const SetTsStatus*>(
               &_SetTsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetTsStatus& a, SetTsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTsStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTsStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTsStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTsStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTsStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTsStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SetTsStatus";
  }
  protected:
  explicit SetTsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsStatusSetFieldNumber = 1,
  };
  // .primary.TsStatusSetType ts_status_set = 1;
  void clear_ts_status_set();
  ::primary::TsStatusSetType ts_status_set() const;
  void set_ts_status_set(::primary::TsStatusSetType value);
  private:
  ::primary::TsStatusSetType _internal_ts_status_set() const;
  void _internal_set_ts_status_set(::primary::TsStatusSetType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SetTsStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int ts_status_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SetCellBalancingStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SetCellBalancingStatus) */ {
 public:
  inline SetCellBalancingStatus() : SetCellBalancingStatus(nullptr) {}
  ~SetCellBalancingStatus() override;
  explicit PROTOBUF_CONSTEXPR SetCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCellBalancingStatus(const SetCellBalancingStatus& from);
  SetCellBalancingStatus(SetCellBalancingStatus&& from) noexcept
    : SetCellBalancingStatus() {
    *this = ::std::move(from);
  }

  inline SetCellBalancingStatus& operator=(const SetCellBalancingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCellBalancingStatus& operator=(SetCellBalancingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCellBalancingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCellBalancingStatus* internal_default_instance() {
    return reinterpret_cast<const SetCellBalancingStatus*>(
               &_SetCellBalancingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetCellBalancingStatus& a, SetCellBalancingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCellBalancingStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCellBalancingStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCellBalancingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCellBalancingStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCellBalancingStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCellBalancingStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCellBalancingStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SetCellBalancingStatus";
  }
  protected:
  explicit SetCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetBalancingStatusFieldNumber = 1,
  };
  // .primary.SetBalancingStatusType set_balancing_status = 1;
  void clear_set_balancing_status();
  ::primary::SetBalancingStatusType set_balancing_status() const;
  void set_set_balancing_status(::primary::SetBalancingStatusType value);
  private:
  ::primary::SetBalancingStatusType _internal_set_balancing_status() const;
  void _internal_set_set_balancing_status(::primary::SetBalancingStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SetCellBalancingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int set_balancing_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HandcartStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HandcartStatus) */ {
 public:
  inline HandcartStatus() : HandcartStatus(nullptr) {}
  ~HandcartStatus() override;
  explicit PROTOBUF_CONSTEXPR HandcartStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandcartStatus(const HandcartStatus& from);
  HandcartStatus(HandcartStatus&& from) noexcept
    : HandcartStatus() {
    *this = ::std::move(from);
  }

  inline HandcartStatus& operator=(const HandcartStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandcartStatus& operator=(HandcartStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandcartStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandcartStatus* internal_default_instance() {
    return reinterpret_cast<const HandcartStatus*>(
               &_HandcartStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HandcartStatus& a, HandcartStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(HandcartStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandcartStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandcartStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandcartStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandcartStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HandcartStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandcartStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HandcartStatus";
  }
  protected:
  explicit HandcartStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedFieldNumber = 1,
  };
  // bool connected = 1;
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HandcartStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool connected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SteerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SteerStatus) */ {
 public:
  inline SteerStatus() : SteerStatus(nullptr) {}
  ~SteerStatus() override;
  explicit PROTOBUF_CONSTEXPR SteerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SteerStatus(const SteerStatus& from);
  SteerStatus(SteerStatus&& from) noexcept
    : SteerStatus() {
    *this = ::std::move(from);
  }

  inline SteerStatus& operator=(const SteerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteerStatus& operator=(SteerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SteerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SteerStatus* internal_default_instance() {
    return reinterpret_cast<const SteerStatus*>(
               &_SteerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SteerStatus& a, SteerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SteerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SteerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SteerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SteerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SteerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SteerStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SteerStatus";
  }
  protected:
  explicit SteerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTractionControlFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .primary.TractionControlType traction_control = 1;
  void clear_traction_control();
  ::primary::TractionControlType traction_control() const;
  void set_traction_control(::primary::TractionControlType value);
  private:
  ::primary::TractionControlType _internal_traction_control() const;
  void _internal_set_traction_control(::primary::TractionControlType value);
  public:

  // .primary.MapType map = 2;
  void clear_map();
  ::primary::MapType map() const;
  void set_map(::primary::MapType value);
  private:
  ::primary::MapType _internal_map() const;
  void _internal_set_map(::primary::MapType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SteerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int traction_control_;
  int map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SetCarStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SetCarStatus) */ {
 public:
  inline SetCarStatus() : SetCarStatus(nullptr) {}
  ~SetCarStatus() override;
  explicit PROTOBUF_CONSTEXPR SetCarStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCarStatus(const SetCarStatus& from);
  SetCarStatus(SetCarStatus&& from) noexcept
    : SetCarStatus() {
    *this = ::std::move(from);
  }

  inline SetCarStatus& operator=(const SetCarStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCarStatus& operator=(SetCarStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCarStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCarStatus* internal_default_instance() {
    return reinterpret_cast<const SetCarStatus*>(
               &_SetCarStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetCarStatus& a, SetCarStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCarStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCarStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCarStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCarStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCarStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCarStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCarStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SetCarStatus";
  }
  protected:
  explicit SetCarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarStatusSetFieldNumber = 1,
  };
  // .primary.CarStatusSetType car_status_set = 1;
  void clear_car_status_set();
  ::primary::CarStatusSetType car_status_set() const;
  void set_car_status_set(::primary::CarStatusSetType value);
  private:
  ::primary::CarStatusSetType _internal_car_status_set() const;
  void _internal_set_car_status_set(::primary::CarStatusSetType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SetCarStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int car_status_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class SetPedalsRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.SetPedalsRange) */ {
 public:
  inline SetPedalsRange() : SetPedalsRange(nullptr) {}
  ~SetPedalsRange() override;
  explicit PROTOBUF_CONSTEXPR SetPedalsRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPedalsRange(const SetPedalsRange& from);
  SetPedalsRange(SetPedalsRange&& from) noexcept
    : SetPedalsRange() {
    *this = ::std::move(from);
  }

  inline SetPedalsRange& operator=(const SetPedalsRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPedalsRange& operator=(SetPedalsRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPedalsRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPedalsRange* internal_default_instance() {
    return reinterpret_cast<const SetPedalsRange*>(
               &_SetPedalsRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetPedalsRange& a, SetPedalsRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPedalsRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPedalsRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPedalsRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPedalsRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPedalsRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPedalsRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPedalsRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.SetPedalsRange";
  }
  protected:
  explicit SetPedalsRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundFieldNumber = 1,
    kPedalFieldNumber = 2,
  };
  // .primary.BoundType bound = 1;
  void clear_bound();
  ::primary::BoundType bound() const;
  void set_bound(::primary::BoundType value);
  private:
  ::primary::BoundType _internal_bound() const;
  void _internal_set_bound(::primary::BoundType value);
  public:

  // .primary.PedalType pedal = 2;
  void clear_pedal();
  ::primary::PedalType pedal() const;
  void set_pedal(::primary::PedalType value);
  private:
  ::primary::PedalType _internal_pedal() const;
  void _internal_set_pedal(::primary::PedalType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.SetPedalsRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int bound_;
  int pedal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class LvCurrent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.LvCurrent) */ {
 public:
  inline LvCurrent() : LvCurrent(nullptr) {}
  ~LvCurrent() override;
  explicit PROTOBUF_CONSTEXPR LvCurrent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LvCurrent(const LvCurrent& from);
  LvCurrent(LvCurrent&& from) noexcept
    : LvCurrent() {
    *this = ::std::move(from);
  }

  inline LvCurrent& operator=(const LvCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LvCurrent& operator=(LvCurrent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LvCurrent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LvCurrent* internal_default_instance() {
    return reinterpret_cast<const LvCurrent*>(
               &_LvCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LvCurrent& a, LvCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(LvCurrent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LvCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LvCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LvCurrent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LvCurrent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LvCurrent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LvCurrent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.LvCurrent";
  }
  protected:
  explicit LvCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
  };
  // uint32 current = 1;
  void clear_current();
  uint32_t current() const;
  void set_current(uint32_t value);
  private:
  uint32_t _internal_current() const;
  void _internal_set_current(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.LvCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class LvVoltage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.LvVoltage) */ {
 public:
  inline LvVoltage() : LvVoltage(nullptr) {}
  ~LvVoltage() override;
  explicit PROTOBUF_CONSTEXPR LvVoltage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LvVoltage(const LvVoltage& from);
  LvVoltage(LvVoltage&& from) noexcept
    : LvVoltage() {
    *this = ::std::move(from);
  }

  inline LvVoltage& operator=(const LvVoltage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LvVoltage& operator=(LvVoltage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LvVoltage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LvVoltage* internal_default_instance() {
    return reinterpret_cast<const LvVoltage*>(
               &_LvVoltage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LvVoltage& a, LvVoltage& b) {
    a.Swap(&b);
  }
  inline void Swap(LvVoltage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LvVoltage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LvVoltage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LvVoltage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LvVoltage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LvVoltage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LvVoltage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.LvVoltage";
  }
  protected:
  explicit LvVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalVoltageFieldNumber = 1,
    kVoltage1FieldNumber = 2,
    kVoltage2FieldNumber = 3,
    kVoltage3FieldNumber = 4,
    kVoltage4FieldNumber = 5,
  };
  // uint32 total_voltage = 1;
  void clear_total_voltage();
  uint32_t total_voltage() const;
  void set_total_voltage(uint32_t value);
  private:
  uint32_t _internal_total_voltage() const;
  void _internal_set_total_voltage(uint32_t value);
  public:

  // uint32 voltage_1 = 2;
  void clear_voltage_1();
  uint32_t voltage_1() const;
  void set_voltage_1(uint32_t value);
  private:
  uint32_t _internal_voltage_1() const;
  void _internal_set_voltage_1(uint32_t value);
  public:

  // uint32 voltage_2 = 3;
  void clear_voltage_2();
  uint32_t voltage_2() const;
  void set_voltage_2(uint32_t value);
  private:
  uint32_t _internal_voltage_2() const;
  void _internal_set_voltage_2(uint32_t value);
  public:

  // uint32 voltage_3 = 4;
  void clear_voltage_3();
  uint32_t voltage_3() const;
  void set_voltage_3(uint32_t value);
  private:
  uint32_t _internal_voltage_3() const;
  void _internal_set_voltage_3(uint32_t value);
  public:

  // uint32 voltage_4 = 5;
  void clear_voltage_4();
  uint32_t voltage_4() const;
  void set_voltage_4(uint32_t value);
  private:
  uint32_t _internal_voltage_4() const;
  void _internal_set_voltage_4(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.LvVoltage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t total_voltage_;
  uint32_t voltage_1_;
  uint32_t voltage_2_;
  uint32_t voltage_3_;
  uint32_t voltage_4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class LvTemperature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.LvTemperature) */ {
 public:
  inline LvTemperature() : LvTemperature(nullptr) {}
  ~LvTemperature() override;
  explicit PROTOBUF_CONSTEXPR LvTemperature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LvTemperature(const LvTemperature& from);
  LvTemperature(LvTemperature&& from) noexcept
    : LvTemperature() {
    *this = ::std::move(from);
  }

  inline LvTemperature& operator=(const LvTemperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline LvTemperature& operator=(LvTemperature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LvTemperature& default_instance() {
    return *internal_default_instance();
  }
  static inline const LvTemperature* internal_default_instance() {
    return reinterpret_cast<const LvTemperature*>(
               &_LvTemperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LvTemperature& a, LvTemperature& b) {
    a.Swap(&b);
  }
  inline void Swap(LvTemperature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LvTemperature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LvTemperature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LvTemperature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LvTemperature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LvTemperature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LvTemperature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.LvTemperature";
  }
  protected:
  explicit LvTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpTemperatureFieldNumber = 1,
    kDcdcTemperatureFieldNumber = 2,
  };
  // uint32 bp_temperature = 1;
  void clear_bp_temperature();
  uint32_t bp_temperature() const;
  void set_bp_temperature(uint32_t value);
  private:
  uint32_t _internal_bp_temperature() const;
  void _internal_set_bp_temperature(uint32_t value);
  public:

  // uint32 dcdc_temperature = 2;
  void clear_dcdc_temperature();
  uint32_t dcdc_temperature() const;
  void set_dcdc_temperature(uint32_t value);
  private:
  uint32_t _internal_dcdc_temperature() const;
  void _internal_set_dcdc_temperature(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.LvTemperature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t bp_temperature_;
  uint32_t dcdc_temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class CoolingStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.CoolingStatus) */ {
 public:
  inline CoolingStatus() : CoolingStatus(nullptr) {}
  ~CoolingStatus() override;
  explicit PROTOBUF_CONSTEXPR CoolingStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoolingStatus(const CoolingStatus& from);
  CoolingStatus(CoolingStatus&& from) noexcept
    : CoolingStatus() {
    *this = ::std::move(from);
  }

  inline CoolingStatus& operator=(const CoolingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoolingStatus& operator=(CoolingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoolingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoolingStatus* internal_default_instance() {
    return reinterpret_cast<const CoolingStatus*>(
               &_CoolingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CoolingStatus& a, CoolingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CoolingStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoolingStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoolingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoolingStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoolingStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoolingStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoolingStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.CoolingStatus";
  }
  protected:
  explicit CoolingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHvFanSpeedFieldNumber = 1,
    kLvFanSpeedFieldNumber = 2,
    kPumpSpeedFieldNumber = 3,
  };
  // uint32 hv_fan_speed = 1;
  void clear_hv_fan_speed();
  uint32_t hv_fan_speed() const;
  void set_hv_fan_speed(uint32_t value);
  private:
  uint32_t _internal_hv_fan_speed() const;
  void _internal_set_hv_fan_speed(uint32_t value);
  public:

  // uint32 lv_fan_speed = 2;
  void clear_lv_fan_speed();
  uint32_t lv_fan_speed() const;
  void set_lv_fan_speed(uint32_t value);
  private:
  uint32_t _internal_lv_fan_speed() const;
  void _internal_set_lv_fan_speed(uint32_t value);
  public:

  // uint32 pump_speed = 3;
  void clear_pump_speed();
  uint32_t pump_speed() const;
  void set_pump_speed(uint32_t value);
  private:
  uint32_t _internal_pump_speed() const;
  void _internal_set_pump_speed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.CoolingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t hv_fan_speed_;
  uint32_t lv_fan_speed_;
  uint32_t pump_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvCellsVoltage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvCellsVoltage) */ {
 public:
  inline HvCellsVoltage() : HvCellsVoltage(nullptr) {}
  ~HvCellsVoltage() override;
  explicit PROTOBUF_CONSTEXPR HvCellsVoltage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvCellsVoltage(const HvCellsVoltage& from);
  HvCellsVoltage(HvCellsVoltage&& from) noexcept
    : HvCellsVoltage() {
    *this = ::std::move(from);
  }

  inline HvCellsVoltage& operator=(const HvCellsVoltage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvCellsVoltage& operator=(HvCellsVoltage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvCellsVoltage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvCellsVoltage* internal_default_instance() {
    return reinterpret_cast<const HvCellsVoltage*>(
               &_HvCellsVoltage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(HvCellsVoltage& a, HvCellsVoltage& b) {
    a.Swap(&b);
  }
  inline void Swap(HvCellsVoltage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvCellsVoltage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvCellsVoltage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvCellsVoltage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvCellsVoltage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvCellsVoltage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvCellsVoltage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvCellsVoltage";
  }
  protected:
  explicit HvCellsVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIndexFieldNumber = 1,
    kVoltage0FieldNumber = 2,
    kVoltage1FieldNumber = 3,
    kVoltage2FieldNumber = 4,
  };
  // uint32 cell_index = 1;
  void clear_cell_index();
  uint32_t cell_index() const;
  void set_cell_index(uint32_t value);
  private:
  uint32_t _internal_cell_index() const;
  void _internal_set_cell_index(uint32_t value);
  public:

  // uint32 voltage_0 = 2;
  void clear_voltage_0();
  uint32_t voltage_0() const;
  void set_voltage_0(uint32_t value);
  private:
  uint32_t _internal_voltage_0() const;
  void _internal_set_voltage_0(uint32_t value);
  public:

  // uint32 voltage_1 = 3;
  void clear_voltage_1();
  uint32_t voltage_1() const;
  void set_voltage_1(uint32_t value);
  private:
  uint32_t _internal_voltage_1() const;
  void _internal_set_voltage_1(uint32_t value);
  public:

  // uint32 voltage_2 = 4;
  void clear_voltage_2();
  uint32_t voltage_2() const;
  void set_voltage_2(uint32_t value);
  private:
  uint32_t _internal_voltage_2() const;
  void _internal_set_voltage_2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvCellsVoltage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t cell_index_;
  uint32_t voltage_0_;
  uint32_t voltage_1_;
  uint32_t voltage_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvCellsTemp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvCellsTemp) */ {
 public:
  inline HvCellsTemp() : HvCellsTemp(nullptr) {}
  ~HvCellsTemp() override;
  explicit PROTOBUF_CONSTEXPR HvCellsTemp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvCellsTemp(const HvCellsTemp& from);
  HvCellsTemp(HvCellsTemp&& from) noexcept
    : HvCellsTemp() {
    *this = ::std::move(from);
  }

  inline HvCellsTemp& operator=(const HvCellsTemp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvCellsTemp& operator=(HvCellsTemp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvCellsTemp& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvCellsTemp* internal_default_instance() {
    return reinterpret_cast<const HvCellsTemp*>(
               &_HvCellsTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(HvCellsTemp& a, HvCellsTemp& b) {
    a.Swap(&b);
  }
  inline void Swap(HvCellsTemp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvCellsTemp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvCellsTemp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvCellsTemp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvCellsTemp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvCellsTemp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvCellsTemp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvCellsTemp";
  }
  protected:
  explicit HvCellsTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIndexFieldNumber = 1,
    kTemp0FieldNumber = 2,
    kTemp1FieldNumber = 3,
    kTemp2FieldNumber = 4,
    kTemp3FieldNumber = 5,
    kTemp4FieldNumber = 6,
    kTemp5FieldNumber = 7,
    kTemp6FieldNumber = 8,
  };
  // uint32 cell_index = 1;
  void clear_cell_index();
  uint32_t cell_index() const;
  void set_cell_index(uint32_t value);
  private:
  uint32_t _internal_cell_index() const;
  void _internal_set_cell_index(uint32_t value);
  public:

  // uint32 temp_0 = 2;
  void clear_temp_0();
  uint32_t temp_0() const;
  void set_temp_0(uint32_t value);
  private:
  uint32_t _internal_temp_0() const;
  void _internal_set_temp_0(uint32_t value);
  public:

  // uint32 temp_1 = 3;
  void clear_temp_1();
  uint32_t temp_1() const;
  void set_temp_1(uint32_t value);
  private:
  uint32_t _internal_temp_1() const;
  void _internal_set_temp_1(uint32_t value);
  public:

  // uint32 temp_2 = 4;
  void clear_temp_2();
  uint32_t temp_2() const;
  void set_temp_2(uint32_t value);
  private:
  uint32_t _internal_temp_2() const;
  void _internal_set_temp_2(uint32_t value);
  public:

  // uint32 temp_3 = 5;
  void clear_temp_3();
  uint32_t temp_3() const;
  void set_temp_3(uint32_t value);
  private:
  uint32_t _internal_temp_3() const;
  void _internal_set_temp_3(uint32_t value);
  public:

  // uint32 temp_4 = 6;
  void clear_temp_4();
  uint32_t temp_4() const;
  void set_temp_4(uint32_t value);
  private:
  uint32_t _internal_temp_4() const;
  void _internal_set_temp_4(uint32_t value);
  public:

  // uint32 temp_5 = 7;
  void clear_temp_5();
  uint32_t temp_5() const;
  void set_temp_5(uint32_t value);
  private:
  uint32_t _internal_temp_5() const;
  void _internal_set_temp_5(uint32_t value);
  public:

  // uint32 temp_6 = 8;
  void clear_temp_6();
  uint32_t temp_6() const;
  void set_temp_6(uint32_t value);
  private:
  uint32_t _internal_temp_6() const;
  void _internal_set_temp_6(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvCellsTemp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t cell_index_;
  uint32_t temp_0_;
  uint32_t temp_1_;
  uint32_t temp_2_;
  uint32_t temp_3_;
  uint32_t temp_4_;
  uint32_t temp_5_;
  uint32_t temp_6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class HvCellBalancingStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.HvCellBalancingStatus) */ {
 public:
  inline HvCellBalancingStatus() : HvCellBalancingStatus(nullptr) {}
  ~HvCellBalancingStatus() override;
  explicit PROTOBUF_CONSTEXPR HvCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HvCellBalancingStatus(const HvCellBalancingStatus& from);
  HvCellBalancingStatus(HvCellBalancingStatus&& from) noexcept
    : HvCellBalancingStatus() {
    *this = ::std::move(from);
  }

  inline HvCellBalancingStatus& operator=(const HvCellBalancingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline HvCellBalancingStatus& operator=(HvCellBalancingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HvCellBalancingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const HvCellBalancingStatus* internal_default_instance() {
    return reinterpret_cast<const HvCellBalancingStatus*>(
               &_HvCellBalancingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(HvCellBalancingStatus& a, HvCellBalancingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(HvCellBalancingStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HvCellBalancingStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HvCellBalancingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HvCellBalancingStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HvCellBalancingStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HvCellBalancingStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvCellBalancingStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.HvCellBalancingStatus";
  }
  protected:
  explicit HvCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancingStatusFieldNumber = 1,
  };
  // .primary.BalancingStatusType balancing_status = 1;
  void clear_balancing_status();
  ::primary::BalancingStatusType balancing_status() const;
  void set_balancing_status(::primary::BalancingStatusType value);
  private:
  ::primary::BalancingStatusType _internal_balancing_status() const;
  void _internal_set_balancing_status(::primary::BalancingStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:primary.HvCellBalancingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int balancing_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class InvLSetTorque final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.InvLSetTorque) */ {
 public:
  inline InvLSetTorque() : InvLSetTorque(nullptr) {}
  ~InvLSetTorque() override;
  explicit PROTOBUF_CONSTEXPR InvLSetTorque(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvLSetTorque(const InvLSetTorque& from);
  InvLSetTorque(InvLSetTorque&& from) noexcept
    : InvLSetTorque() {
    *this = ::std::move(from);
  }

  inline InvLSetTorque& operator=(const InvLSetTorque& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvLSetTorque& operator=(InvLSetTorque&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvLSetTorque& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvLSetTorque* internal_default_instance() {
    return reinterpret_cast<const InvLSetTorque*>(
               &_InvLSetTorque_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(InvLSetTorque& a, InvLSetTorque& b) {
    a.Swap(&b);
  }
  inline void Swap(InvLSetTorque* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvLSetTorque* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvLSetTorque* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvLSetTorque>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvLSetTorque& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvLSetTorque& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvLSetTorque* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.InvLSetTorque";
  }
  protected:
  explicit InvLSetTorque(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegidFieldNumber = 1,
    kLsbFieldNumber = 2,
    kMsbFieldNumber = 3,
  };
  // uint32 regid = 1;
  void clear_regid();
  uint32_t regid() const;
  void set_regid(uint32_t value);
  private:
  uint32_t _internal_regid() const;
  void _internal_set_regid(uint32_t value);
  public:

  // uint32 lsb = 2;
  void clear_lsb();
  uint32_t lsb() const;
  void set_lsb(uint32_t value);
  private:
  uint32_t _internal_lsb() const;
  void _internal_set_lsb(uint32_t value);
  public:

  // uint32 msb = 3;
  void clear_msb();
  uint32_t msb() const;
  void set_msb(uint32_t value);
  private:
  uint32_t _internal_msb() const;
  void _internal_set_msb(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.InvLSetTorque)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t regid_;
  uint32_t lsb_;
  uint32_t msb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class InvLResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.InvLResponse) */ {
 public:
  inline InvLResponse() : InvLResponse(nullptr) {}
  ~InvLResponse() override;
  explicit PROTOBUF_CONSTEXPR InvLResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvLResponse(const InvLResponse& from);
  InvLResponse(InvLResponse&& from) noexcept
    : InvLResponse() {
    *this = ::std::move(from);
  }

  inline InvLResponse& operator=(const InvLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvLResponse& operator=(InvLResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvLResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvLResponse* internal_default_instance() {
    return reinterpret_cast<const InvLResponse*>(
               &_InvLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(InvLResponse& a, InvLResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvLResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvLResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvLResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvLResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvLResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvLResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvLResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.InvLResponse";
  }
  protected:
  explicit InvLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegIdFieldNumber = 1,
    kRegValFieldNumber = 2,
  };
  // uint32 reg_id = 1;
  void clear_reg_id();
  uint32_t reg_id() const;
  void set_reg_id(uint32_t value);
  private:
  uint32_t _internal_reg_id() const;
  void _internal_set_reg_id(uint32_t value);
  public:

  // uint32 reg_val = 2;
  void clear_reg_val();
  uint32_t reg_val() const;
  void set_reg_val(uint32_t value);
  private:
  uint32_t _internal_reg_val() const;
  void _internal_set_reg_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:primary.InvLResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t reg_id_;
  uint32_t reg_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// -------------------------------------------------------------------

class PrimaryFenice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:primary.PrimaryFenice) */ {
 public:
  inline PrimaryFenice() : PrimaryFenice(nullptr) {}
  ~PrimaryFenice() override;
  explicit PROTOBUF_CONSTEXPR PrimaryFenice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimaryFenice(const PrimaryFenice& from);
  PrimaryFenice(PrimaryFenice&& from) noexcept
    : PrimaryFenice() {
    *this = ::std::move(from);
  }

  inline PrimaryFenice& operator=(const PrimaryFenice& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimaryFenice& operator=(PrimaryFenice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimaryFenice& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimaryFenice* internal_default_instance() {
    return reinterpret_cast<const PrimaryFenice*>(
               &_PrimaryFenice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PrimaryFenice& a, PrimaryFenice& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimaryFenice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimaryFenice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimaryFenice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimaryFenice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimaryFenice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrimaryFenice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimaryFenice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "primary.PrimaryFenice";
  }
  protected:
  explicit PrimaryFenice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteerVersionFieldNumber = 1,
    kDasVersionFieldNumber = 2,
    kHvVersionFieldNumber = 3,
    kLvVersionFieldNumber = 4,
    kTlmVersionFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kSetTlmStatusFieldNumber = 7,
    kSteerSystemStatusFieldNumber = 8,
    kMarkerFieldNumber = 9,
    kTlmStatusFieldNumber = 10,
    kCarStatusFieldNumber = 11,
    kDasErrorsFieldNumber = 12,
    kSpeedFieldNumber = 13,
    kHvVoltageFieldNumber = 14,
    kHvCurrentFieldNumber = 15,
    kHvTempFieldNumber = 16,
    kHvErrorsFieldNumber = 17,
    kTsStatusFieldNumber = 18,
    kSetTsStatusFieldNumber = 19,
    kSetCellBalancingStatusFieldNumber = 20,
    kHandcartStatusFieldNumber = 21,
    kSteerStatusFieldNumber = 22,
    kSetCarStatusFieldNumber = 23,
    kSetPedalsRangeFieldNumber = 24,
    kLvCurrentFieldNumber = 25,
    kLvVoltageFieldNumber = 26,
    kLvTemperatureFieldNumber = 27,
    kCoolingStatusFieldNumber = 28,
    kHvCellsVoltageFieldNumber = 29,
    kHvCellsTempFieldNumber = 30,
    kHvCellBalancingStatusFieldNumber = 31,
    kInvLSetTorqueFieldNumber = 32,
    kInvLResponseFieldNumber = 33,
  };
  // repeated .primary.SteerVersion steer_version = 1;
  int steer_version_size() const;
  private:
  int _internal_steer_version_size() const;
  public:
  void clear_steer_version();
  ::primary::SteerVersion* mutable_steer_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerVersion >*
      mutable_steer_version();
  private:
  const ::primary::SteerVersion& _internal_steer_version(int index) const;
  ::primary::SteerVersion* _internal_add_steer_version();
  public:
  const ::primary::SteerVersion& steer_version(int index) const;
  ::primary::SteerVersion* add_steer_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerVersion >&
      steer_version() const;

  // repeated .primary.DasVersion das_version = 2;
  int das_version_size() const;
  private:
  int _internal_das_version_size() const;
  public:
  void clear_das_version();
  ::primary::DasVersion* mutable_das_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasVersion >*
      mutable_das_version();
  private:
  const ::primary::DasVersion& _internal_das_version(int index) const;
  ::primary::DasVersion* _internal_add_das_version();
  public:
  const ::primary::DasVersion& das_version(int index) const;
  ::primary::DasVersion* add_das_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasVersion >&
      das_version() const;

  // repeated .primary.HvVersion hv_version = 3;
  int hv_version_size() const;
  private:
  int _internal_hv_version_size() const;
  public:
  void clear_hv_version();
  ::primary::HvVersion* mutable_hv_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVersion >*
      mutable_hv_version();
  private:
  const ::primary::HvVersion& _internal_hv_version(int index) const;
  ::primary::HvVersion* _internal_add_hv_version();
  public:
  const ::primary::HvVersion& hv_version(int index) const;
  ::primary::HvVersion* add_hv_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVersion >&
      hv_version() const;

  // repeated .primary.LvVersion lv_version = 4;
  int lv_version_size() const;
  private:
  int _internal_lv_version_size() const;
  public:
  void clear_lv_version();
  ::primary::LvVersion* mutable_lv_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVersion >*
      mutable_lv_version();
  private:
  const ::primary::LvVersion& _internal_lv_version(int index) const;
  ::primary::LvVersion* _internal_add_lv_version();
  public:
  const ::primary::LvVersion& lv_version(int index) const;
  ::primary::LvVersion* add_lv_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVersion >&
      lv_version() const;

  // repeated .primary.TlmVersion tlm_version = 5;
  int tlm_version_size() const;
  private:
  int _internal_tlm_version_size() const;
  public:
  void clear_tlm_version();
  ::primary::TlmVersion* mutable_tlm_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmVersion >*
      mutable_tlm_version();
  private:
  const ::primary::TlmVersion& _internal_tlm_version(int index) const;
  ::primary::TlmVersion* _internal_add_tlm_version();
  public:
  const ::primary::TlmVersion& tlm_version(int index) const;
  ::primary::TlmVersion* add_tlm_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmVersion >&
      tlm_version() const;

  // repeated .primary.Timestamp timestamp = 6;
  int timestamp_size() const;
  private:
  int _internal_timestamp_size() const;
  public:
  void clear_timestamp();
  ::primary::Timestamp* mutable_timestamp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Timestamp >*
      mutable_timestamp();
  private:
  const ::primary::Timestamp& _internal_timestamp(int index) const;
  ::primary::Timestamp* _internal_add_timestamp();
  public:
  const ::primary::Timestamp& timestamp(int index) const;
  ::primary::Timestamp* add_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Timestamp >&
      timestamp() const;

  // repeated .primary.SetTlmStatus set_tlm_status = 7;
  int set_tlm_status_size() const;
  private:
  int _internal_set_tlm_status_size() const;
  public:
  void clear_set_tlm_status();
  ::primary::SetTlmStatus* mutable_set_tlm_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTlmStatus >*
      mutable_set_tlm_status();
  private:
  const ::primary::SetTlmStatus& _internal_set_tlm_status(int index) const;
  ::primary::SetTlmStatus* _internal_add_set_tlm_status();
  public:
  const ::primary::SetTlmStatus& set_tlm_status(int index) const;
  ::primary::SetTlmStatus* add_set_tlm_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTlmStatus >&
      set_tlm_status() const;

  // repeated .primary.SteerSystemStatus steer_system_status = 8;
  int steer_system_status_size() const;
  private:
  int _internal_steer_system_status_size() const;
  public:
  void clear_steer_system_status();
  ::primary::SteerSystemStatus* mutable_steer_system_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerSystemStatus >*
      mutable_steer_system_status();
  private:
  const ::primary::SteerSystemStatus& _internal_steer_system_status(int index) const;
  ::primary::SteerSystemStatus* _internal_add_steer_system_status();
  public:
  const ::primary::SteerSystemStatus& steer_system_status(int index) const;
  ::primary::SteerSystemStatus* add_steer_system_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerSystemStatus >&
      steer_system_status() const;

  // repeated .primary.Marker marker = 9;
  int marker_size() const;
  private:
  int _internal_marker_size() const;
  public:
  void clear_marker();
  ::primary::Marker* mutable_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Marker >*
      mutable_marker();
  private:
  const ::primary::Marker& _internal_marker(int index) const;
  ::primary::Marker* _internal_add_marker();
  public:
  const ::primary::Marker& marker(int index) const;
  ::primary::Marker* add_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Marker >&
      marker() const;

  // repeated .primary.TlmStatus tlm_status = 10;
  int tlm_status_size() const;
  private:
  int _internal_tlm_status_size() const;
  public:
  void clear_tlm_status();
  ::primary::TlmStatus* mutable_tlm_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmStatus >*
      mutable_tlm_status();
  private:
  const ::primary::TlmStatus& _internal_tlm_status(int index) const;
  ::primary::TlmStatus* _internal_add_tlm_status();
  public:
  const ::primary::TlmStatus& tlm_status(int index) const;
  ::primary::TlmStatus* add_tlm_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmStatus >&
      tlm_status() const;

  // repeated .primary.CarStatus car_status = 11;
  int car_status_size() const;
  private:
  int _internal_car_status_size() const;
  public:
  void clear_car_status();
  ::primary::CarStatus* mutable_car_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CarStatus >*
      mutable_car_status();
  private:
  const ::primary::CarStatus& _internal_car_status(int index) const;
  ::primary::CarStatus* _internal_add_car_status();
  public:
  const ::primary::CarStatus& car_status(int index) const;
  ::primary::CarStatus* add_car_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CarStatus >&
      car_status() const;

  // repeated .primary.DasErrors das_errors = 12;
  int das_errors_size() const;
  private:
  int _internal_das_errors_size() const;
  public:
  void clear_das_errors();
  ::primary::DasErrors* mutable_das_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasErrors >*
      mutable_das_errors();
  private:
  const ::primary::DasErrors& _internal_das_errors(int index) const;
  ::primary::DasErrors* _internal_add_das_errors();
  public:
  const ::primary::DasErrors& das_errors(int index) const;
  ::primary::DasErrors* add_das_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasErrors >&
      das_errors() const;

  // repeated .primary.Speed speed = 13;
  int speed_size() const;
  private:
  int _internal_speed_size() const;
  public:
  void clear_speed();
  ::primary::Speed* mutable_speed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Speed >*
      mutable_speed();
  private:
  const ::primary::Speed& _internal_speed(int index) const;
  ::primary::Speed* _internal_add_speed();
  public:
  const ::primary::Speed& speed(int index) const;
  ::primary::Speed* add_speed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Speed >&
      speed() const;

  // repeated .primary.HvVoltage hv_voltage = 14;
  int hv_voltage_size() const;
  private:
  int _internal_hv_voltage_size() const;
  public:
  void clear_hv_voltage();
  ::primary::HvVoltage* mutable_hv_voltage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVoltage >*
      mutable_hv_voltage();
  private:
  const ::primary::HvVoltage& _internal_hv_voltage(int index) const;
  ::primary::HvVoltage* _internal_add_hv_voltage();
  public:
  const ::primary::HvVoltage& hv_voltage(int index) const;
  ::primary::HvVoltage* add_hv_voltage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVoltage >&
      hv_voltage() const;

  // repeated .primary.HvCurrent hv_current = 15;
  int hv_current_size() const;
  private:
  int _internal_hv_current_size() const;
  public:
  void clear_hv_current();
  ::primary::HvCurrent* mutable_hv_current(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCurrent >*
      mutable_hv_current();
  private:
  const ::primary::HvCurrent& _internal_hv_current(int index) const;
  ::primary::HvCurrent* _internal_add_hv_current();
  public:
  const ::primary::HvCurrent& hv_current(int index) const;
  ::primary::HvCurrent* add_hv_current();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCurrent >&
      hv_current() const;

  // repeated .primary.HvTemp hv_temp = 16;
  int hv_temp_size() const;
  private:
  int _internal_hv_temp_size() const;
  public:
  void clear_hv_temp();
  ::primary::HvTemp* mutable_hv_temp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvTemp >*
      mutable_hv_temp();
  private:
  const ::primary::HvTemp& _internal_hv_temp(int index) const;
  ::primary::HvTemp* _internal_add_hv_temp();
  public:
  const ::primary::HvTemp& hv_temp(int index) const;
  ::primary::HvTemp* add_hv_temp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvTemp >&
      hv_temp() const;

  // repeated .primary.HvErrors hv_errors = 17;
  int hv_errors_size() const;
  private:
  int _internal_hv_errors_size() const;
  public:
  void clear_hv_errors();
  ::primary::HvErrors* mutable_hv_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvErrors >*
      mutable_hv_errors();
  private:
  const ::primary::HvErrors& _internal_hv_errors(int index) const;
  ::primary::HvErrors* _internal_add_hv_errors();
  public:
  const ::primary::HvErrors& hv_errors(int index) const;
  ::primary::HvErrors* add_hv_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvErrors >&
      hv_errors() const;

  // repeated .primary.TsStatus ts_status = 18;
  int ts_status_size() const;
  private:
  int _internal_ts_status_size() const;
  public:
  void clear_ts_status();
  ::primary::TsStatus* mutable_ts_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TsStatus >*
      mutable_ts_status();
  private:
  const ::primary::TsStatus& _internal_ts_status(int index) const;
  ::primary::TsStatus* _internal_add_ts_status();
  public:
  const ::primary::TsStatus& ts_status(int index) const;
  ::primary::TsStatus* add_ts_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TsStatus >&
      ts_status() const;

  // repeated .primary.SetTsStatus set_ts_status = 19;
  int set_ts_status_size() const;
  private:
  int _internal_set_ts_status_size() const;
  public:
  void clear_set_ts_status();
  ::primary::SetTsStatus* mutable_set_ts_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTsStatus >*
      mutable_set_ts_status();
  private:
  const ::primary::SetTsStatus& _internal_set_ts_status(int index) const;
  ::primary::SetTsStatus* _internal_add_set_ts_status();
  public:
  const ::primary::SetTsStatus& set_ts_status(int index) const;
  ::primary::SetTsStatus* add_set_ts_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTsStatus >&
      set_ts_status() const;

  // repeated .primary.SetCellBalancingStatus set_cell_balancing_status = 20;
  int set_cell_balancing_status_size() const;
  private:
  int _internal_set_cell_balancing_status_size() const;
  public:
  void clear_set_cell_balancing_status();
  ::primary::SetCellBalancingStatus* mutable_set_cell_balancing_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCellBalancingStatus >*
      mutable_set_cell_balancing_status();
  private:
  const ::primary::SetCellBalancingStatus& _internal_set_cell_balancing_status(int index) const;
  ::primary::SetCellBalancingStatus* _internal_add_set_cell_balancing_status();
  public:
  const ::primary::SetCellBalancingStatus& set_cell_balancing_status(int index) const;
  ::primary::SetCellBalancingStatus* add_set_cell_balancing_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCellBalancingStatus >&
      set_cell_balancing_status() const;

  // repeated .primary.HandcartStatus handcart_status = 21;
  int handcart_status_size() const;
  private:
  int _internal_handcart_status_size() const;
  public:
  void clear_handcart_status();
  ::primary::HandcartStatus* mutable_handcart_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HandcartStatus >*
      mutable_handcart_status();
  private:
  const ::primary::HandcartStatus& _internal_handcart_status(int index) const;
  ::primary::HandcartStatus* _internal_add_handcart_status();
  public:
  const ::primary::HandcartStatus& handcart_status(int index) const;
  ::primary::HandcartStatus* add_handcart_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HandcartStatus >&
      handcart_status() const;

  // repeated .primary.SteerStatus steer_status = 22;
  int steer_status_size() const;
  private:
  int _internal_steer_status_size() const;
  public:
  void clear_steer_status();
  ::primary::SteerStatus* mutable_steer_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerStatus >*
      mutable_steer_status();
  private:
  const ::primary::SteerStatus& _internal_steer_status(int index) const;
  ::primary::SteerStatus* _internal_add_steer_status();
  public:
  const ::primary::SteerStatus& steer_status(int index) const;
  ::primary::SteerStatus* add_steer_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerStatus >&
      steer_status() const;

  // repeated .primary.SetCarStatus set_car_status = 23;
  int set_car_status_size() const;
  private:
  int _internal_set_car_status_size() const;
  public:
  void clear_set_car_status();
  ::primary::SetCarStatus* mutable_set_car_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCarStatus >*
      mutable_set_car_status();
  private:
  const ::primary::SetCarStatus& _internal_set_car_status(int index) const;
  ::primary::SetCarStatus* _internal_add_set_car_status();
  public:
  const ::primary::SetCarStatus& set_car_status(int index) const;
  ::primary::SetCarStatus* add_set_car_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCarStatus >&
      set_car_status() const;

  // repeated .primary.SetPedalsRange set_pedals_range = 24;
  int set_pedals_range_size() const;
  private:
  int _internal_set_pedals_range_size() const;
  public:
  void clear_set_pedals_range();
  ::primary::SetPedalsRange* mutable_set_pedals_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetPedalsRange >*
      mutable_set_pedals_range();
  private:
  const ::primary::SetPedalsRange& _internal_set_pedals_range(int index) const;
  ::primary::SetPedalsRange* _internal_add_set_pedals_range();
  public:
  const ::primary::SetPedalsRange& set_pedals_range(int index) const;
  ::primary::SetPedalsRange* add_set_pedals_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetPedalsRange >&
      set_pedals_range() const;

  // repeated .primary.LvCurrent lv_current = 25;
  int lv_current_size() const;
  private:
  int _internal_lv_current_size() const;
  public:
  void clear_lv_current();
  ::primary::LvCurrent* mutable_lv_current(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvCurrent >*
      mutable_lv_current();
  private:
  const ::primary::LvCurrent& _internal_lv_current(int index) const;
  ::primary::LvCurrent* _internal_add_lv_current();
  public:
  const ::primary::LvCurrent& lv_current(int index) const;
  ::primary::LvCurrent* add_lv_current();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvCurrent >&
      lv_current() const;

  // repeated .primary.LvVoltage lv_voltage = 26;
  int lv_voltage_size() const;
  private:
  int _internal_lv_voltage_size() const;
  public:
  void clear_lv_voltage();
  ::primary::LvVoltage* mutable_lv_voltage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVoltage >*
      mutable_lv_voltage();
  private:
  const ::primary::LvVoltage& _internal_lv_voltage(int index) const;
  ::primary::LvVoltage* _internal_add_lv_voltage();
  public:
  const ::primary::LvVoltage& lv_voltage(int index) const;
  ::primary::LvVoltage* add_lv_voltage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVoltage >&
      lv_voltage() const;

  // repeated .primary.LvTemperature lv_temperature = 27;
  int lv_temperature_size() const;
  private:
  int _internal_lv_temperature_size() const;
  public:
  void clear_lv_temperature();
  ::primary::LvTemperature* mutable_lv_temperature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvTemperature >*
      mutable_lv_temperature();
  private:
  const ::primary::LvTemperature& _internal_lv_temperature(int index) const;
  ::primary::LvTemperature* _internal_add_lv_temperature();
  public:
  const ::primary::LvTemperature& lv_temperature(int index) const;
  ::primary::LvTemperature* add_lv_temperature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvTemperature >&
      lv_temperature() const;

  // repeated .primary.CoolingStatus cooling_status = 28;
  int cooling_status_size() const;
  private:
  int _internal_cooling_status_size() const;
  public:
  void clear_cooling_status();
  ::primary::CoolingStatus* mutable_cooling_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CoolingStatus >*
      mutable_cooling_status();
  private:
  const ::primary::CoolingStatus& _internal_cooling_status(int index) const;
  ::primary::CoolingStatus* _internal_add_cooling_status();
  public:
  const ::primary::CoolingStatus& cooling_status(int index) const;
  ::primary::CoolingStatus* add_cooling_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CoolingStatus >&
      cooling_status() const;

  // repeated .primary.HvCellsVoltage hv_cells_voltage = 29;
  int hv_cells_voltage_size() const;
  private:
  int _internal_hv_cells_voltage_size() const;
  public:
  void clear_hv_cells_voltage();
  ::primary::HvCellsVoltage* mutable_hv_cells_voltage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsVoltage >*
      mutable_hv_cells_voltage();
  private:
  const ::primary::HvCellsVoltage& _internal_hv_cells_voltage(int index) const;
  ::primary::HvCellsVoltage* _internal_add_hv_cells_voltage();
  public:
  const ::primary::HvCellsVoltage& hv_cells_voltage(int index) const;
  ::primary::HvCellsVoltage* add_hv_cells_voltage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsVoltage >&
      hv_cells_voltage() const;

  // repeated .primary.HvCellsTemp hv_cells_temp = 30;
  int hv_cells_temp_size() const;
  private:
  int _internal_hv_cells_temp_size() const;
  public:
  void clear_hv_cells_temp();
  ::primary::HvCellsTemp* mutable_hv_cells_temp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsTemp >*
      mutable_hv_cells_temp();
  private:
  const ::primary::HvCellsTemp& _internal_hv_cells_temp(int index) const;
  ::primary::HvCellsTemp* _internal_add_hv_cells_temp();
  public:
  const ::primary::HvCellsTemp& hv_cells_temp(int index) const;
  ::primary::HvCellsTemp* add_hv_cells_temp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsTemp >&
      hv_cells_temp() const;

  // repeated .primary.HvCellBalancingStatus hv_cell_balancing_status = 31;
  int hv_cell_balancing_status_size() const;
  private:
  int _internal_hv_cell_balancing_status_size() const;
  public:
  void clear_hv_cell_balancing_status();
  ::primary::HvCellBalancingStatus* mutable_hv_cell_balancing_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellBalancingStatus >*
      mutable_hv_cell_balancing_status();
  private:
  const ::primary::HvCellBalancingStatus& _internal_hv_cell_balancing_status(int index) const;
  ::primary::HvCellBalancingStatus* _internal_add_hv_cell_balancing_status();
  public:
  const ::primary::HvCellBalancingStatus& hv_cell_balancing_status(int index) const;
  ::primary::HvCellBalancingStatus* add_hv_cell_balancing_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellBalancingStatus >&
      hv_cell_balancing_status() const;

  // repeated .primary.InvLSetTorque inv_l_set_torque = 32;
  int inv_l_set_torque_size() const;
  private:
  int _internal_inv_l_set_torque_size() const;
  public:
  void clear_inv_l_set_torque();
  ::primary::InvLSetTorque* mutable_inv_l_set_torque(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLSetTorque >*
      mutable_inv_l_set_torque();
  private:
  const ::primary::InvLSetTorque& _internal_inv_l_set_torque(int index) const;
  ::primary::InvLSetTorque* _internal_add_inv_l_set_torque();
  public:
  const ::primary::InvLSetTorque& inv_l_set_torque(int index) const;
  ::primary::InvLSetTorque* add_inv_l_set_torque();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLSetTorque >&
      inv_l_set_torque() const;

  // repeated .primary.InvLResponse inv_l_response = 33;
  int inv_l_response_size() const;
  private:
  int _internal_inv_l_response_size() const;
  public:
  void clear_inv_l_response();
  ::primary::InvLResponse* mutable_inv_l_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLResponse >*
      mutable_inv_l_response();
  private:
  const ::primary::InvLResponse& _internal_inv_l_response(int index) const;
  ::primary::InvLResponse* _internal_add_inv_l_response();
  public:
  const ::primary::InvLResponse& inv_l_response(int index) const;
  ::primary::InvLResponse* add_inv_l_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLResponse >&
      inv_l_response() const;

  // @@protoc_insertion_point(class_scope:primary.PrimaryFenice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerVersion > steer_version_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasVersion > das_version_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVersion > hv_version_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVersion > lv_version_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmVersion > tlm_version_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Timestamp > timestamp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTlmStatus > set_tlm_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerSystemStatus > steer_system_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Marker > marker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmStatus > tlm_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CarStatus > car_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasErrors > das_errors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Speed > speed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVoltage > hv_voltage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCurrent > hv_current_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvTemp > hv_temp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvErrors > hv_errors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TsStatus > ts_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTsStatus > set_ts_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCellBalancingStatus > set_cell_balancing_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HandcartStatus > handcart_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerStatus > steer_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCarStatus > set_car_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetPedalsRange > set_pedals_range_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvCurrent > lv_current_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVoltage > lv_voltage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvTemperature > lv_temperature_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CoolingStatus > cooling_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsVoltage > hv_cells_voltage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsTemp > hv_cells_temp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellBalancingStatus > hv_cell_balancing_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLSetTorque > inv_l_set_torque_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLResponse > inv_l_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_primary_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SteerVersion

// uint32 component_version = 1;
inline void SteerVersion::clear_component_version() {
  component_version_ = 0u;
}
inline uint32_t SteerVersion::_internal_component_version() const {
  return component_version_;
}
inline uint32_t SteerVersion::component_version() const {
  // @@protoc_insertion_point(field_get:primary.SteerVersion.component_version)
  return _internal_component_version();
}
inline void SteerVersion::_internal_set_component_version(uint32_t value) {
  
  component_version_ = value;
}
inline void SteerVersion::set_component_version(uint32_t value) {
  _internal_set_component_version(value);
  // @@protoc_insertion_point(field_set:primary.SteerVersion.component_version)
}

// uint32 cancicd_version = 2;
inline void SteerVersion::clear_cancicd_version() {
  cancicd_version_ = 0u;
}
inline uint32_t SteerVersion::_internal_cancicd_version() const {
  return cancicd_version_;
}
inline uint32_t SteerVersion::cancicd_version() const {
  // @@protoc_insertion_point(field_get:primary.SteerVersion.cancicd_version)
  return _internal_cancicd_version();
}
inline void SteerVersion::_internal_set_cancicd_version(uint32_t value) {
  
  cancicd_version_ = value;
}
inline void SteerVersion::set_cancicd_version(uint32_t value) {
  _internal_set_cancicd_version(value);
  // @@protoc_insertion_point(field_set:primary.SteerVersion.cancicd_version)
}

// -------------------------------------------------------------------

// DasVersion

// uint32 component_version = 1;
inline void DasVersion::clear_component_version() {
  component_version_ = 0u;
}
inline uint32_t DasVersion::_internal_component_version() const {
  return component_version_;
}
inline uint32_t DasVersion::component_version() const {
  // @@protoc_insertion_point(field_get:primary.DasVersion.component_version)
  return _internal_component_version();
}
inline void DasVersion::_internal_set_component_version(uint32_t value) {
  
  component_version_ = value;
}
inline void DasVersion::set_component_version(uint32_t value) {
  _internal_set_component_version(value);
  // @@protoc_insertion_point(field_set:primary.DasVersion.component_version)
}

// uint32 cancicd_version = 2;
inline void DasVersion::clear_cancicd_version() {
  cancicd_version_ = 0u;
}
inline uint32_t DasVersion::_internal_cancicd_version() const {
  return cancicd_version_;
}
inline uint32_t DasVersion::cancicd_version() const {
  // @@protoc_insertion_point(field_get:primary.DasVersion.cancicd_version)
  return _internal_cancicd_version();
}
inline void DasVersion::_internal_set_cancicd_version(uint32_t value) {
  
  cancicd_version_ = value;
}
inline void DasVersion::set_cancicd_version(uint32_t value) {
  _internal_set_cancicd_version(value);
  // @@protoc_insertion_point(field_set:primary.DasVersion.cancicd_version)
}

// -------------------------------------------------------------------

// HvVersion

// uint32 component_version = 1;
inline void HvVersion::clear_component_version() {
  component_version_ = 0u;
}
inline uint32_t HvVersion::_internal_component_version() const {
  return component_version_;
}
inline uint32_t HvVersion::component_version() const {
  // @@protoc_insertion_point(field_get:primary.HvVersion.component_version)
  return _internal_component_version();
}
inline void HvVersion::_internal_set_component_version(uint32_t value) {
  
  component_version_ = value;
}
inline void HvVersion::set_component_version(uint32_t value) {
  _internal_set_component_version(value);
  // @@protoc_insertion_point(field_set:primary.HvVersion.component_version)
}

// uint32 cancicd_version = 2;
inline void HvVersion::clear_cancicd_version() {
  cancicd_version_ = 0u;
}
inline uint32_t HvVersion::_internal_cancicd_version() const {
  return cancicd_version_;
}
inline uint32_t HvVersion::cancicd_version() const {
  // @@protoc_insertion_point(field_get:primary.HvVersion.cancicd_version)
  return _internal_cancicd_version();
}
inline void HvVersion::_internal_set_cancicd_version(uint32_t value) {
  
  cancicd_version_ = value;
}
inline void HvVersion::set_cancicd_version(uint32_t value) {
  _internal_set_cancicd_version(value);
  // @@protoc_insertion_point(field_set:primary.HvVersion.cancicd_version)
}

// -------------------------------------------------------------------

// LvVersion

// uint32 component_version = 1;
inline void LvVersion::clear_component_version() {
  component_version_ = 0u;
}
inline uint32_t LvVersion::_internal_component_version() const {
  return component_version_;
}
inline uint32_t LvVersion::component_version() const {
  // @@protoc_insertion_point(field_get:primary.LvVersion.component_version)
  return _internal_component_version();
}
inline void LvVersion::_internal_set_component_version(uint32_t value) {
  
  component_version_ = value;
}
inline void LvVersion::set_component_version(uint32_t value) {
  _internal_set_component_version(value);
  // @@protoc_insertion_point(field_set:primary.LvVersion.component_version)
}

// uint32 cancicd_version = 2;
inline void LvVersion::clear_cancicd_version() {
  cancicd_version_ = 0u;
}
inline uint32_t LvVersion::_internal_cancicd_version() const {
  return cancicd_version_;
}
inline uint32_t LvVersion::cancicd_version() const {
  // @@protoc_insertion_point(field_get:primary.LvVersion.cancicd_version)
  return _internal_cancicd_version();
}
inline void LvVersion::_internal_set_cancicd_version(uint32_t value) {
  
  cancicd_version_ = value;
}
inline void LvVersion::set_cancicd_version(uint32_t value) {
  _internal_set_cancicd_version(value);
  // @@protoc_insertion_point(field_set:primary.LvVersion.cancicd_version)
}

// -------------------------------------------------------------------

// TlmVersion

// uint32 component_version = 1;
inline void TlmVersion::clear_component_version() {
  component_version_ = 0u;
}
inline uint32_t TlmVersion::_internal_component_version() const {
  return component_version_;
}
inline uint32_t TlmVersion::component_version() const {
  // @@protoc_insertion_point(field_get:primary.TlmVersion.component_version)
  return _internal_component_version();
}
inline void TlmVersion::_internal_set_component_version(uint32_t value) {
  
  component_version_ = value;
}
inline void TlmVersion::set_component_version(uint32_t value) {
  _internal_set_component_version(value);
  // @@protoc_insertion_point(field_set:primary.TlmVersion.component_version)
}

// uint32 cancicd_version = 2;
inline void TlmVersion::clear_cancicd_version() {
  cancicd_version_ = 0u;
}
inline uint32_t TlmVersion::_internal_cancicd_version() const {
  return cancicd_version_;
}
inline uint32_t TlmVersion::cancicd_version() const {
  // @@protoc_insertion_point(field_get:primary.TlmVersion.cancicd_version)
  return _internal_cancicd_version();
}
inline void TlmVersion::_internal_set_cancicd_version(uint32_t value) {
  
  cancicd_version_ = value;
}
inline void TlmVersion::set_cancicd_version(uint32_t value) {
  _internal_set_cancicd_version(value);
  // @@protoc_insertion_point(field_set:primary.TlmVersion.cancicd_version)
}

// -------------------------------------------------------------------

// Timestamp

// uint32 timestamp = 1;
inline void Timestamp::clear_timestamp() {
  timestamp_ = 0u;
}
inline uint32_t Timestamp::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t Timestamp::timestamp() const {
  // @@protoc_insertion_point(field_get:primary.Timestamp.timestamp)
  return _internal_timestamp();
}
inline void Timestamp::_internal_set_timestamp(uint32_t value) {
  
  timestamp_ = value;
}
inline void Timestamp::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:primary.Timestamp.timestamp)
}

// -------------------------------------------------------------------

// SetTlmStatus

// .primary.TlmStatusType tlm_status = 1;
inline void SetTlmStatus::clear_tlm_status() {
  tlm_status_ = 0;
}
inline ::primary::TlmStatusType SetTlmStatus::_internal_tlm_status() const {
  return static_cast< ::primary::TlmStatusType >(tlm_status_);
}
inline ::primary::TlmStatusType SetTlmStatus::tlm_status() const {
  // @@protoc_insertion_point(field_get:primary.SetTlmStatus.tlm_status)
  return _internal_tlm_status();
}
inline void SetTlmStatus::_internal_set_tlm_status(::primary::TlmStatusType value) {
  
  tlm_status_ = value;
}
inline void SetTlmStatus::set_tlm_status(::primary::TlmStatusType value) {
  _internal_set_tlm_status(value);
  // @@protoc_insertion_point(field_set:primary.SetTlmStatus.tlm_status)
}

// .primary.RaceTypeType race_type = 2;
inline void SetTlmStatus::clear_race_type() {
  race_type_ = 0;
}
inline ::primary::RaceTypeType SetTlmStatus::_internal_race_type() const {
  return static_cast< ::primary::RaceTypeType >(race_type_);
}
inline ::primary::RaceTypeType SetTlmStatus::race_type() const {
  // @@protoc_insertion_point(field_get:primary.SetTlmStatus.race_type)
  return _internal_race_type();
}
inline void SetTlmStatus::_internal_set_race_type(::primary::RaceTypeType value) {
  
  race_type_ = value;
}
inline void SetTlmStatus::set_race_type(::primary::RaceTypeType value) {
  _internal_set_race_type(value);
  // @@protoc_insertion_point(field_set:primary.SetTlmStatus.race_type)
}

// uint32 driver = 3;
inline void SetTlmStatus::clear_driver() {
  driver_ = 0u;
}
inline uint32_t SetTlmStatus::_internal_driver() const {
  return driver_;
}
inline uint32_t SetTlmStatus::driver() const {
  // @@protoc_insertion_point(field_get:primary.SetTlmStatus.driver)
  return _internal_driver();
}
inline void SetTlmStatus::_internal_set_driver(uint32_t value) {
  
  driver_ = value;
}
inline void SetTlmStatus::set_driver(uint32_t value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:primary.SetTlmStatus.driver)
}

// uint32 circuit = 4;
inline void SetTlmStatus::clear_circuit() {
  circuit_ = 0u;
}
inline uint32_t SetTlmStatus::_internal_circuit() const {
  return circuit_;
}
inline uint32_t SetTlmStatus::circuit() const {
  // @@protoc_insertion_point(field_get:primary.SetTlmStatus.circuit)
  return _internal_circuit();
}
inline void SetTlmStatus::_internal_set_circuit(uint32_t value) {
  
  circuit_ = value;
}
inline void SetTlmStatus::set_circuit(uint32_t value) {
  _internal_set_circuit(value);
  // @@protoc_insertion_point(field_set:primary.SetTlmStatus.circuit)
}

// -------------------------------------------------------------------

// SteerSystemStatus

// uint32 soc_temp = 1;
inline void SteerSystemStatus::clear_soc_temp() {
  soc_temp_ = 0u;
}
inline uint32_t SteerSystemStatus::_internal_soc_temp() const {
  return soc_temp_;
}
inline uint32_t SteerSystemStatus::soc_temp() const {
  // @@protoc_insertion_point(field_get:primary.SteerSystemStatus.soc_temp)
  return _internal_soc_temp();
}
inline void SteerSystemStatus::_internal_set_soc_temp(uint32_t value) {
  
  soc_temp_ = value;
}
inline void SteerSystemStatus::set_soc_temp(uint32_t value) {
  _internal_set_soc_temp(value);
  // @@protoc_insertion_point(field_set:primary.SteerSystemStatus.soc_temp)
}

// -------------------------------------------------------------------

// Marker

// -------------------------------------------------------------------

// TlmStatus

// .primary.TlmStatusType tlm_status = 1;
inline void TlmStatus::clear_tlm_status() {
  tlm_status_ = 0;
}
inline ::primary::TlmStatusType TlmStatus::_internal_tlm_status() const {
  return static_cast< ::primary::TlmStatusType >(tlm_status_);
}
inline ::primary::TlmStatusType TlmStatus::tlm_status() const {
  // @@protoc_insertion_point(field_get:primary.TlmStatus.tlm_status)
  return _internal_tlm_status();
}
inline void TlmStatus::_internal_set_tlm_status(::primary::TlmStatusType value) {
  
  tlm_status_ = value;
}
inline void TlmStatus::set_tlm_status(::primary::TlmStatusType value) {
  _internal_set_tlm_status(value);
  // @@protoc_insertion_point(field_set:primary.TlmStatus.tlm_status)
}

// .primary.RaceTypeType race_type = 2;
inline void TlmStatus::clear_race_type() {
  race_type_ = 0;
}
inline ::primary::RaceTypeType TlmStatus::_internal_race_type() const {
  return static_cast< ::primary::RaceTypeType >(race_type_);
}
inline ::primary::RaceTypeType TlmStatus::race_type() const {
  // @@protoc_insertion_point(field_get:primary.TlmStatus.race_type)
  return _internal_race_type();
}
inline void TlmStatus::_internal_set_race_type(::primary::RaceTypeType value) {
  
  race_type_ = value;
}
inline void TlmStatus::set_race_type(::primary::RaceTypeType value) {
  _internal_set_race_type(value);
  // @@protoc_insertion_point(field_set:primary.TlmStatus.race_type)
}

// uint32 driver = 3;
inline void TlmStatus::clear_driver() {
  driver_ = 0u;
}
inline uint32_t TlmStatus::_internal_driver() const {
  return driver_;
}
inline uint32_t TlmStatus::driver() const {
  // @@protoc_insertion_point(field_get:primary.TlmStatus.driver)
  return _internal_driver();
}
inline void TlmStatus::_internal_set_driver(uint32_t value) {
  
  driver_ = value;
}
inline void TlmStatus::set_driver(uint32_t value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:primary.TlmStatus.driver)
}

// uint32 circuit = 4;
inline void TlmStatus::clear_circuit() {
  circuit_ = 0u;
}
inline uint32_t TlmStatus::_internal_circuit() const {
  return circuit_;
}
inline uint32_t TlmStatus::circuit() const {
  // @@protoc_insertion_point(field_get:primary.TlmStatus.circuit)
  return _internal_circuit();
}
inline void TlmStatus::_internal_set_circuit(uint32_t value) {
  
  circuit_ = value;
}
inline void TlmStatus::set_circuit(uint32_t value) {
  _internal_set_circuit(value);
  // @@protoc_insertion_point(field_set:primary.TlmStatus.circuit)
}

// -------------------------------------------------------------------

// CarStatus

// .primary.InverterStatusType inverter_l = 1;
inline void CarStatus::clear_inverter_l() {
  inverter_l_ = 0;
}
inline ::primary::InverterStatusType CarStatus::_internal_inverter_l() const {
  return static_cast< ::primary::InverterStatusType >(inverter_l_);
}
inline ::primary::InverterStatusType CarStatus::inverter_l() const {
  // @@protoc_insertion_point(field_get:primary.CarStatus.inverter_l)
  return _internal_inverter_l();
}
inline void CarStatus::_internal_set_inverter_l(::primary::InverterStatusType value) {
  
  inverter_l_ = value;
}
inline void CarStatus::set_inverter_l(::primary::InverterStatusType value) {
  _internal_set_inverter_l(value);
  // @@protoc_insertion_point(field_set:primary.CarStatus.inverter_l)
}

// .primary.InverterStatusType inverter_r = 2;
inline void CarStatus::clear_inverter_r() {
  inverter_r_ = 0;
}
inline ::primary::InverterStatusType CarStatus::_internal_inverter_r() const {
  return static_cast< ::primary::InverterStatusType >(inverter_r_);
}
inline ::primary::InverterStatusType CarStatus::inverter_r() const {
  // @@protoc_insertion_point(field_get:primary.CarStatus.inverter_r)
  return _internal_inverter_r();
}
inline void CarStatus::_internal_set_inverter_r(::primary::InverterStatusType value) {
  
  inverter_r_ = value;
}
inline void CarStatus::set_inverter_r(::primary::InverterStatusType value) {
  _internal_set_inverter_r(value);
  // @@protoc_insertion_point(field_set:primary.CarStatus.inverter_r)
}

// .primary.CarStatusType car_status = 3;
inline void CarStatus::clear_car_status() {
  car_status_ = 0;
}
inline ::primary::CarStatusType CarStatus::_internal_car_status() const {
  return static_cast< ::primary::CarStatusType >(car_status_);
}
inline ::primary::CarStatusType CarStatus::car_status() const {
  // @@protoc_insertion_point(field_get:primary.CarStatus.car_status)
  return _internal_car_status();
}
inline void CarStatus::_internal_set_car_status(::primary::CarStatusType value) {
  
  car_status_ = value;
}
inline void CarStatus::set_car_status(::primary::CarStatusType value) {
  _internal_set_car_status(value);
  // @@protoc_insertion_point(field_set:primary.CarStatus.car_status)
}

// -------------------------------------------------------------------

// DasErrors

// uint32 das_error = 1;
inline void DasErrors::clear_das_error() {
  das_error_ = 0u;
}
inline uint32_t DasErrors::_internal_das_error() const {
  return das_error_;
}
inline uint32_t DasErrors::das_error() const {
  // @@protoc_insertion_point(field_get:primary.DasErrors.das_error)
  return _internal_das_error();
}
inline void DasErrors::_internal_set_das_error(uint32_t value) {
  
  das_error_ = value;
}
inline void DasErrors::set_das_error(uint32_t value) {
  _internal_set_das_error(value);
  // @@protoc_insertion_point(field_set:primary.DasErrors.das_error)
}

// -------------------------------------------------------------------

// Speed

// uint32 encoder_r = 1;
inline void Speed::clear_encoder_r() {
  encoder_r_ = 0u;
}
inline uint32_t Speed::_internal_encoder_r() const {
  return encoder_r_;
}
inline uint32_t Speed::encoder_r() const {
  // @@protoc_insertion_point(field_get:primary.Speed.encoder_r)
  return _internal_encoder_r();
}
inline void Speed::_internal_set_encoder_r(uint32_t value) {
  
  encoder_r_ = value;
}
inline void Speed::set_encoder_r(uint32_t value) {
  _internal_set_encoder_r(value);
  // @@protoc_insertion_point(field_set:primary.Speed.encoder_r)
}

// uint32 encoder_l = 2;
inline void Speed::clear_encoder_l() {
  encoder_l_ = 0u;
}
inline uint32_t Speed::_internal_encoder_l() const {
  return encoder_l_;
}
inline uint32_t Speed::encoder_l() const {
  // @@protoc_insertion_point(field_get:primary.Speed.encoder_l)
  return _internal_encoder_l();
}
inline void Speed::_internal_set_encoder_l(uint32_t value) {
  
  encoder_l_ = value;
}
inline void Speed::set_encoder_l(uint32_t value) {
  _internal_set_encoder_l(value);
  // @@protoc_insertion_point(field_set:primary.Speed.encoder_l)
}

// uint32 inverter_r = 3;
inline void Speed::clear_inverter_r() {
  inverter_r_ = 0u;
}
inline uint32_t Speed::_internal_inverter_r() const {
  return inverter_r_;
}
inline uint32_t Speed::inverter_r() const {
  // @@protoc_insertion_point(field_get:primary.Speed.inverter_r)
  return _internal_inverter_r();
}
inline void Speed::_internal_set_inverter_r(uint32_t value) {
  
  inverter_r_ = value;
}
inline void Speed::set_inverter_r(uint32_t value) {
  _internal_set_inverter_r(value);
  // @@protoc_insertion_point(field_set:primary.Speed.inverter_r)
}

// uint32 inverter_l = 4;
inline void Speed::clear_inverter_l() {
  inverter_l_ = 0u;
}
inline uint32_t Speed::_internal_inverter_l() const {
  return inverter_l_;
}
inline uint32_t Speed::inverter_l() const {
  // @@protoc_insertion_point(field_get:primary.Speed.inverter_l)
  return _internal_inverter_l();
}
inline void Speed::_internal_set_inverter_l(uint32_t value) {
  
  inverter_l_ = value;
}
inline void Speed::set_inverter_l(uint32_t value) {
  _internal_set_inverter_l(value);
  // @@protoc_insertion_point(field_set:primary.Speed.inverter_l)
}

// -------------------------------------------------------------------

// HvVoltage

// uint32 pack_voltage = 1;
inline void HvVoltage::clear_pack_voltage() {
  pack_voltage_ = 0u;
}
inline uint32_t HvVoltage::_internal_pack_voltage() const {
  return pack_voltage_;
}
inline uint32_t HvVoltage::pack_voltage() const {
  // @@protoc_insertion_point(field_get:primary.HvVoltage.pack_voltage)
  return _internal_pack_voltage();
}
inline void HvVoltage::_internal_set_pack_voltage(uint32_t value) {
  
  pack_voltage_ = value;
}
inline void HvVoltage::set_pack_voltage(uint32_t value) {
  _internal_set_pack_voltage(value);
  // @@protoc_insertion_point(field_set:primary.HvVoltage.pack_voltage)
}

// uint32 bus_voltage = 2;
inline void HvVoltage::clear_bus_voltage() {
  bus_voltage_ = 0u;
}
inline uint32_t HvVoltage::_internal_bus_voltage() const {
  return bus_voltage_;
}
inline uint32_t HvVoltage::bus_voltage() const {
  // @@protoc_insertion_point(field_get:primary.HvVoltage.bus_voltage)
  return _internal_bus_voltage();
}
inline void HvVoltage::_internal_set_bus_voltage(uint32_t value) {
  
  bus_voltage_ = value;
}
inline void HvVoltage::set_bus_voltage(uint32_t value) {
  _internal_set_bus_voltage(value);
  // @@protoc_insertion_point(field_set:primary.HvVoltage.bus_voltage)
}

// uint32 max_cell_voltage = 3;
inline void HvVoltage::clear_max_cell_voltage() {
  max_cell_voltage_ = 0u;
}
inline uint32_t HvVoltage::_internal_max_cell_voltage() const {
  return max_cell_voltage_;
}
inline uint32_t HvVoltage::max_cell_voltage() const {
  // @@protoc_insertion_point(field_get:primary.HvVoltage.max_cell_voltage)
  return _internal_max_cell_voltage();
}
inline void HvVoltage::_internal_set_max_cell_voltage(uint32_t value) {
  
  max_cell_voltage_ = value;
}
inline void HvVoltage::set_max_cell_voltage(uint32_t value) {
  _internal_set_max_cell_voltage(value);
  // @@protoc_insertion_point(field_set:primary.HvVoltage.max_cell_voltage)
}

// uint32 min_cell_voltage = 4;
inline void HvVoltage::clear_min_cell_voltage() {
  min_cell_voltage_ = 0u;
}
inline uint32_t HvVoltage::_internal_min_cell_voltage() const {
  return min_cell_voltage_;
}
inline uint32_t HvVoltage::min_cell_voltage() const {
  // @@protoc_insertion_point(field_get:primary.HvVoltage.min_cell_voltage)
  return _internal_min_cell_voltage();
}
inline void HvVoltage::_internal_set_min_cell_voltage(uint32_t value) {
  
  min_cell_voltage_ = value;
}
inline void HvVoltage::set_min_cell_voltage(uint32_t value) {
  _internal_set_min_cell_voltage(value);
  // @@protoc_insertion_point(field_set:primary.HvVoltage.min_cell_voltage)
}

// -------------------------------------------------------------------

// HvCurrent

// uint32 current = 1;
inline void HvCurrent::clear_current() {
  current_ = 0u;
}
inline uint32_t HvCurrent::_internal_current() const {
  return current_;
}
inline uint32_t HvCurrent::current() const {
  // @@protoc_insertion_point(field_get:primary.HvCurrent.current)
  return _internal_current();
}
inline void HvCurrent::_internal_set_current(uint32_t value) {
  
  current_ = value;
}
inline void HvCurrent::set_current(uint32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:primary.HvCurrent.current)
}

// int32 power = 2;
inline void HvCurrent::clear_power() {
  power_ = 0;
}
inline int32_t HvCurrent::_internal_power() const {
  return power_;
}
inline int32_t HvCurrent::power() const {
  // @@protoc_insertion_point(field_get:primary.HvCurrent.power)
  return _internal_power();
}
inline void HvCurrent::_internal_set_power(int32_t value) {
  
  power_ = value;
}
inline void HvCurrent::set_power(int32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:primary.HvCurrent.power)
}

// -------------------------------------------------------------------

// HvTemp

// uint32 average_temp = 1;
inline void HvTemp::clear_average_temp() {
  average_temp_ = 0u;
}
inline uint32_t HvTemp::_internal_average_temp() const {
  return average_temp_;
}
inline uint32_t HvTemp::average_temp() const {
  // @@protoc_insertion_point(field_get:primary.HvTemp.average_temp)
  return _internal_average_temp();
}
inline void HvTemp::_internal_set_average_temp(uint32_t value) {
  
  average_temp_ = value;
}
inline void HvTemp::set_average_temp(uint32_t value) {
  _internal_set_average_temp(value);
  // @@protoc_insertion_point(field_set:primary.HvTemp.average_temp)
}

// uint32 max_temp = 2;
inline void HvTemp::clear_max_temp() {
  max_temp_ = 0u;
}
inline uint32_t HvTemp::_internal_max_temp() const {
  return max_temp_;
}
inline uint32_t HvTemp::max_temp() const {
  // @@protoc_insertion_point(field_get:primary.HvTemp.max_temp)
  return _internal_max_temp();
}
inline void HvTemp::_internal_set_max_temp(uint32_t value) {
  
  max_temp_ = value;
}
inline void HvTemp::set_max_temp(uint32_t value) {
  _internal_set_max_temp(value);
  // @@protoc_insertion_point(field_set:primary.HvTemp.max_temp)
}

// uint32 min_temp = 3;
inline void HvTemp::clear_min_temp() {
  min_temp_ = 0u;
}
inline uint32_t HvTemp::_internal_min_temp() const {
  return min_temp_;
}
inline uint32_t HvTemp::min_temp() const {
  // @@protoc_insertion_point(field_get:primary.HvTemp.min_temp)
  return _internal_min_temp();
}
inline void HvTemp::_internal_set_min_temp(uint32_t value) {
  
  min_temp_ = value;
}
inline void HvTemp::set_min_temp(uint32_t value) {
  _internal_set_min_temp(value);
  // @@protoc_insertion_point(field_set:primary.HvTemp.min_temp)
}

// -------------------------------------------------------------------

// HvErrors

// uint32 warnings = 1;
inline void HvErrors::clear_warnings() {
  warnings_ = 0u;
}
inline uint32_t HvErrors::_internal_warnings() const {
  return warnings_;
}
inline uint32_t HvErrors::warnings() const {
  // @@protoc_insertion_point(field_get:primary.HvErrors.warnings)
  return _internal_warnings();
}
inline void HvErrors::_internal_set_warnings(uint32_t value) {
  
  warnings_ = value;
}
inline void HvErrors::set_warnings(uint32_t value) {
  _internal_set_warnings(value);
  // @@protoc_insertion_point(field_set:primary.HvErrors.warnings)
}

// uint32 errors = 2;
inline void HvErrors::clear_errors() {
  errors_ = 0u;
}
inline uint32_t HvErrors::_internal_errors() const {
  return errors_;
}
inline uint32_t HvErrors::errors() const {
  // @@protoc_insertion_point(field_get:primary.HvErrors.errors)
  return _internal_errors();
}
inline void HvErrors::_internal_set_errors(uint32_t value) {
  
  errors_ = value;
}
inline void HvErrors::set_errors(uint32_t value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:primary.HvErrors.errors)
}

// -------------------------------------------------------------------

// TsStatus

// .primary.TsStatusType ts_status = 1;
inline void TsStatus::clear_ts_status() {
  ts_status_ = 0;
}
inline ::primary::TsStatusType TsStatus::_internal_ts_status() const {
  return static_cast< ::primary::TsStatusType >(ts_status_);
}
inline ::primary::TsStatusType TsStatus::ts_status() const {
  // @@protoc_insertion_point(field_get:primary.TsStatus.ts_status)
  return _internal_ts_status();
}
inline void TsStatus::_internal_set_ts_status(::primary::TsStatusType value) {
  
  ts_status_ = value;
}
inline void TsStatus::set_ts_status(::primary::TsStatusType value) {
  _internal_set_ts_status(value);
  // @@protoc_insertion_point(field_set:primary.TsStatus.ts_status)
}

// -------------------------------------------------------------------

// SetTsStatus

// .primary.TsStatusSetType ts_status_set = 1;
inline void SetTsStatus::clear_ts_status_set() {
  ts_status_set_ = 0;
}
inline ::primary::TsStatusSetType SetTsStatus::_internal_ts_status_set() const {
  return static_cast< ::primary::TsStatusSetType >(ts_status_set_);
}
inline ::primary::TsStatusSetType SetTsStatus::ts_status_set() const {
  // @@protoc_insertion_point(field_get:primary.SetTsStatus.ts_status_set)
  return _internal_ts_status_set();
}
inline void SetTsStatus::_internal_set_ts_status_set(::primary::TsStatusSetType value) {
  
  ts_status_set_ = value;
}
inline void SetTsStatus::set_ts_status_set(::primary::TsStatusSetType value) {
  _internal_set_ts_status_set(value);
  // @@protoc_insertion_point(field_set:primary.SetTsStatus.ts_status_set)
}

// -------------------------------------------------------------------

// SetCellBalancingStatus

// .primary.SetBalancingStatusType set_balancing_status = 1;
inline void SetCellBalancingStatus::clear_set_balancing_status() {
  set_balancing_status_ = 0;
}
inline ::primary::SetBalancingStatusType SetCellBalancingStatus::_internal_set_balancing_status() const {
  return static_cast< ::primary::SetBalancingStatusType >(set_balancing_status_);
}
inline ::primary::SetBalancingStatusType SetCellBalancingStatus::set_balancing_status() const {
  // @@protoc_insertion_point(field_get:primary.SetCellBalancingStatus.set_balancing_status)
  return _internal_set_balancing_status();
}
inline void SetCellBalancingStatus::_internal_set_set_balancing_status(::primary::SetBalancingStatusType value) {
  
  set_balancing_status_ = value;
}
inline void SetCellBalancingStatus::set_set_balancing_status(::primary::SetBalancingStatusType value) {
  _internal_set_set_balancing_status(value);
  // @@protoc_insertion_point(field_set:primary.SetCellBalancingStatus.set_balancing_status)
}

// -------------------------------------------------------------------

// HandcartStatus

// bool connected = 1;
inline void HandcartStatus::clear_connected() {
  connected_ = false;
}
inline bool HandcartStatus::_internal_connected() const {
  return connected_;
}
inline bool HandcartStatus::connected() const {
  // @@protoc_insertion_point(field_get:primary.HandcartStatus.connected)
  return _internal_connected();
}
inline void HandcartStatus::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void HandcartStatus::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:primary.HandcartStatus.connected)
}

// -------------------------------------------------------------------

// SteerStatus

// .primary.TractionControlType traction_control = 1;
inline void SteerStatus::clear_traction_control() {
  traction_control_ = 0;
}
inline ::primary::TractionControlType SteerStatus::_internal_traction_control() const {
  return static_cast< ::primary::TractionControlType >(traction_control_);
}
inline ::primary::TractionControlType SteerStatus::traction_control() const {
  // @@protoc_insertion_point(field_get:primary.SteerStatus.traction_control)
  return _internal_traction_control();
}
inline void SteerStatus::_internal_set_traction_control(::primary::TractionControlType value) {
  
  traction_control_ = value;
}
inline void SteerStatus::set_traction_control(::primary::TractionControlType value) {
  _internal_set_traction_control(value);
  // @@protoc_insertion_point(field_set:primary.SteerStatus.traction_control)
}

// .primary.MapType map = 2;
inline void SteerStatus::clear_map() {
  map_ = 0;
}
inline ::primary::MapType SteerStatus::_internal_map() const {
  return static_cast< ::primary::MapType >(map_);
}
inline ::primary::MapType SteerStatus::map() const {
  // @@protoc_insertion_point(field_get:primary.SteerStatus.map)
  return _internal_map();
}
inline void SteerStatus::_internal_set_map(::primary::MapType value) {
  
  map_ = value;
}
inline void SteerStatus::set_map(::primary::MapType value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:primary.SteerStatus.map)
}

// -------------------------------------------------------------------

// SetCarStatus

// .primary.CarStatusSetType car_status_set = 1;
inline void SetCarStatus::clear_car_status_set() {
  car_status_set_ = 0;
}
inline ::primary::CarStatusSetType SetCarStatus::_internal_car_status_set() const {
  return static_cast< ::primary::CarStatusSetType >(car_status_set_);
}
inline ::primary::CarStatusSetType SetCarStatus::car_status_set() const {
  // @@protoc_insertion_point(field_get:primary.SetCarStatus.car_status_set)
  return _internal_car_status_set();
}
inline void SetCarStatus::_internal_set_car_status_set(::primary::CarStatusSetType value) {
  
  car_status_set_ = value;
}
inline void SetCarStatus::set_car_status_set(::primary::CarStatusSetType value) {
  _internal_set_car_status_set(value);
  // @@protoc_insertion_point(field_set:primary.SetCarStatus.car_status_set)
}

// -------------------------------------------------------------------

// SetPedalsRange

// .primary.BoundType bound = 1;
inline void SetPedalsRange::clear_bound() {
  bound_ = 0;
}
inline ::primary::BoundType SetPedalsRange::_internal_bound() const {
  return static_cast< ::primary::BoundType >(bound_);
}
inline ::primary::BoundType SetPedalsRange::bound() const {
  // @@protoc_insertion_point(field_get:primary.SetPedalsRange.bound)
  return _internal_bound();
}
inline void SetPedalsRange::_internal_set_bound(::primary::BoundType value) {
  
  bound_ = value;
}
inline void SetPedalsRange::set_bound(::primary::BoundType value) {
  _internal_set_bound(value);
  // @@protoc_insertion_point(field_set:primary.SetPedalsRange.bound)
}

// .primary.PedalType pedal = 2;
inline void SetPedalsRange::clear_pedal() {
  pedal_ = 0;
}
inline ::primary::PedalType SetPedalsRange::_internal_pedal() const {
  return static_cast< ::primary::PedalType >(pedal_);
}
inline ::primary::PedalType SetPedalsRange::pedal() const {
  // @@protoc_insertion_point(field_get:primary.SetPedalsRange.pedal)
  return _internal_pedal();
}
inline void SetPedalsRange::_internal_set_pedal(::primary::PedalType value) {
  
  pedal_ = value;
}
inline void SetPedalsRange::set_pedal(::primary::PedalType value) {
  _internal_set_pedal(value);
  // @@protoc_insertion_point(field_set:primary.SetPedalsRange.pedal)
}

// -------------------------------------------------------------------

// LvCurrent

// uint32 current = 1;
inline void LvCurrent::clear_current() {
  current_ = 0u;
}
inline uint32_t LvCurrent::_internal_current() const {
  return current_;
}
inline uint32_t LvCurrent::current() const {
  // @@protoc_insertion_point(field_get:primary.LvCurrent.current)
  return _internal_current();
}
inline void LvCurrent::_internal_set_current(uint32_t value) {
  
  current_ = value;
}
inline void LvCurrent::set_current(uint32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:primary.LvCurrent.current)
}

// -------------------------------------------------------------------

// LvVoltage

// uint32 total_voltage = 1;
inline void LvVoltage::clear_total_voltage() {
  total_voltage_ = 0u;
}
inline uint32_t LvVoltage::_internal_total_voltage() const {
  return total_voltage_;
}
inline uint32_t LvVoltage::total_voltage() const {
  // @@protoc_insertion_point(field_get:primary.LvVoltage.total_voltage)
  return _internal_total_voltage();
}
inline void LvVoltage::_internal_set_total_voltage(uint32_t value) {
  
  total_voltage_ = value;
}
inline void LvVoltage::set_total_voltage(uint32_t value) {
  _internal_set_total_voltage(value);
  // @@protoc_insertion_point(field_set:primary.LvVoltage.total_voltage)
}

// uint32 voltage_1 = 2;
inline void LvVoltage::clear_voltage_1() {
  voltage_1_ = 0u;
}
inline uint32_t LvVoltage::_internal_voltage_1() const {
  return voltage_1_;
}
inline uint32_t LvVoltage::voltage_1() const {
  // @@protoc_insertion_point(field_get:primary.LvVoltage.voltage_1)
  return _internal_voltage_1();
}
inline void LvVoltage::_internal_set_voltage_1(uint32_t value) {
  
  voltage_1_ = value;
}
inline void LvVoltage::set_voltage_1(uint32_t value) {
  _internal_set_voltage_1(value);
  // @@protoc_insertion_point(field_set:primary.LvVoltage.voltage_1)
}

// uint32 voltage_2 = 3;
inline void LvVoltage::clear_voltage_2() {
  voltage_2_ = 0u;
}
inline uint32_t LvVoltage::_internal_voltage_2() const {
  return voltage_2_;
}
inline uint32_t LvVoltage::voltage_2() const {
  // @@protoc_insertion_point(field_get:primary.LvVoltage.voltage_2)
  return _internal_voltage_2();
}
inline void LvVoltage::_internal_set_voltage_2(uint32_t value) {
  
  voltage_2_ = value;
}
inline void LvVoltage::set_voltage_2(uint32_t value) {
  _internal_set_voltage_2(value);
  // @@protoc_insertion_point(field_set:primary.LvVoltage.voltage_2)
}

// uint32 voltage_3 = 4;
inline void LvVoltage::clear_voltage_3() {
  voltage_3_ = 0u;
}
inline uint32_t LvVoltage::_internal_voltage_3() const {
  return voltage_3_;
}
inline uint32_t LvVoltage::voltage_3() const {
  // @@protoc_insertion_point(field_get:primary.LvVoltage.voltage_3)
  return _internal_voltage_3();
}
inline void LvVoltage::_internal_set_voltage_3(uint32_t value) {
  
  voltage_3_ = value;
}
inline void LvVoltage::set_voltage_3(uint32_t value) {
  _internal_set_voltage_3(value);
  // @@protoc_insertion_point(field_set:primary.LvVoltage.voltage_3)
}

// uint32 voltage_4 = 5;
inline void LvVoltage::clear_voltage_4() {
  voltage_4_ = 0u;
}
inline uint32_t LvVoltage::_internal_voltage_4() const {
  return voltage_4_;
}
inline uint32_t LvVoltage::voltage_4() const {
  // @@protoc_insertion_point(field_get:primary.LvVoltage.voltage_4)
  return _internal_voltage_4();
}
inline void LvVoltage::_internal_set_voltage_4(uint32_t value) {
  
  voltage_4_ = value;
}
inline void LvVoltage::set_voltage_4(uint32_t value) {
  _internal_set_voltage_4(value);
  // @@protoc_insertion_point(field_set:primary.LvVoltage.voltage_4)
}

// -------------------------------------------------------------------

// LvTemperature

// uint32 bp_temperature = 1;
inline void LvTemperature::clear_bp_temperature() {
  bp_temperature_ = 0u;
}
inline uint32_t LvTemperature::_internal_bp_temperature() const {
  return bp_temperature_;
}
inline uint32_t LvTemperature::bp_temperature() const {
  // @@protoc_insertion_point(field_get:primary.LvTemperature.bp_temperature)
  return _internal_bp_temperature();
}
inline void LvTemperature::_internal_set_bp_temperature(uint32_t value) {
  
  bp_temperature_ = value;
}
inline void LvTemperature::set_bp_temperature(uint32_t value) {
  _internal_set_bp_temperature(value);
  // @@protoc_insertion_point(field_set:primary.LvTemperature.bp_temperature)
}

// uint32 dcdc_temperature = 2;
inline void LvTemperature::clear_dcdc_temperature() {
  dcdc_temperature_ = 0u;
}
inline uint32_t LvTemperature::_internal_dcdc_temperature() const {
  return dcdc_temperature_;
}
inline uint32_t LvTemperature::dcdc_temperature() const {
  // @@protoc_insertion_point(field_get:primary.LvTemperature.dcdc_temperature)
  return _internal_dcdc_temperature();
}
inline void LvTemperature::_internal_set_dcdc_temperature(uint32_t value) {
  
  dcdc_temperature_ = value;
}
inline void LvTemperature::set_dcdc_temperature(uint32_t value) {
  _internal_set_dcdc_temperature(value);
  // @@protoc_insertion_point(field_set:primary.LvTemperature.dcdc_temperature)
}

// -------------------------------------------------------------------

// CoolingStatus

// uint32 hv_fan_speed = 1;
inline void CoolingStatus::clear_hv_fan_speed() {
  hv_fan_speed_ = 0u;
}
inline uint32_t CoolingStatus::_internal_hv_fan_speed() const {
  return hv_fan_speed_;
}
inline uint32_t CoolingStatus::hv_fan_speed() const {
  // @@protoc_insertion_point(field_get:primary.CoolingStatus.hv_fan_speed)
  return _internal_hv_fan_speed();
}
inline void CoolingStatus::_internal_set_hv_fan_speed(uint32_t value) {
  
  hv_fan_speed_ = value;
}
inline void CoolingStatus::set_hv_fan_speed(uint32_t value) {
  _internal_set_hv_fan_speed(value);
  // @@protoc_insertion_point(field_set:primary.CoolingStatus.hv_fan_speed)
}

// uint32 lv_fan_speed = 2;
inline void CoolingStatus::clear_lv_fan_speed() {
  lv_fan_speed_ = 0u;
}
inline uint32_t CoolingStatus::_internal_lv_fan_speed() const {
  return lv_fan_speed_;
}
inline uint32_t CoolingStatus::lv_fan_speed() const {
  // @@protoc_insertion_point(field_get:primary.CoolingStatus.lv_fan_speed)
  return _internal_lv_fan_speed();
}
inline void CoolingStatus::_internal_set_lv_fan_speed(uint32_t value) {
  
  lv_fan_speed_ = value;
}
inline void CoolingStatus::set_lv_fan_speed(uint32_t value) {
  _internal_set_lv_fan_speed(value);
  // @@protoc_insertion_point(field_set:primary.CoolingStatus.lv_fan_speed)
}

// uint32 pump_speed = 3;
inline void CoolingStatus::clear_pump_speed() {
  pump_speed_ = 0u;
}
inline uint32_t CoolingStatus::_internal_pump_speed() const {
  return pump_speed_;
}
inline uint32_t CoolingStatus::pump_speed() const {
  // @@protoc_insertion_point(field_get:primary.CoolingStatus.pump_speed)
  return _internal_pump_speed();
}
inline void CoolingStatus::_internal_set_pump_speed(uint32_t value) {
  
  pump_speed_ = value;
}
inline void CoolingStatus::set_pump_speed(uint32_t value) {
  _internal_set_pump_speed(value);
  // @@protoc_insertion_point(field_set:primary.CoolingStatus.pump_speed)
}

// -------------------------------------------------------------------

// HvCellsVoltage

// uint32 cell_index = 1;
inline void HvCellsVoltage::clear_cell_index() {
  cell_index_ = 0u;
}
inline uint32_t HvCellsVoltage::_internal_cell_index() const {
  return cell_index_;
}
inline uint32_t HvCellsVoltage::cell_index() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsVoltage.cell_index)
  return _internal_cell_index();
}
inline void HvCellsVoltage::_internal_set_cell_index(uint32_t value) {
  
  cell_index_ = value;
}
inline void HvCellsVoltage::set_cell_index(uint32_t value) {
  _internal_set_cell_index(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsVoltage.cell_index)
}

// uint32 voltage_0 = 2;
inline void HvCellsVoltage::clear_voltage_0() {
  voltage_0_ = 0u;
}
inline uint32_t HvCellsVoltage::_internal_voltage_0() const {
  return voltage_0_;
}
inline uint32_t HvCellsVoltage::voltage_0() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsVoltage.voltage_0)
  return _internal_voltage_0();
}
inline void HvCellsVoltage::_internal_set_voltage_0(uint32_t value) {
  
  voltage_0_ = value;
}
inline void HvCellsVoltage::set_voltage_0(uint32_t value) {
  _internal_set_voltage_0(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsVoltage.voltage_0)
}

// uint32 voltage_1 = 3;
inline void HvCellsVoltage::clear_voltage_1() {
  voltage_1_ = 0u;
}
inline uint32_t HvCellsVoltage::_internal_voltage_1() const {
  return voltage_1_;
}
inline uint32_t HvCellsVoltage::voltage_1() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsVoltage.voltage_1)
  return _internal_voltage_1();
}
inline void HvCellsVoltage::_internal_set_voltage_1(uint32_t value) {
  
  voltage_1_ = value;
}
inline void HvCellsVoltage::set_voltage_1(uint32_t value) {
  _internal_set_voltage_1(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsVoltage.voltage_1)
}

// uint32 voltage_2 = 4;
inline void HvCellsVoltage::clear_voltage_2() {
  voltage_2_ = 0u;
}
inline uint32_t HvCellsVoltage::_internal_voltage_2() const {
  return voltage_2_;
}
inline uint32_t HvCellsVoltage::voltage_2() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsVoltage.voltage_2)
  return _internal_voltage_2();
}
inline void HvCellsVoltage::_internal_set_voltage_2(uint32_t value) {
  
  voltage_2_ = value;
}
inline void HvCellsVoltage::set_voltage_2(uint32_t value) {
  _internal_set_voltage_2(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsVoltage.voltage_2)
}

// -------------------------------------------------------------------

// HvCellsTemp

// uint32 cell_index = 1;
inline void HvCellsTemp::clear_cell_index() {
  cell_index_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_cell_index() const {
  return cell_index_;
}
inline uint32_t HvCellsTemp::cell_index() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.cell_index)
  return _internal_cell_index();
}
inline void HvCellsTemp::_internal_set_cell_index(uint32_t value) {
  
  cell_index_ = value;
}
inline void HvCellsTemp::set_cell_index(uint32_t value) {
  _internal_set_cell_index(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.cell_index)
}

// uint32 temp_0 = 2;
inline void HvCellsTemp::clear_temp_0() {
  temp_0_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_0() const {
  return temp_0_;
}
inline uint32_t HvCellsTemp::temp_0() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_0)
  return _internal_temp_0();
}
inline void HvCellsTemp::_internal_set_temp_0(uint32_t value) {
  
  temp_0_ = value;
}
inline void HvCellsTemp::set_temp_0(uint32_t value) {
  _internal_set_temp_0(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_0)
}

// uint32 temp_1 = 3;
inline void HvCellsTemp::clear_temp_1() {
  temp_1_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_1() const {
  return temp_1_;
}
inline uint32_t HvCellsTemp::temp_1() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_1)
  return _internal_temp_1();
}
inline void HvCellsTemp::_internal_set_temp_1(uint32_t value) {
  
  temp_1_ = value;
}
inline void HvCellsTemp::set_temp_1(uint32_t value) {
  _internal_set_temp_1(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_1)
}

// uint32 temp_2 = 4;
inline void HvCellsTemp::clear_temp_2() {
  temp_2_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_2() const {
  return temp_2_;
}
inline uint32_t HvCellsTemp::temp_2() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_2)
  return _internal_temp_2();
}
inline void HvCellsTemp::_internal_set_temp_2(uint32_t value) {
  
  temp_2_ = value;
}
inline void HvCellsTemp::set_temp_2(uint32_t value) {
  _internal_set_temp_2(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_2)
}

// uint32 temp_3 = 5;
inline void HvCellsTemp::clear_temp_3() {
  temp_3_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_3() const {
  return temp_3_;
}
inline uint32_t HvCellsTemp::temp_3() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_3)
  return _internal_temp_3();
}
inline void HvCellsTemp::_internal_set_temp_3(uint32_t value) {
  
  temp_3_ = value;
}
inline void HvCellsTemp::set_temp_3(uint32_t value) {
  _internal_set_temp_3(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_3)
}

// uint32 temp_4 = 6;
inline void HvCellsTemp::clear_temp_4() {
  temp_4_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_4() const {
  return temp_4_;
}
inline uint32_t HvCellsTemp::temp_4() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_4)
  return _internal_temp_4();
}
inline void HvCellsTemp::_internal_set_temp_4(uint32_t value) {
  
  temp_4_ = value;
}
inline void HvCellsTemp::set_temp_4(uint32_t value) {
  _internal_set_temp_4(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_4)
}

// uint32 temp_5 = 7;
inline void HvCellsTemp::clear_temp_5() {
  temp_5_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_5() const {
  return temp_5_;
}
inline uint32_t HvCellsTemp::temp_5() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_5)
  return _internal_temp_5();
}
inline void HvCellsTemp::_internal_set_temp_5(uint32_t value) {
  
  temp_5_ = value;
}
inline void HvCellsTemp::set_temp_5(uint32_t value) {
  _internal_set_temp_5(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_5)
}

// uint32 temp_6 = 8;
inline void HvCellsTemp::clear_temp_6() {
  temp_6_ = 0u;
}
inline uint32_t HvCellsTemp::_internal_temp_6() const {
  return temp_6_;
}
inline uint32_t HvCellsTemp::temp_6() const {
  // @@protoc_insertion_point(field_get:primary.HvCellsTemp.temp_6)
  return _internal_temp_6();
}
inline void HvCellsTemp::_internal_set_temp_6(uint32_t value) {
  
  temp_6_ = value;
}
inline void HvCellsTemp::set_temp_6(uint32_t value) {
  _internal_set_temp_6(value);
  // @@protoc_insertion_point(field_set:primary.HvCellsTemp.temp_6)
}

// -------------------------------------------------------------------

// HvCellBalancingStatus

// .primary.BalancingStatusType balancing_status = 1;
inline void HvCellBalancingStatus::clear_balancing_status() {
  balancing_status_ = 0;
}
inline ::primary::BalancingStatusType HvCellBalancingStatus::_internal_balancing_status() const {
  return static_cast< ::primary::BalancingStatusType >(balancing_status_);
}
inline ::primary::BalancingStatusType HvCellBalancingStatus::balancing_status() const {
  // @@protoc_insertion_point(field_get:primary.HvCellBalancingStatus.balancing_status)
  return _internal_balancing_status();
}
inline void HvCellBalancingStatus::_internal_set_balancing_status(::primary::BalancingStatusType value) {
  
  balancing_status_ = value;
}
inline void HvCellBalancingStatus::set_balancing_status(::primary::BalancingStatusType value) {
  _internal_set_balancing_status(value);
  // @@protoc_insertion_point(field_set:primary.HvCellBalancingStatus.balancing_status)
}

// -------------------------------------------------------------------

// InvLSetTorque

// uint32 regid = 1;
inline void InvLSetTorque::clear_regid() {
  regid_ = 0u;
}
inline uint32_t InvLSetTorque::_internal_regid() const {
  return regid_;
}
inline uint32_t InvLSetTorque::regid() const {
  // @@protoc_insertion_point(field_get:primary.InvLSetTorque.regid)
  return _internal_regid();
}
inline void InvLSetTorque::_internal_set_regid(uint32_t value) {
  
  regid_ = value;
}
inline void InvLSetTorque::set_regid(uint32_t value) {
  _internal_set_regid(value);
  // @@protoc_insertion_point(field_set:primary.InvLSetTorque.regid)
}

// uint32 lsb = 2;
inline void InvLSetTorque::clear_lsb() {
  lsb_ = 0u;
}
inline uint32_t InvLSetTorque::_internal_lsb() const {
  return lsb_;
}
inline uint32_t InvLSetTorque::lsb() const {
  // @@protoc_insertion_point(field_get:primary.InvLSetTorque.lsb)
  return _internal_lsb();
}
inline void InvLSetTorque::_internal_set_lsb(uint32_t value) {
  
  lsb_ = value;
}
inline void InvLSetTorque::set_lsb(uint32_t value) {
  _internal_set_lsb(value);
  // @@protoc_insertion_point(field_set:primary.InvLSetTorque.lsb)
}

// uint32 msb = 3;
inline void InvLSetTorque::clear_msb() {
  msb_ = 0u;
}
inline uint32_t InvLSetTorque::_internal_msb() const {
  return msb_;
}
inline uint32_t InvLSetTorque::msb() const {
  // @@protoc_insertion_point(field_get:primary.InvLSetTorque.msb)
  return _internal_msb();
}
inline void InvLSetTorque::_internal_set_msb(uint32_t value) {
  
  msb_ = value;
}
inline void InvLSetTorque::set_msb(uint32_t value) {
  _internal_set_msb(value);
  // @@protoc_insertion_point(field_set:primary.InvLSetTorque.msb)
}

// -------------------------------------------------------------------

// InvLResponse

// uint32 reg_id = 1;
inline void InvLResponse::clear_reg_id() {
  reg_id_ = 0u;
}
inline uint32_t InvLResponse::_internal_reg_id() const {
  return reg_id_;
}
inline uint32_t InvLResponse::reg_id() const {
  // @@protoc_insertion_point(field_get:primary.InvLResponse.reg_id)
  return _internal_reg_id();
}
inline void InvLResponse::_internal_set_reg_id(uint32_t value) {
  
  reg_id_ = value;
}
inline void InvLResponse::set_reg_id(uint32_t value) {
  _internal_set_reg_id(value);
  // @@protoc_insertion_point(field_set:primary.InvLResponse.reg_id)
}

// uint32 reg_val = 2;
inline void InvLResponse::clear_reg_val() {
  reg_val_ = 0u;
}
inline uint32_t InvLResponse::_internal_reg_val() const {
  return reg_val_;
}
inline uint32_t InvLResponse::reg_val() const {
  // @@protoc_insertion_point(field_get:primary.InvLResponse.reg_val)
  return _internal_reg_val();
}
inline void InvLResponse::_internal_set_reg_val(uint32_t value) {
  
  reg_val_ = value;
}
inline void InvLResponse::set_reg_val(uint32_t value) {
  _internal_set_reg_val(value);
  // @@protoc_insertion_point(field_set:primary.InvLResponse.reg_val)
}

// -------------------------------------------------------------------

// PrimaryFenice

// repeated .primary.SteerVersion steer_version = 1;
inline int PrimaryFenice::_internal_steer_version_size() const {
  return steer_version_.size();
}
inline int PrimaryFenice::steer_version_size() const {
  return _internal_steer_version_size();
}
inline void PrimaryFenice::clear_steer_version() {
  steer_version_.Clear();
}
inline ::primary::SteerVersion* PrimaryFenice::mutable_steer_version(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.steer_version)
  return steer_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerVersion >*
PrimaryFenice::mutable_steer_version() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.steer_version)
  return &steer_version_;
}
inline const ::primary::SteerVersion& PrimaryFenice::_internal_steer_version(int index) const {
  return steer_version_.Get(index);
}
inline const ::primary::SteerVersion& PrimaryFenice::steer_version(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.steer_version)
  return _internal_steer_version(index);
}
inline ::primary::SteerVersion* PrimaryFenice::_internal_add_steer_version() {
  return steer_version_.Add();
}
inline ::primary::SteerVersion* PrimaryFenice::add_steer_version() {
  ::primary::SteerVersion* _add = _internal_add_steer_version();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.steer_version)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerVersion >&
PrimaryFenice::steer_version() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.steer_version)
  return steer_version_;
}

// repeated .primary.DasVersion das_version = 2;
inline int PrimaryFenice::_internal_das_version_size() const {
  return das_version_.size();
}
inline int PrimaryFenice::das_version_size() const {
  return _internal_das_version_size();
}
inline void PrimaryFenice::clear_das_version() {
  das_version_.Clear();
}
inline ::primary::DasVersion* PrimaryFenice::mutable_das_version(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.das_version)
  return das_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasVersion >*
PrimaryFenice::mutable_das_version() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.das_version)
  return &das_version_;
}
inline const ::primary::DasVersion& PrimaryFenice::_internal_das_version(int index) const {
  return das_version_.Get(index);
}
inline const ::primary::DasVersion& PrimaryFenice::das_version(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.das_version)
  return _internal_das_version(index);
}
inline ::primary::DasVersion* PrimaryFenice::_internal_add_das_version() {
  return das_version_.Add();
}
inline ::primary::DasVersion* PrimaryFenice::add_das_version() {
  ::primary::DasVersion* _add = _internal_add_das_version();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.das_version)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasVersion >&
PrimaryFenice::das_version() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.das_version)
  return das_version_;
}

// repeated .primary.HvVersion hv_version = 3;
inline int PrimaryFenice::_internal_hv_version_size() const {
  return hv_version_.size();
}
inline int PrimaryFenice::hv_version_size() const {
  return _internal_hv_version_size();
}
inline void PrimaryFenice::clear_hv_version() {
  hv_version_.Clear();
}
inline ::primary::HvVersion* PrimaryFenice::mutable_hv_version(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_version)
  return hv_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVersion >*
PrimaryFenice::mutable_hv_version() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_version)
  return &hv_version_;
}
inline const ::primary::HvVersion& PrimaryFenice::_internal_hv_version(int index) const {
  return hv_version_.Get(index);
}
inline const ::primary::HvVersion& PrimaryFenice::hv_version(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_version)
  return _internal_hv_version(index);
}
inline ::primary::HvVersion* PrimaryFenice::_internal_add_hv_version() {
  return hv_version_.Add();
}
inline ::primary::HvVersion* PrimaryFenice::add_hv_version() {
  ::primary::HvVersion* _add = _internal_add_hv_version();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_version)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVersion >&
PrimaryFenice::hv_version() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_version)
  return hv_version_;
}

// repeated .primary.LvVersion lv_version = 4;
inline int PrimaryFenice::_internal_lv_version_size() const {
  return lv_version_.size();
}
inline int PrimaryFenice::lv_version_size() const {
  return _internal_lv_version_size();
}
inline void PrimaryFenice::clear_lv_version() {
  lv_version_.Clear();
}
inline ::primary::LvVersion* PrimaryFenice::mutable_lv_version(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.lv_version)
  return lv_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVersion >*
PrimaryFenice::mutable_lv_version() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.lv_version)
  return &lv_version_;
}
inline const ::primary::LvVersion& PrimaryFenice::_internal_lv_version(int index) const {
  return lv_version_.Get(index);
}
inline const ::primary::LvVersion& PrimaryFenice::lv_version(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.lv_version)
  return _internal_lv_version(index);
}
inline ::primary::LvVersion* PrimaryFenice::_internal_add_lv_version() {
  return lv_version_.Add();
}
inline ::primary::LvVersion* PrimaryFenice::add_lv_version() {
  ::primary::LvVersion* _add = _internal_add_lv_version();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.lv_version)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVersion >&
PrimaryFenice::lv_version() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.lv_version)
  return lv_version_;
}

// repeated .primary.TlmVersion tlm_version = 5;
inline int PrimaryFenice::_internal_tlm_version_size() const {
  return tlm_version_.size();
}
inline int PrimaryFenice::tlm_version_size() const {
  return _internal_tlm_version_size();
}
inline void PrimaryFenice::clear_tlm_version() {
  tlm_version_.Clear();
}
inline ::primary::TlmVersion* PrimaryFenice::mutable_tlm_version(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.tlm_version)
  return tlm_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmVersion >*
PrimaryFenice::mutable_tlm_version() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.tlm_version)
  return &tlm_version_;
}
inline const ::primary::TlmVersion& PrimaryFenice::_internal_tlm_version(int index) const {
  return tlm_version_.Get(index);
}
inline const ::primary::TlmVersion& PrimaryFenice::tlm_version(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.tlm_version)
  return _internal_tlm_version(index);
}
inline ::primary::TlmVersion* PrimaryFenice::_internal_add_tlm_version() {
  return tlm_version_.Add();
}
inline ::primary::TlmVersion* PrimaryFenice::add_tlm_version() {
  ::primary::TlmVersion* _add = _internal_add_tlm_version();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.tlm_version)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmVersion >&
PrimaryFenice::tlm_version() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.tlm_version)
  return tlm_version_;
}

// repeated .primary.Timestamp timestamp = 6;
inline int PrimaryFenice::_internal_timestamp_size() const {
  return timestamp_.size();
}
inline int PrimaryFenice::timestamp_size() const {
  return _internal_timestamp_size();
}
inline void PrimaryFenice::clear_timestamp() {
  timestamp_.Clear();
}
inline ::primary::Timestamp* PrimaryFenice::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.timestamp)
  return timestamp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Timestamp >*
PrimaryFenice::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.timestamp)
  return &timestamp_;
}
inline const ::primary::Timestamp& PrimaryFenice::_internal_timestamp(int index) const {
  return timestamp_.Get(index);
}
inline const ::primary::Timestamp& PrimaryFenice::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.timestamp)
  return _internal_timestamp(index);
}
inline ::primary::Timestamp* PrimaryFenice::_internal_add_timestamp() {
  return timestamp_.Add();
}
inline ::primary::Timestamp* PrimaryFenice::add_timestamp() {
  ::primary::Timestamp* _add = _internal_add_timestamp();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.timestamp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Timestamp >&
PrimaryFenice::timestamp() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.timestamp)
  return timestamp_;
}

// repeated .primary.SetTlmStatus set_tlm_status = 7;
inline int PrimaryFenice::_internal_set_tlm_status_size() const {
  return set_tlm_status_.size();
}
inline int PrimaryFenice::set_tlm_status_size() const {
  return _internal_set_tlm_status_size();
}
inline void PrimaryFenice::clear_set_tlm_status() {
  set_tlm_status_.Clear();
}
inline ::primary::SetTlmStatus* PrimaryFenice::mutable_set_tlm_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.set_tlm_status)
  return set_tlm_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTlmStatus >*
PrimaryFenice::mutable_set_tlm_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.set_tlm_status)
  return &set_tlm_status_;
}
inline const ::primary::SetTlmStatus& PrimaryFenice::_internal_set_tlm_status(int index) const {
  return set_tlm_status_.Get(index);
}
inline const ::primary::SetTlmStatus& PrimaryFenice::set_tlm_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.set_tlm_status)
  return _internal_set_tlm_status(index);
}
inline ::primary::SetTlmStatus* PrimaryFenice::_internal_add_set_tlm_status() {
  return set_tlm_status_.Add();
}
inline ::primary::SetTlmStatus* PrimaryFenice::add_set_tlm_status() {
  ::primary::SetTlmStatus* _add = _internal_add_set_tlm_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.set_tlm_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTlmStatus >&
PrimaryFenice::set_tlm_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.set_tlm_status)
  return set_tlm_status_;
}

// repeated .primary.SteerSystemStatus steer_system_status = 8;
inline int PrimaryFenice::_internal_steer_system_status_size() const {
  return steer_system_status_.size();
}
inline int PrimaryFenice::steer_system_status_size() const {
  return _internal_steer_system_status_size();
}
inline void PrimaryFenice::clear_steer_system_status() {
  steer_system_status_.Clear();
}
inline ::primary::SteerSystemStatus* PrimaryFenice::mutable_steer_system_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.steer_system_status)
  return steer_system_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerSystemStatus >*
PrimaryFenice::mutable_steer_system_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.steer_system_status)
  return &steer_system_status_;
}
inline const ::primary::SteerSystemStatus& PrimaryFenice::_internal_steer_system_status(int index) const {
  return steer_system_status_.Get(index);
}
inline const ::primary::SteerSystemStatus& PrimaryFenice::steer_system_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.steer_system_status)
  return _internal_steer_system_status(index);
}
inline ::primary::SteerSystemStatus* PrimaryFenice::_internal_add_steer_system_status() {
  return steer_system_status_.Add();
}
inline ::primary::SteerSystemStatus* PrimaryFenice::add_steer_system_status() {
  ::primary::SteerSystemStatus* _add = _internal_add_steer_system_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.steer_system_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerSystemStatus >&
PrimaryFenice::steer_system_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.steer_system_status)
  return steer_system_status_;
}

// repeated .primary.Marker marker = 9;
inline int PrimaryFenice::_internal_marker_size() const {
  return marker_.size();
}
inline int PrimaryFenice::marker_size() const {
  return _internal_marker_size();
}
inline void PrimaryFenice::clear_marker() {
  marker_.Clear();
}
inline ::primary::Marker* PrimaryFenice::mutable_marker(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.marker)
  return marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Marker >*
PrimaryFenice::mutable_marker() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.marker)
  return &marker_;
}
inline const ::primary::Marker& PrimaryFenice::_internal_marker(int index) const {
  return marker_.Get(index);
}
inline const ::primary::Marker& PrimaryFenice::marker(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.marker)
  return _internal_marker(index);
}
inline ::primary::Marker* PrimaryFenice::_internal_add_marker() {
  return marker_.Add();
}
inline ::primary::Marker* PrimaryFenice::add_marker() {
  ::primary::Marker* _add = _internal_add_marker();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.marker)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Marker >&
PrimaryFenice::marker() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.marker)
  return marker_;
}

// repeated .primary.TlmStatus tlm_status = 10;
inline int PrimaryFenice::_internal_tlm_status_size() const {
  return tlm_status_.size();
}
inline int PrimaryFenice::tlm_status_size() const {
  return _internal_tlm_status_size();
}
inline void PrimaryFenice::clear_tlm_status() {
  tlm_status_.Clear();
}
inline ::primary::TlmStatus* PrimaryFenice::mutable_tlm_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.tlm_status)
  return tlm_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmStatus >*
PrimaryFenice::mutable_tlm_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.tlm_status)
  return &tlm_status_;
}
inline const ::primary::TlmStatus& PrimaryFenice::_internal_tlm_status(int index) const {
  return tlm_status_.Get(index);
}
inline const ::primary::TlmStatus& PrimaryFenice::tlm_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.tlm_status)
  return _internal_tlm_status(index);
}
inline ::primary::TlmStatus* PrimaryFenice::_internal_add_tlm_status() {
  return tlm_status_.Add();
}
inline ::primary::TlmStatus* PrimaryFenice::add_tlm_status() {
  ::primary::TlmStatus* _add = _internal_add_tlm_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.tlm_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TlmStatus >&
PrimaryFenice::tlm_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.tlm_status)
  return tlm_status_;
}

// repeated .primary.CarStatus car_status = 11;
inline int PrimaryFenice::_internal_car_status_size() const {
  return car_status_.size();
}
inline int PrimaryFenice::car_status_size() const {
  return _internal_car_status_size();
}
inline void PrimaryFenice::clear_car_status() {
  car_status_.Clear();
}
inline ::primary::CarStatus* PrimaryFenice::mutable_car_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.car_status)
  return car_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CarStatus >*
PrimaryFenice::mutable_car_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.car_status)
  return &car_status_;
}
inline const ::primary::CarStatus& PrimaryFenice::_internal_car_status(int index) const {
  return car_status_.Get(index);
}
inline const ::primary::CarStatus& PrimaryFenice::car_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.car_status)
  return _internal_car_status(index);
}
inline ::primary::CarStatus* PrimaryFenice::_internal_add_car_status() {
  return car_status_.Add();
}
inline ::primary::CarStatus* PrimaryFenice::add_car_status() {
  ::primary::CarStatus* _add = _internal_add_car_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.car_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CarStatus >&
PrimaryFenice::car_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.car_status)
  return car_status_;
}

// repeated .primary.DasErrors das_errors = 12;
inline int PrimaryFenice::_internal_das_errors_size() const {
  return das_errors_.size();
}
inline int PrimaryFenice::das_errors_size() const {
  return _internal_das_errors_size();
}
inline void PrimaryFenice::clear_das_errors() {
  das_errors_.Clear();
}
inline ::primary::DasErrors* PrimaryFenice::mutable_das_errors(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.das_errors)
  return das_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasErrors >*
PrimaryFenice::mutable_das_errors() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.das_errors)
  return &das_errors_;
}
inline const ::primary::DasErrors& PrimaryFenice::_internal_das_errors(int index) const {
  return das_errors_.Get(index);
}
inline const ::primary::DasErrors& PrimaryFenice::das_errors(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.das_errors)
  return _internal_das_errors(index);
}
inline ::primary::DasErrors* PrimaryFenice::_internal_add_das_errors() {
  return das_errors_.Add();
}
inline ::primary::DasErrors* PrimaryFenice::add_das_errors() {
  ::primary::DasErrors* _add = _internal_add_das_errors();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.das_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::DasErrors >&
PrimaryFenice::das_errors() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.das_errors)
  return das_errors_;
}

// repeated .primary.Speed speed = 13;
inline int PrimaryFenice::_internal_speed_size() const {
  return speed_.size();
}
inline int PrimaryFenice::speed_size() const {
  return _internal_speed_size();
}
inline void PrimaryFenice::clear_speed() {
  speed_.Clear();
}
inline ::primary::Speed* PrimaryFenice::mutable_speed(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.speed)
  return speed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Speed >*
PrimaryFenice::mutable_speed() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.speed)
  return &speed_;
}
inline const ::primary::Speed& PrimaryFenice::_internal_speed(int index) const {
  return speed_.Get(index);
}
inline const ::primary::Speed& PrimaryFenice::speed(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.speed)
  return _internal_speed(index);
}
inline ::primary::Speed* PrimaryFenice::_internal_add_speed() {
  return speed_.Add();
}
inline ::primary::Speed* PrimaryFenice::add_speed() {
  ::primary::Speed* _add = _internal_add_speed();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.speed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::Speed >&
PrimaryFenice::speed() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.speed)
  return speed_;
}

// repeated .primary.HvVoltage hv_voltage = 14;
inline int PrimaryFenice::_internal_hv_voltage_size() const {
  return hv_voltage_.size();
}
inline int PrimaryFenice::hv_voltage_size() const {
  return _internal_hv_voltage_size();
}
inline void PrimaryFenice::clear_hv_voltage() {
  hv_voltage_.Clear();
}
inline ::primary::HvVoltage* PrimaryFenice::mutable_hv_voltage(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_voltage)
  return hv_voltage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVoltage >*
PrimaryFenice::mutable_hv_voltage() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_voltage)
  return &hv_voltage_;
}
inline const ::primary::HvVoltage& PrimaryFenice::_internal_hv_voltage(int index) const {
  return hv_voltage_.Get(index);
}
inline const ::primary::HvVoltage& PrimaryFenice::hv_voltage(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_voltage)
  return _internal_hv_voltage(index);
}
inline ::primary::HvVoltage* PrimaryFenice::_internal_add_hv_voltage() {
  return hv_voltage_.Add();
}
inline ::primary::HvVoltage* PrimaryFenice::add_hv_voltage() {
  ::primary::HvVoltage* _add = _internal_add_hv_voltage();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_voltage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvVoltage >&
PrimaryFenice::hv_voltage() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_voltage)
  return hv_voltage_;
}

// repeated .primary.HvCurrent hv_current = 15;
inline int PrimaryFenice::_internal_hv_current_size() const {
  return hv_current_.size();
}
inline int PrimaryFenice::hv_current_size() const {
  return _internal_hv_current_size();
}
inline void PrimaryFenice::clear_hv_current() {
  hv_current_.Clear();
}
inline ::primary::HvCurrent* PrimaryFenice::mutable_hv_current(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_current)
  return hv_current_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCurrent >*
PrimaryFenice::mutable_hv_current() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_current)
  return &hv_current_;
}
inline const ::primary::HvCurrent& PrimaryFenice::_internal_hv_current(int index) const {
  return hv_current_.Get(index);
}
inline const ::primary::HvCurrent& PrimaryFenice::hv_current(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_current)
  return _internal_hv_current(index);
}
inline ::primary::HvCurrent* PrimaryFenice::_internal_add_hv_current() {
  return hv_current_.Add();
}
inline ::primary::HvCurrent* PrimaryFenice::add_hv_current() {
  ::primary::HvCurrent* _add = _internal_add_hv_current();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_current)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCurrent >&
PrimaryFenice::hv_current() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_current)
  return hv_current_;
}

// repeated .primary.HvTemp hv_temp = 16;
inline int PrimaryFenice::_internal_hv_temp_size() const {
  return hv_temp_.size();
}
inline int PrimaryFenice::hv_temp_size() const {
  return _internal_hv_temp_size();
}
inline void PrimaryFenice::clear_hv_temp() {
  hv_temp_.Clear();
}
inline ::primary::HvTemp* PrimaryFenice::mutable_hv_temp(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_temp)
  return hv_temp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvTemp >*
PrimaryFenice::mutable_hv_temp() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_temp)
  return &hv_temp_;
}
inline const ::primary::HvTemp& PrimaryFenice::_internal_hv_temp(int index) const {
  return hv_temp_.Get(index);
}
inline const ::primary::HvTemp& PrimaryFenice::hv_temp(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_temp)
  return _internal_hv_temp(index);
}
inline ::primary::HvTemp* PrimaryFenice::_internal_add_hv_temp() {
  return hv_temp_.Add();
}
inline ::primary::HvTemp* PrimaryFenice::add_hv_temp() {
  ::primary::HvTemp* _add = _internal_add_hv_temp();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_temp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvTemp >&
PrimaryFenice::hv_temp() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_temp)
  return hv_temp_;
}

// repeated .primary.HvErrors hv_errors = 17;
inline int PrimaryFenice::_internal_hv_errors_size() const {
  return hv_errors_.size();
}
inline int PrimaryFenice::hv_errors_size() const {
  return _internal_hv_errors_size();
}
inline void PrimaryFenice::clear_hv_errors() {
  hv_errors_.Clear();
}
inline ::primary::HvErrors* PrimaryFenice::mutable_hv_errors(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_errors)
  return hv_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvErrors >*
PrimaryFenice::mutable_hv_errors() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_errors)
  return &hv_errors_;
}
inline const ::primary::HvErrors& PrimaryFenice::_internal_hv_errors(int index) const {
  return hv_errors_.Get(index);
}
inline const ::primary::HvErrors& PrimaryFenice::hv_errors(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_errors)
  return _internal_hv_errors(index);
}
inline ::primary::HvErrors* PrimaryFenice::_internal_add_hv_errors() {
  return hv_errors_.Add();
}
inline ::primary::HvErrors* PrimaryFenice::add_hv_errors() {
  ::primary::HvErrors* _add = _internal_add_hv_errors();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_errors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvErrors >&
PrimaryFenice::hv_errors() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_errors)
  return hv_errors_;
}

// repeated .primary.TsStatus ts_status = 18;
inline int PrimaryFenice::_internal_ts_status_size() const {
  return ts_status_.size();
}
inline int PrimaryFenice::ts_status_size() const {
  return _internal_ts_status_size();
}
inline void PrimaryFenice::clear_ts_status() {
  ts_status_.Clear();
}
inline ::primary::TsStatus* PrimaryFenice::mutable_ts_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.ts_status)
  return ts_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TsStatus >*
PrimaryFenice::mutable_ts_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.ts_status)
  return &ts_status_;
}
inline const ::primary::TsStatus& PrimaryFenice::_internal_ts_status(int index) const {
  return ts_status_.Get(index);
}
inline const ::primary::TsStatus& PrimaryFenice::ts_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.ts_status)
  return _internal_ts_status(index);
}
inline ::primary::TsStatus* PrimaryFenice::_internal_add_ts_status() {
  return ts_status_.Add();
}
inline ::primary::TsStatus* PrimaryFenice::add_ts_status() {
  ::primary::TsStatus* _add = _internal_add_ts_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.ts_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::TsStatus >&
PrimaryFenice::ts_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.ts_status)
  return ts_status_;
}

// repeated .primary.SetTsStatus set_ts_status = 19;
inline int PrimaryFenice::_internal_set_ts_status_size() const {
  return set_ts_status_.size();
}
inline int PrimaryFenice::set_ts_status_size() const {
  return _internal_set_ts_status_size();
}
inline void PrimaryFenice::clear_set_ts_status() {
  set_ts_status_.Clear();
}
inline ::primary::SetTsStatus* PrimaryFenice::mutable_set_ts_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.set_ts_status)
  return set_ts_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTsStatus >*
PrimaryFenice::mutable_set_ts_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.set_ts_status)
  return &set_ts_status_;
}
inline const ::primary::SetTsStatus& PrimaryFenice::_internal_set_ts_status(int index) const {
  return set_ts_status_.Get(index);
}
inline const ::primary::SetTsStatus& PrimaryFenice::set_ts_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.set_ts_status)
  return _internal_set_ts_status(index);
}
inline ::primary::SetTsStatus* PrimaryFenice::_internal_add_set_ts_status() {
  return set_ts_status_.Add();
}
inline ::primary::SetTsStatus* PrimaryFenice::add_set_ts_status() {
  ::primary::SetTsStatus* _add = _internal_add_set_ts_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.set_ts_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetTsStatus >&
PrimaryFenice::set_ts_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.set_ts_status)
  return set_ts_status_;
}

// repeated .primary.SetCellBalancingStatus set_cell_balancing_status = 20;
inline int PrimaryFenice::_internal_set_cell_balancing_status_size() const {
  return set_cell_balancing_status_.size();
}
inline int PrimaryFenice::set_cell_balancing_status_size() const {
  return _internal_set_cell_balancing_status_size();
}
inline void PrimaryFenice::clear_set_cell_balancing_status() {
  set_cell_balancing_status_.Clear();
}
inline ::primary::SetCellBalancingStatus* PrimaryFenice::mutable_set_cell_balancing_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.set_cell_balancing_status)
  return set_cell_balancing_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCellBalancingStatus >*
PrimaryFenice::mutable_set_cell_balancing_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.set_cell_balancing_status)
  return &set_cell_balancing_status_;
}
inline const ::primary::SetCellBalancingStatus& PrimaryFenice::_internal_set_cell_balancing_status(int index) const {
  return set_cell_balancing_status_.Get(index);
}
inline const ::primary::SetCellBalancingStatus& PrimaryFenice::set_cell_balancing_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.set_cell_balancing_status)
  return _internal_set_cell_balancing_status(index);
}
inline ::primary::SetCellBalancingStatus* PrimaryFenice::_internal_add_set_cell_balancing_status() {
  return set_cell_balancing_status_.Add();
}
inline ::primary::SetCellBalancingStatus* PrimaryFenice::add_set_cell_balancing_status() {
  ::primary::SetCellBalancingStatus* _add = _internal_add_set_cell_balancing_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.set_cell_balancing_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCellBalancingStatus >&
PrimaryFenice::set_cell_balancing_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.set_cell_balancing_status)
  return set_cell_balancing_status_;
}

// repeated .primary.HandcartStatus handcart_status = 21;
inline int PrimaryFenice::_internal_handcart_status_size() const {
  return handcart_status_.size();
}
inline int PrimaryFenice::handcart_status_size() const {
  return _internal_handcart_status_size();
}
inline void PrimaryFenice::clear_handcart_status() {
  handcart_status_.Clear();
}
inline ::primary::HandcartStatus* PrimaryFenice::mutable_handcart_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.handcart_status)
  return handcart_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HandcartStatus >*
PrimaryFenice::mutable_handcart_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.handcart_status)
  return &handcart_status_;
}
inline const ::primary::HandcartStatus& PrimaryFenice::_internal_handcart_status(int index) const {
  return handcart_status_.Get(index);
}
inline const ::primary::HandcartStatus& PrimaryFenice::handcart_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.handcart_status)
  return _internal_handcart_status(index);
}
inline ::primary::HandcartStatus* PrimaryFenice::_internal_add_handcart_status() {
  return handcart_status_.Add();
}
inline ::primary::HandcartStatus* PrimaryFenice::add_handcart_status() {
  ::primary::HandcartStatus* _add = _internal_add_handcart_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.handcart_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HandcartStatus >&
PrimaryFenice::handcart_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.handcart_status)
  return handcart_status_;
}

// repeated .primary.SteerStatus steer_status = 22;
inline int PrimaryFenice::_internal_steer_status_size() const {
  return steer_status_.size();
}
inline int PrimaryFenice::steer_status_size() const {
  return _internal_steer_status_size();
}
inline void PrimaryFenice::clear_steer_status() {
  steer_status_.Clear();
}
inline ::primary::SteerStatus* PrimaryFenice::mutable_steer_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.steer_status)
  return steer_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerStatus >*
PrimaryFenice::mutable_steer_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.steer_status)
  return &steer_status_;
}
inline const ::primary::SteerStatus& PrimaryFenice::_internal_steer_status(int index) const {
  return steer_status_.Get(index);
}
inline const ::primary::SteerStatus& PrimaryFenice::steer_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.steer_status)
  return _internal_steer_status(index);
}
inline ::primary::SteerStatus* PrimaryFenice::_internal_add_steer_status() {
  return steer_status_.Add();
}
inline ::primary::SteerStatus* PrimaryFenice::add_steer_status() {
  ::primary::SteerStatus* _add = _internal_add_steer_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.steer_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SteerStatus >&
PrimaryFenice::steer_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.steer_status)
  return steer_status_;
}

// repeated .primary.SetCarStatus set_car_status = 23;
inline int PrimaryFenice::_internal_set_car_status_size() const {
  return set_car_status_.size();
}
inline int PrimaryFenice::set_car_status_size() const {
  return _internal_set_car_status_size();
}
inline void PrimaryFenice::clear_set_car_status() {
  set_car_status_.Clear();
}
inline ::primary::SetCarStatus* PrimaryFenice::mutable_set_car_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.set_car_status)
  return set_car_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCarStatus >*
PrimaryFenice::mutable_set_car_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.set_car_status)
  return &set_car_status_;
}
inline const ::primary::SetCarStatus& PrimaryFenice::_internal_set_car_status(int index) const {
  return set_car_status_.Get(index);
}
inline const ::primary::SetCarStatus& PrimaryFenice::set_car_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.set_car_status)
  return _internal_set_car_status(index);
}
inline ::primary::SetCarStatus* PrimaryFenice::_internal_add_set_car_status() {
  return set_car_status_.Add();
}
inline ::primary::SetCarStatus* PrimaryFenice::add_set_car_status() {
  ::primary::SetCarStatus* _add = _internal_add_set_car_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.set_car_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetCarStatus >&
PrimaryFenice::set_car_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.set_car_status)
  return set_car_status_;
}

// repeated .primary.SetPedalsRange set_pedals_range = 24;
inline int PrimaryFenice::_internal_set_pedals_range_size() const {
  return set_pedals_range_.size();
}
inline int PrimaryFenice::set_pedals_range_size() const {
  return _internal_set_pedals_range_size();
}
inline void PrimaryFenice::clear_set_pedals_range() {
  set_pedals_range_.Clear();
}
inline ::primary::SetPedalsRange* PrimaryFenice::mutable_set_pedals_range(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.set_pedals_range)
  return set_pedals_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetPedalsRange >*
PrimaryFenice::mutable_set_pedals_range() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.set_pedals_range)
  return &set_pedals_range_;
}
inline const ::primary::SetPedalsRange& PrimaryFenice::_internal_set_pedals_range(int index) const {
  return set_pedals_range_.Get(index);
}
inline const ::primary::SetPedalsRange& PrimaryFenice::set_pedals_range(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.set_pedals_range)
  return _internal_set_pedals_range(index);
}
inline ::primary::SetPedalsRange* PrimaryFenice::_internal_add_set_pedals_range() {
  return set_pedals_range_.Add();
}
inline ::primary::SetPedalsRange* PrimaryFenice::add_set_pedals_range() {
  ::primary::SetPedalsRange* _add = _internal_add_set_pedals_range();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.set_pedals_range)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::SetPedalsRange >&
PrimaryFenice::set_pedals_range() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.set_pedals_range)
  return set_pedals_range_;
}

// repeated .primary.LvCurrent lv_current = 25;
inline int PrimaryFenice::_internal_lv_current_size() const {
  return lv_current_.size();
}
inline int PrimaryFenice::lv_current_size() const {
  return _internal_lv_current_size();
}
inline void PrimaryFenice::clear_lv_current() {
  lv_current_.Clear();
}
inline ::primary::LvCurrent* PrimaryFenice::mutable_lv_current(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.lv_current)
  return lv_current_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvCurrent >*
PrimaryFenice::mutable_lv_current() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.lv_current)
  return &lv_current_;
}
inline const ::primary::LvCurrent& PrimaryFenice::_internal_lv_current(int index) const {
  return lv_current_.Get(index);
}
inline const ::primary::LvCurrent& PrimaryFenice::lv_current(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.lv_current)
  return _internal_lv_current(index);
}
inline ::primary::LvCurrent* PrimaryFenice::_internal_add_lv_current() {
  return lv_current_.Add();
}
inline ::primary::LvCurrent* PrimaryFenice::add_lv_current() {
  ::primary::LvCurrent* _add = _internal_add_lv_current();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.lv_current)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvCurrent >&
PrimaryFenice::lv_current() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.lv_current)
  return lv_current_;
}

// repeated .primary.LvVoltage lv_voltage = 26;
inline int PrimaryFenice::_internal_lv_voltage_size() const {
  return lv_voltage_.size();
}
inline int PrimaryFenice::lv_voltage_size() const {
  return _internal_lv_voltage_size();
}
inline void PrimaryFenice::clear_lv_voltage() {
  lv_voltage_.Clear();
}
inline ::primary::LvVoltage* PrimaryFenice::mutable_lv_voltage(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.lv_voltage)
  return lv_voltage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVoltage >*
PrimaryFenice::mutable_lv_voltage() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.lv_voltage)
  return &lv_voltage_;
}
inline const ::primary::LvVoltage& PrimaryFenice::_internal_lv_voltage(int index) const {
  return lv_voltage_.Get(index);
}
inline const ::primary::LvVoltage& PrimaryFenice::lv_voltage(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.lv_voltage)
  return _internal_lv_voltage(index);
}
inline ::primary::LvVoltage* PrimaryFenice::_internal_add_lv_voltage() {
  return lv_voltage_.Add();
}
inline ::primary::LvVoltage* PrimaryFenice::add_lv_voltage() {
  ::primary::LvVoltage* _add = _internal_add_lv_voltage();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.lv_voltage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvVoltage >&
PrimaryFenice::lv_voltage() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.lv_voltage)
  return lv_voltage_;
}

// repeated .primary.LvTemperature lv_temperature = 27;
inline int PrimaryFenice::_internal_lv_temperature_size() const {
  return lv_temperature_.size();
}
inline int PrimaryFenice::lv_temperature_size() const {
  return _internal_lv_temperature_size();
}
inline void PrimaryFenice::clear_lv_temperature() {
  lv_temperature_.Clear();
}
inline ::primary::LvTemperature* PrimaryFenice::mutable_lv_temperature(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.lv_temperature)
  return lv_temperature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvTemperature >*
PrimaryFenice::mutable_lv_temperature() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.lv_temperature)
  return &lv_temperature_;
}
inline const ::primary::LvTemperature& PrimaryFenice::_internal_lv_temperature(int index) const {
  return lv_temperature_.Get(index);
}
inline const ::primary::LvTemperature& PrimaryFenice::lv_temperature(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.lv_temperature)
  return _internal_lv_temperature(index);
}
inline ::primary::LvTemperature* PrimaryFenice::_internal_add_lv_temperature() {
  return lv_temperature_.Add();
}
inline ::primary::LvTemperature* PrimaryFenice::add_lv_temperature() {
  ::primary::LvTemperature* _add = _internal_add_lv_temperature();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.lv_temperature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::LvTemperature >&
PrimaryFenice::lv_temperature() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.lv_temperature)
  return lv_temperature_;
}

// repeated .primary.CoolingStatus cooling_status = 28;
inline int PrimaryFenice::_internal_cooling_status_size() const {
  return cooling_status_.size();
}
inline int PrimaryFenice::cooling_status_size() const {
  return _internal_cooling_status_size();
}
inline void PrimaryFenice::clear_cooling_status() {
  cooling_status_.Clear();
}
inline ::primary::CoolingStatus* PrimaryFenice::mutable_cooling_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.cooling_status)
  return cooling_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CoolingStatus >*
PrimaryFenice::mutable_cooling_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.cooling_status)
  return &cooling_status_;
}
inline const ::primary::CoolingStatus& PrimaryFenice::_internal_cooling_status(int index) const {
  return cooling_status_.Get(index);
}
inline const ::primary::CoolingStatus& PrimaryFenice::cooling_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.cooling_status)
  return _internal_cooling_status(index);
}
inline ::primary::CoolingStatus* PrimaryFenice::_internal_add_cooling_status() {
  return cooling_status_.Add();
}
inline ::primary::CoolingStatus* PrimaryFenice::add_cooling_status() {
  ::primary::CoolingStatus* _add = _internal_add_cooling_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.cooling_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::CoolingStatus >&
PrimaryFenice::cooling_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.cooling_status)
  return cooling_status_;
}

// repeated .primary.HvCellsVoltage hv_cells_voltage = 29;
inline int PrimaryFenice::_internal_hv_cells_voltage_size() const {
  return hv_cells_voltage_.size();
}
inline int PrimaryFenice::hv_cells_voltage_size() const {
  return _internal_hv_cells_voltage_size();
}
inline void PrimaryFenice::clear_hv_cells_voltage() {
  hv_cells_voltage_.Clear();
}
inline ::primary::HvCellsVoltage* PrimaryFenice::mutable_hv_cells_voltage(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_cells_voltage)
  return hv_cells_voltage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsVoltage >*
PrimaryFenice::mutable_hv_cells_voltage() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_cells_voltage)
  return &hv_cells_voltage_;
}
inline const ::primary::HvCellsVoltage& PrimaryFenice::_internal_hv_cells_voltage(int index) const {
  return hv_cells_voltage_.Get(index);
}
inline const ::primary::HvCellsVoltage& PrimaryFenice::hv_cells_voltage(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_cells_voltage)
  return _internal_hv_cells_voltage(index);
}
inline ::primary::HvCellsVoltage* PrimaryFenice::_internal_add_hv_cells_voltage() {
  return hv_cells_voltage_.Add();
}
inline ::primary::HvCellsVoltage* PrimaryFenice::add_hv_cells_voltage() {
  ::primary::HvCellsVoltage* _add = _internal_add_hv_cells_voltage();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_cells_voltage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsVoltage >&
PrimaryFenice::hv_cells_voltage() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_cells_voltage)
  return hv_cells_voltage_;
}

// repeated .primary.HvCellsTemp hv_cells_temp = 30;
inline int PrimaryFenice::_internal_hv_cells_temp_size() const {
  return hv_cells_temp_.size();
}
inline int PrimaryFenice::hv_cells_temp_size() const {
  return _internal_hv_cells_temp_size();
}
inline void PrimaryFenice::clear_hv_cells_temp() {
  hv_cells_temp_.Clear();
}
inline ::primary::HvCellsTemp* PrimaryFenice::mutable_hv_cells_temp(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_cells_temp)
  return hv_cells_temp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsTemp >*
PrimaryFenice::mutable_hv_cells_temp() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_cells_temp)
  return &hv_cells_temp_;
}
inline const ::primary::HvCellsTemp& PrimaryFenice::_internal_hv_cells_temp(int index) const {
  return hv_cells_temp_.Get(index);
}
inline const ::primary::HvCellsTemp& PrimaryFenice::hv_cells_temp(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_cells_temp)
  return _internal_hv_cells_temp(index);
}
inline ::primary::HvCellsTemp* PrimaryFenice::_internal_add_hv_cells_temp() {
  return hv_cells_temp_.Add();
}
inline ::primary::HvCellsTemp* PrimaryFenice::add_hv_cells_temp() {
  ::primary::HvCellsTemp* _add = _internal_add_hv_cells_temp();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_cells_temp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellsTemp >&
PrimaryFenice::hv_cells_temp() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_cells_temp)
  return hv_cells_temp_;
}

// repeated .primary.HvCellBalancingStatus hv_cell_balancing_status = 31;
inline int PrimaryFenice::_internal_hv_cell_balancing_status_size() const {
  return hv_cell_balancing_status_.size();
}
inline int PrimaryFenice::hv_cell_balancing_status_size() const {
  return _internal_hv_cell_balancing_status_size();
}
inline void PrimaryFenice::clear_hv_cell_balancing_status() {
  hv_cell_balancing_status_.Clear();
}
inline ::primary::HvCellBalancingStatus* PrimaryFenice::mutable_hv_cell_balancing_status(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.hv_cell_balancing_status)
  return hv_cell_balancing_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellBalancingStatus >*
PrimaryFenice::mutable_hv_cell_balancing_status() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.hv_cell_balancing_status)
  return &hv_cell_balancing_status_;
}
inline const ::primary::HvCellBalancingStatus& PrimaryFenice::_internal_hv_cell_balancing_status(int index) const {
  return hv_cell_balancing_status_.Get(index);
}
inline const ::primary::HvCellBalancingStatus& PrimaryFenice::hv_cell_balancing_status(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.hv_cell_balancing_status)
  return _internal_hv_cell_balancing_status(index);
}
inline ::primary::HvCellBalancingStatus* PrimaryFenice::_internal_add_hv_cell_balancing_status() {
  return hv_cell_balancing_status_.Add();
}
inline ::primary::HvCellBalancingStatus* PrimaryFenice::add_hv_cell_balancing_status() {
  ::primary::HvCellBalancingStatus* _add = _internal_add_hv_cell_balancing_status();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.hv_cell_balancing_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::HvCellBalancingStatus >&
PrimaryFenice::hv_cell_balancing_status() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.hv_cell_balancing_status)
  return hv_cell_balancing_status_;
}

// repeated .primary.InvLSetTorque inv_l_set_torque = 32;
inline int PrimaryFenice::_internal_inv_l_set_torque_size() const {
  return inv_l_set_torque_.size();
}
inline int PrimaryFenice::inv_l_set_torque_size() const {
  return _internal_inv_l_set_torque_size();
}
inline void PrimaryFenice::clear_inv_l_set_torque() {
  inv_l_set_torque_.Clear();
}
inline ::primary::InvLSetTorque* PrimaryFenice::mutable_inv_l_set_torque(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.inv_l_set_torque)
  return inv_l_set_torque_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLSetTorque >*
PrimaryFenice::mutable_inv_l_set_torque() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.inv_l_set_torque)
  return &inv_l_set_torque_;
}
inline const ::primary::InvLSetTorque& PrimaryFenice::_internal_inv_l_set_torque(int index) const {
  return inv_l_set_torque_.Get(index);
}
inline const ::primary::InvLSetTorque& PrimaryFenice::inv_l_set_torque(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.inv_l_set_torque)
  return _internal_inv_l_set_torque(index);
}
inline ::primary::InvLSetTorque* PrimaryFenice::_internal_add_inv_l_set_torque() {
  return inv_l_set_torque_.Add();
}
inline ::primary::InvLSetTorque* PrimaryFenice::add_inv_l_set_torque() {
  ::primary::InvLSetTorque* _add = _internal_add_inv_l_set_torque();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.inv_l_set_torque)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLSetTorque >&
PrimaryFenice::inv_l_set_torque() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.inv_l_set_torque)
  return inv_l_set_torque_;
}

// repeated .primary.InvLResponse inv_l_response = 33;
inline int PrimaryFenice::_internal_inv_l_response_size() const {
  return inv_l_response_.size();
}
inline int PrimaryFenice::inv_l_response_size() const {
  return _internal_inv_l_response_size();
}
inline void PrimaryFenice::clear_inv_l_response() {
  inv_l_response_.Clear();
}
inline ::primary::InvLResponse* PrimaryFenice::mutable_inv_l_response(int index) {
  // @@protoc_insertion_point(field_mutable:primary.PrimaryFenice.inv_l_response)
  return inv_l_response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLResponse >*
PrimaryFenice::mutable_inv_l_response() {
  // @@protoc_insertion_point(field_mutable_list:primary.PrimaryFenice.inv_l_response)
  return &inv_l_response_;
}
inline const ::primary::InvLResponse& PrimaryFenice::_internal_inv_l_response(int index) const {
  return inv_l_response_.Get(index);
}
inline const ::primary::InvLResponse& PrimaryFenice::inv_l_response(int index) const {
  // @@protoc_insertion_point(field_get:primary.PrimaryFenice.inv_l_response)
  return _internal_inv_l_response(index);
}
inline ::primary::InvLResponse* PrimaryFenice::_internal_add_inv_l_response() {
  return inv_l_response_.Add();
}
inline ::primary::InvLResponse* PrimaryFenice::add_inv_l_response() {
  ::primary::InvLResponse* _add = _internal_add_inv_l_response();
  // @@protoc_insertion_point(field_add:primary.PrimaryFenice.inv_l_response)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::primary::InvLResponse >&
PrimaryFenice::inv_l_response() const {
  // @@protoc_insertion_point(field_list:primary.PrimaryFenice.inv_l_response)
  return inv_l_response_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace primary

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::primary::TlmStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::TlmStatusType>() {
  return ::primary::TlmStatusType_descriptor();
}
template <> struct is_proto_enum< ::primary::RaceTypeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::RaceTypeType>() {
  return ::primary::RaceTypeType_descriptor();
}
template <> struct is_proto_enum< ::primary::InverterStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::InverterStatusType>() {
  return ::primary::InverterStatusType_descriptor();
}
template <> struct is_proto_enum< ::primary::CarStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::CarStatusType>() {
  return ::primary::CarStatusType_descriptor();
}
template <> struct is_proto_enum< ::primary::TsStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::TsStatusType>() {
  return ::primary::TsStatusType_descriptor();
}
template <> struct is_proto_enum< ::primary::TsStatusSetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::TsStatusSetType>() {
  return ::primary::TsStatusSetType_descriptor();
}
template <> struct is_proto_enum< ::primary::SetBalancingStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::SetBalancingStatusType>() {
  return ::primary::SetBalancingStatusType_descriptor();
}
template <> struct is_proto_enum< ::primary::TractionControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::TractionControlType>() {
  return ::primary::TractionControlType_descriptor();
}
template <> struct is_proto_enum< ::primary::MapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::MapType>() {
  return ::primary::MapType_descriptor();
}
template <> struct is_proto_enum< ::primary::CarStatusSetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::CarStatusSetType>() {
  return ::primary::CarStatusSetType_descriptor();
}
template <> struct is_proto_enum< ::primary::BoundType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::BoundType>() {
  return ::primary::BoundType_descriptor();
}
template <> struct is_proto_enum< ::primary::PedalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::PedalType>() {
  return ::primary::PedalType_descriptor();
}
template <> struct is_proto_enum< ::primary::BalancingStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::primary::BalancingStatusType>() {
  return ::primary::BalancingStatusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_primary_2eproto
