// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primary.proto

#include "primary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace primary {
PROTOBUF_CONSTEXPR SteerVersion::SteerVersion(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct SteerVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SteerVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SteerVersionDefaultTypeInternal() {}
  union {
    SteerVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SteerVersionDefaultTypeInternal _SteerVersion_default_instance_;
PROTOBUF_CONSTEXPR DasVersion::DasVersion(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct DasVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DasVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DasVersionDefaultTypeInternal() {}
  union {
    DasVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DasVersionDefaultTypeInternal _DasVersion_default_instance_;
PROTOBUF_CONSTEXPR HvVersion::HvVersion(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct HvVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvVersionDefaultTypeInternal() {}
  union {
    HvVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvVersionDefaultTypeInternal _HvVersion_default_instance_;
PROTOBUF_CONSTEXPR LvVersion::LvVersion(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct LvVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LvVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LvVersionDefaultTypeInternal() {}
  union {
    LvVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LvVersionDefaultTypeInternal _LvVersion_default_instance_;
PROTOBUF_CONSTEXPR TlmVersion::TlmVersion(
    ::_pbi::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct TlmVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TlmVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TlmVersionDefaultTypeInternal() {}
  union {
    TlmVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TlmVersionDefaultTypeInternal _TlmVersion_default_instance_;
PROTOBUF_CONSTEXPR Timestamp::Timestamp(
    ::_pbi::ConstantInitialized)
  : timestamp_(0u){}
struct TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDefaultTypeInternal() {}
  union {
    Timestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDefaultTypeInternal _Timestamp_default_instance_;
PROTOBUF_CONSTEXPR SetTlmStatus::SetTlmStatus(
    ::_pbi::ConstantInitialized)
  : tlm_status_set_(0)

  , race_type_(0)

  , driver_(0u)
  , circuit_(0u){}
struct SetTlmStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTlmStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTlmStatusDefaultTypeInternal() {}
  union {
    SetTlmStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTlmStatusDefaultTypeInternal _SetTlmStatus_default_instance_;
PROTOBUF_CONSTEXPR SteerSystemStatus::SteerSystemStatus(
    ::_pbi::ConstantInitialized)
  : soc_temp_(0u){}
struct SteerSystemStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SteerSystemStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SteerSystemStatusDefaultTypeInternal() {}
  union {
    SteerSystemStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SteerSystemStatusDefaultTypeInternal _SteerSystemStatus_default_instance_;
PROTOBUF_CONSTEXPR Marker::Marker(
    ::_pbi::ConstantInitialized){}
struct MarkerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkerDefaultTypeInternal() {}
  union {
    Marker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkerDefaultTypeInternal _Marker_default_instance_;
PROTOBUF_CONSTEXPR TlmStatus::TlmStatus(
    ::_pbi::ConstantInitialized)
  : tlm_status_(0)

  , race_type_(0)

  , driver_(0u)
  , circuit_(0u){}
struct TlmStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TlmStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TlmStatusDefaultTypeInternal() {}
  union {
    TlmStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TlmStatusDefaultTypeInternal _TlmStatus_default_instance_;
PROTOBUF_CONSTEXPR CarStatus::CarStatus(
    ::_pbi::ConstantInitialized)
  : inverter_l_(0)

  , inverter_r_(0)

  , car_status_(0)
{}
struct CarStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarStatusDefaultTypeInternal() {}
  union {
    CarStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarStatusDefaultTypeInternal _CarStatus_default_instance_;
PROTOBUF_CONSTEXPR DasErrors::DasErrors(
    ::_pbi::ConstantInitialized)
  : das_error_(0u){}
struct DasErrorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DasErrorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DasErrorsDefaultTypeInternal() {}
  union {
    DasErrors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DasErrorsDefaultTypeInternal _DasErrors_default_instance_;
PROTOBUF_CONSTEXPR Speed::Speed(
    ::_pbi::ConstantInitialized)
  : encoder_r_(0u)
  , encoder_l_(0u)
  , inverter_r_(0u)
  , inverter_l_(0u){}
struct SpeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedDefaultTypeInternal() {}
  union {
    Speed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedDefaultTypeInternal _Speed_default_instance_;
PROTOBUF_CONSTEXPR HvVoltage::HvVoltage(
    ::_pbi::ConstantInitialized)
  : pack_voltage_(0u)
  , bus_voltage_(0u)
  , max_cell_voltage_(0u)
  , min_cell_voltage_(0u){}
struct HvVoltageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvVoltageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvVoltageDefaultTypeInternal() {}
  union {
    HvVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvVoltageDefaultTypeInternal _HvVoltage_default_instance_;
PROTOBUF_CONSTEXPR HvCurrent::HvCurrent(
    ::_pbi::ConstantInitialized)
  : current_(0u)
  , power_(0){}
struct HvCurrentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvCurrentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvCurrentDefaultTypeInternal() {}
  union {
    HvCurrent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvCurrentDefaultTypeInternal _HvCurrent_default_instance_;
PROTOBUF_CONSTEXPR HvTemp::HvTemp(
    ::_pbi::ConstantInitialized)
  : average_temp_(0u)
  , max_temp_(0u)
  , min_temp_(0u){}
struct HvTempDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvTempDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvTempDefaultTypeInternal() {}
  union {
    HvTemp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvTempDefaultTypeInternal _HvTemp_default_instance_;
PROTOBUF_CONSTEXPR HvErrors::HvErrors(
    ::_pbi::ConstantInitialized)
  : warnings_(0u)
  , errors_(0u){}
struct HvErrorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvErrorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvErrorsDefaultTypeInternal() {}
  union {
    HvErrors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvErrorsDefaultTypeInternal _HvErrors_default_instance_;
PROTOBUF_CONSTEXPR TsStatus::TsStatus(
    ::_pbi::ConstantInitialized)
  : ts_status_(0)
{}
struct TsStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TsStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TsStatusDefaultTypeInternal() {}
  union {
    TsStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TsStatusDefaultTypeInternal _TsStatus_default_instance_;
PROTOBUF_CONSTEXPR SetTsStatus::SetTsStatus(
    ::_pbi::ConstantInitialized)
  : ts_status_set_(0)
{}
struct SetTsStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTsStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTsStatusDefaultTypeInternal() {}
  union {
    SetTsStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTsStatusDefaultTypeInternal _SetTsStatus_default_instance_;
PROTOBUF_CONSTEXPR SetCellBalancingStatus::SetCellBalancingStatus(
    ::_pbi::ConstantInitialized)
  : set_balancing_status_(0)
{}
struct SetCellBalancingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCellBalancingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCellBalancingStatusDefaultTypeInternal() {}
  union {
    SetCellBalancingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCellBalancingStatusDefaultTypeInternal _SetCellBalancingStatus_default_instance_;
PROTOBUF_CONSTEXPR HandcartStatus::HandcartStatus(
    ::_pbi::ConstantInitialized)
  : connected_(false){}
struct HandcartStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandcartStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandcartStatusDefaultTypeInternal() {}
  union {
    HandcartStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandcartStatusDefaultTypeInternal _HandcartStatus_default_instance_;
PROTOBUF_CONSTEXPR SteerStatus::SteerStatus(
    ::_pbi::ConstantInitialized)
  : traction_control_(0)

  , map_(0)
{}
struct SteerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SteerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SteerStatusDefaultTypeInternal() {}
  union {
    SteerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SteerStatusDefaultTypeInternal _SteerStatus_default_instance_;
PROTOBUF_CONSTEXPR SetCarStatus::SetCarStatus(
    ::_pbi::ConstantInitialized)
  : car_status_set_(0)
{}
struct SetCarStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCarStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCarStatusDefaultTypeInternal() {}
  union {
    SetCarStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCarStatusDefaultTypeInternal _SetCarStatus_default_instance_;
PROTOBUF_CONSTEXPR SetPedalsRange::SetPedalsRange(
    ::_pbi::ConstantInitialized)
  : bound_(0)

  , pedal_(0)
{}
struct SetPedalsRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPedalsRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPedalsRangeDefaultTypeInternal() {}
  union {
    SetPedalsRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPedalsRangeDefaultTypeInternal _SetPedalsRange_default_instance_;
PROTOBUF_CONSTEXPR LvCurrent::LvCurrent(
    ::_pbi::ConstantInitialized)
  : current_(0u){}
struct LvCurrentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LvCurrentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LvCurrentDefaultTypeInternal() {}
  union {
    LvCurrent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LvCurrentDefaultTypeInternal _LvCurrent_default_instance_;
PROTOBUF_CONSTEXPR LvVoltage::LvVoltage(
    ::_pbi::ConstantInitialized)
  : total_voltage_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u)
  , voltage_3_(0u)
  , voltage_4_(0u){}
struct LvVoltageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LvVoltageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LvVoltageDefaultTypeInternal() {}
  union {
    LvVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LvVoltageDefaultTypeInternal _LvVoltage_default_instance_;
PROTOBUF_CONSTEXPR LvTemperature::LvTemperature(
    ::_pbi::ConstantInitialized)
  : bp_temperature_(0u)
  , dcdc_temperature_(0u){}
struct LvTemperatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LvTemperatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LvTemperatureDefaultTypeInternal() {}
  union {
    LvTemperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LvTemperatureDefaultTypeInternal _LvTemperature_default_instance_;
PROTOBUF_CONSTEXPR CoolingStatus::CoolingStatus(
    ::_pbi::ConstantInitialized)
  : hv_fan_speed_(0u)
  , lv_fan_speed_(0u)
  , pump_speed_(0u){}
struct CoolingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoolingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoolingStatusDefaultTypeInternal() {}
  union {
    CoolingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoolingStatusDefaultTypeInternal _CoolingStatus_default_instance_;
PROTOBUF_CONSTEXPR HvCellsVoltage::HvCellsVoltage(
    ::_pbi::ConstantInitialized)
  : cell_index_(0u)
  , voltage_0_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u){}
struct HvCellsVoltageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvCellsVoltageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvCellsVoltageDefaultTypeInternal() {}
  union {
    HvCellsVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvCellsVoltageDefaultTypeInternal _HvCellsVoltage_default_instance_;
PROTOBUF_CONSTEXPR HvCellsTemp::HvCellsTemp(
    ::_pbi::ConstantInitialized)
  : cell_index_(0u)
  , temp_0_(0u)
  , temp_1_(0u)
  , temp_2_(0u)
  , temp_3_(0u)
  , temp_4_(0u)
  , temp_5_(0u)
  , temp_6_(0u){}
struct HvCellsTempDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvCellsTempDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvCellsTempDefaultTypeInternal() {}
  union {
    HvCellsTemp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvCellsTempDefaultTypeInternal _HvCellsTemp_default_instance_;
PROTOBUF_CONSTEXPR HvCellBalancingStatus::HvCellBalancingStatus(
    ::_pbi::ConstantInitialized)
  : balancing_status_(0)
{}
struct HvCellBalancingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HvCellBalancingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HvCellBalancingStatusDefaultTypeInternal() {}
  union {
    HvCellBalancingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HvCellBalancingStatusDefaultTypeInternal _HvCellBalancingStatus_default_instance_;
PROTOBUF_CONSTEXPR InvLSetTorque::InvLSetTorque(
    ::_pbi::ConstantInitialized)
  : regid_(0u)
  , lsb_(0u)
  , msb_(0u){}
struct InvLSetTorqueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvLSetTorqueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvLSetTorqueDefaultTypeInternal() {}
  union {
    InvLSetTorque _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvLSetTorqueDefaultTypeInternal _InvLSetTorque_default_instance_;
PROTOBUF_CONSTEXPR InvLResponse::InvLResponse(
    ::_pbi::ConstantInitialized)
  : reg_id_(0u)
  , reg_val_(0u){}
struct InvLResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvLResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvLResponseDefaultTypeInternal() {}
  union {
    InvLResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvLResponseDefaultTypeInternal _InvLResponse_default_instance_;
}  // namespace primary
static ::_pb::Metadata file_level_metadata_primary_2eproto[33];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_primary_2eproto[14];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_primary_2eproto = nullptr;

const uint32_t TableStruct_primary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerVersion, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DasVersion, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVersion, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVersion, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmVersion, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::Timestamp, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, tlm_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::SetTlmStatus, circuit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SteerSystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SteerSystemStatus, soc_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::TlmStatus, circuit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CarStatus, car_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DasErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DasErrors, das_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::Speed, encoder_r_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, encoder_l_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::Speed, inverter_l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, pack_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, bus_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, max_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HvVoltage, min_cell_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, current_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCurrent, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, average_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, max_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HvTemp, min_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, warnings_),
  PROTOBUF_FIELD_OFFSET(::primary::HvErrors, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TsStatus, ts_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetTsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetTsStatus, ts_status_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetCellBalancingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetCellBalancingStatus, set_balancing_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HandcartStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HandcartStatus, connected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, traction_control_),
  PROTOBUF_FIELD_OFFSET(::primary::SteerStatus, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetCarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetCarStatus, car_status_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SetPedalsRange, pedal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvCurrent, current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_3_),
  PROTOBUF_FIELD_OFFSET(::primary::LvVoltage, voltage_4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, bp_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LvTemperature, dcdc_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, hv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, lv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::CoolingStatus, pump_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, cell_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, voltage_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsVoltage, voltage_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, cell_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_3_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_4_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_5_),
  PROTOBUF_FIELD_OFFSET(::primary::HvCellsTemp, temp_6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellBalancingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HvCellBalancingStatus, balancing_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, regid_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, lsb_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLSetTorque, msb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, reg_id_),
  PROTOBUF_FIELD_OFFSET(::primary::InvLResponse, reg_val_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::primary::SteerVersion)},
  { 8, -1, -1, sizeof(::primary::DasVersion)},
  { 16, -1, -1, sizeof(::primary::HvVersion)},
  { 24, -1, -1, sizeof(::primary::LvVersion)},
  { 32, -1, -1, sizeof(::primary::TlmVersion)},
  { 40, -1, -1, sizeof(::primary::Timestamp)},
  { 47, -1, -1, sizeof(::primary::SetTlmStatus)},
  { 57, -1, -1, sizeof(::primary::SteerSystemStatus)},
  { 64, -1, -1, sizeof(::primary::Marker)},
  { 70, -1, -1, sizeof(::primary::TlmStatus)},
  { 80, -1, -1, sizeof(::primary::CarStatus)},
  { 89, -1, -1, sizeof(::primary::DasErrors)},
  { 96, -1, -1, sizeof(::primary::Speed)},
  { 106, -1, -1, sizeof(::primary::HvVoltage)},
  { 116, -1, -1, sizeof(::primary::HvCurrent)},
  { 124, -1, -1, sizeof(::primary::HvTemp)},
  { 133, -1, -1, sizeof(::primary::HvErrors)},
  { 141, -1, -1, sizeof(::primary::TsStatus)},
  { 148, -1, -1, sizeof(::primary::SetTsStatus)},
  { 155, -1, -1, sizeof(::primary::SetCellBalancingStatus)},
  { 162, -1, -1, sizeof(::primary::HandcartStatus)},
  { 169, -1, -1, sizeof(::primary::SteerStatus)},
  { 177, -1, -1, sizeof(::primary::SetCarStatus)},
  { 184, -1, -1, sizeof(::primary::SetPedalsRange)},
  { 192, -1, -1, sizeof(::primary::LvCurrent)},
  { 199, -1, -1, sizeof(::primary::LvVoltage)},
  { 210, -1, -1, sizeof(::primary::LvTemperature)},
  { 218, -1, -1, sizeof(::primary::CoolingStatus)},
  { 227, -1, -1, sizeof(::primary::HvCellsVoltage)},
  { 237, -1, -1, sizeof(::primary::HvCellsTemp)},
  { 251, -1, -1, sizeof(::primary::HvCellBalancingStatus)},
  { 258, -1, -1, sizeof(::primary::InvLSetTorque)},
  { 267, -1, -1, sizeof(::primary::InvLResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::primary::_SteerVersion_default_instance_._instance,
  &::primary::_DasVersion_default_instance_._instance,
  &::primary::_HvVersion_default_instance_._instance,
  &::primary::_LvVersion_default_instance_._instance,
  &::primary::_TlmVersion_default_instance_._instance,
  &::primary::_Timestamp_default_instance_._instance,
  &::primary::_SetTlmStatus_default_instance_._instance,
  &::primary::_SteerSystemStatus_default_instance_._instance,
  &::primary::_Marker_default_instance_._instance,
  &::primary::_TlmStatus_default_instance_._instance,
  &::primary::_CarStatus_default_instance_._instance,
  &::primary::_DasErrors_default_instance_._instance,
  &::primary::_Speed_default_instance_._instance,
  &::primary::_HvVoltage_default_instance_._instance,
  &::primary::_HvCurrent_default_instance_._instance,
  &::primary::_HvTemp_default_instance_._instance,
  &::primary::_HvErrors_default_instance_._instance,
  &::primary::_TsStatus_default_instance_._instance,
  &::primary::_SetTsStatus_default_instance_._instance,
  &::primary::_SetCellBalancingStatus_default_instance_._instance,
  &::primary::_HandcartStatus_default_instance_._instance,
  &::primary::_SteerStatus_default_instance_._instance,
  &::primary::_SetCarStatus_default_instance_._instance,
  &::primary::_SetPedalsRange_default_instance_._instance,
  &::primary::_LvCurrent_default_instance_._instance,
  &::primary::_LvVoltage_default_instance_._instance,
  &::primary::_LvTemperature_default_instance_._instance,
  &::primary::_CoolingStatus_default_instance_._instance,
  &::primary::_HvCellsVoltage_default_instance_._instance,
  &::primary::_HvCellsTemp_default_instance_._instance,
  &::primary::_HvCellBalancingStatus_default_instance_._instance,
  &::primary::_InvLSetTorque_default_instance_._instance,
  &::primary::_InvLResponse_default_instance_._instance,
};

const char descriptor_table_protodef_primary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprimary.proto\022\007primary\"B\n\014SteerVersion"
  "\022\031\n\021component_version\030\001 \001(\r\022\027\n\017cancicd_v"
  "ersion\030\002 \001(\r\"@\n\nDasVersion\022\031\n\021component_"
  "version\030\001 \001(\r\022\027\n\017cancicd_version\030\002 \001(\r\"\?"
  "\n\tHvVersion\022\031\n\021component_version\030\001 \001(\r\022\027"
  "\n\017cancicd_version\030\002 \001(\r\"\?\n\tLvVersion\022\031\n\021"
  "component_version\030\001 \001(\r\022\027\n\017cancicd_versi"
  "on\030\002 \001(\r\"@\n\nTlmVersion\022\031\n\021component_vers"
  "ion\030\001 \001(\r\022\027\n\017cancicd_version\030\002 \001(\r\"\036\n\tTi"
  "mestamp\022\021\n\ttimestamp\030\001 \001(\r\"\214\001\n\014SetTlmSta"
  "tus\0221\n\016tlm_status_set\030\001 \001(\0162\031.primary.Tl"
  "mStatusSetType\022(\n\trace_type\030\002 \001(\0162\025.prim"
  "ary.RaceTypeType\022\016\n\006driver\030\003 \001(\r\022\017\n\007circ"
  "uit\030\004 \001(\r\"%\n\021SteerSystemStatus\022\020\n\010soc_te"
  "mp\030\001 \001(\r\"\010\n\006Marker\"\202\001\n\tTlmStatus\022*\n\ntlm_"
  "status\030\001 \001(\0162\026.primary.TlmStatusType\022(\n\t"
  "race_type\030\002 \001(\0162\025.primary.RaceTypeType\022\016"
  "\n\006driver\030\003 \001(\r\022\017\n\007circuit\030\004 \001(\r\"\231\001\n\tCarS"
  "tatus\022/\n\ninverter_l\030\001 \001(\0162\033.primary.Inve"
  "rterStatusType\022/\n\ninverter_r\030\002 \001(\0162\033.pri"
  "mary.InverterStatusType\022*\n\ncar_status\030\003 "
  "\001(\0162\026.primary.CarStatusType\"\036\n\tDasErrors"
  "\022\021\n\tdas_error\030\001 \001(\r\"U\n\005Speed\022\021\n\tencoder_"
  "r\030\001 \001(\r\022\021\n\tencoder_l\030\002 \001(\r\022\022\n\ninverter_r"
  "\030\003 \001(\r\022\022\n\ninverter_l\030\004 \001(\r\"j\n\tHvVoltage\022"
  "\024\n\014pack_voltage\030\001 \001(\r\022\023\n\013bus_voltage\030\002 \001"
  "(\r\022\030\n\020max_cell_voltage\030\003 \001(\r\022\030\n\020min_cell"
  "_voltage\030\004 \001(\r\"+\n\tHvCurrent\022\017\n\007current\030\001"
  " \001(\r\022\r\n\005power\030\002 \001(\005\"B\n\006HvTemp\022\024\n\014average"
  "_temp\030\001 \001(\r\022\020\n\010max_temp\030\002 \001(\r\022\020\n\010min_tem"
  "p\030\003 \001(\r\",\n\010HvErrors\022\020\n\010warnings\030\001 \001(\r\022\016\n"
  "\006errors\030\002 \001(\r\"4\n\010TsStatus\022(\n\tts_status\030\001"
  " \001(\0162\025.primary.TsStatusType\">\n\013SetTsStat"
  "us\022/\n\rts_status_set\030\001 \001(\0162\030.primary.TsSt"
  "atusSetType\"W\n\026SetCellBalancingStatus\022=\n"
  "\024set_balancing_status\030\001 \001(\0162\037.primary.Se"
  "tBalancingStatusType\"#\n\016HandcartStatus\022\021"
  "\n\tconnected\030\001 \001(\010\"d\n\013SteerStatus\0226\n\020trac"
  "tion_control\030\001 \001(\0162\034.primary.TractionCon"
  "trolType\022\035\n\003map\030\002 \001(\0162\020.primary.MapType\""
  "A\n\014SetCarStatus\0221\n\016car_status_set\030\001 \001(\0162"
  "\031.primary.CarStatusSetType\"V\n\016SetPedalsR"
  "ange\022!\n\005bound\030\001 \001(\0162\022.primary.BoundType\022"
  "!\n\005pedal\030\002 \001(\0162\022.primary.PedalType\"\034\n\tLv"
  "Current\022\017\n\007current\030\001 \001(\r\"n\n\tLvVoltage\022\025\n"
  "\rtotal_voltage\030\001 \001(\r\022\021\n\tvoltage_1\030\002 \001(\r\022"
  "\021\n\tvoltage_2\030\003 \001(\r\022\021\n\tvoltage_3\030\004 \001(\r\022\021\n"
  "\tvoltage_4\030\005 \001(\r\"A\n\rLvTemperature\022\026\n\016bp_"
  "temperature\030\001 \001(\r\022\030\n\020dcdc_temperature\030\002 "
  "\001(\r\"O\n\rCoolingStatus\022\024\n\014hv_fan_speed\030\001 \001"
  "(\r\022\024\n\014lv_fan_speed\030\002 \001(\r\022\022\n\npump_speed\030\003"
  " \001(\r\"]\n\016HvCellsVoltage\022\022\n\ncell_index\030\001 \001"
  "(\r\022\021\n\tvoltage_0\030\002 \001(\r\022\021\n\tvoltage_1\030\003 \001(\r"
  "\022\021\n\tvoltage_2\030\004 \001(\r\"\221\001\n\013HvCellsTemp\022\022\n\nc"
  "ell_index\030\001 \001(\r\022\016\n\006temp_0\030\002 \001(\r\022\016\n\006temp_"
  "1\030\003 \001(\r\022\016\n\006temp_2\030\004 \001(\r\022\016\n\006temp_3\030\005 \001(\r\022"
  "\016\n\006temp_4\030\006 \001(\r\022\016\n\006temp_5\030\007 \001(\r\022\016\n\006temp_"
  "6\030\010 \001(\r\"O\n\025HvCellBalancingStatus\0226\n\020bala"
  "ncing_status\030\001 \001(\0162\034.primary.BalancingSt"
  "atusType\"8\n\rInvLSetTorque\022\r\n\005regid\030\001 \001(\r"
  "\022\013\n\003lsb\030\002 \001(\r\022\013\n\003msb\030\003 \001(\r\"/\n\014InvLRespon"
  "se\022\016\n\006reg_id\030\001 \001(\r\022\017\n\007reg_val\030\002 \001(\r*A\n\020T"
  "lmStatusSetType\022\026\n\022TLM_STATUS_SET_OFF\020\000\022"
  "\025\n\021TLM_STATUS_SET_ON\020\001*s\n\014RaceTypeType\022\032"
  "\n\026RACE_TYPE_ACCELERATION\020\000\022\025\n\021RACE_TYPE_"
  "SKIDPAD\020\001\022\027\n\023RACE_TYPE_AUTOCROSS\020\002\022\027\n\023RA"
  "CE_TYPE_ENDURANCE\020\003*6\n\rTlmStatusType\022\021\n\r"
  "TLM_STATUS_ON\020\000\022\022\n\016TLM_STATUS_OFF\020\001*_\n\022I"
  "nverterStatusType\022\027\n\023INVERTER_STATUS_OFF"
  "\020\000\022\030\n\024INVERTER_STATUS_IDLE\020\001\022\026\n\022INVERTER"
  "_STATUS_ON\020\002*N\n\rCarStatusType\022\023\n\017CAR_STA"
  "TUS_IDLE\020\000\022\024\n\020CAR_STATUS_SETUP\020\001\022\022\n\016CAR_"
  "STATUS_RUN\020\002*a\n\014TsStatusType\022\021\n\rTS_STATU"
  "S_OFF\020\000\022\027\n\023TS_STATUS_PRECHARGE\020\001\022\020\n\014TS_S"
  "TATUS_ON\020\002\022\023\n\017TS_STATUS_FATAL\020\003*>\n\017TsSta"
  "tusSetType\022\025\n\021TS_STATUS_SET_OFF\020\000\022\024\n\020TS_"
  "STATUS_SET_ON\020\001*S\n\026SetBalancingStatusTyp"
  "e\022\034\n\030SET_BALANCING_STATUS_OFF\020\000\022\033\n\027SET_B"
  "ALANCING_STATUS_ON\020\001*\230\001\n\023TractionControl"
  "Type\022\030\n\024TRACTION_CONTROL_OFF\020\000\022!\n\035TRACTI"
  "ON_CONTROL_SLIP_CONTROL\020\001\022%\n!TRACTION_CO"
  "NTROL_TORQUE_VECTORING\020\002\022\035\n\031TRACTION_CON"
  "TROL_COMPLETE\020\003*V\n\007MapType\022\t\n\005MAP_R\020\000\022\013\n"
  "\007MAP_D20\020\001\022\013\n\007MAP_D40\020\002\022\013\n\007MAP_D60\020\003\022\013\n\007"
  "MAP_D80\020\004\022\014\n\010MAP_D100\020\005*C\n\020CarStatusSetT"
  "ype\022\027\n\023CAR_STATUS_SET_IDLE\020\000\022\026\n\022CAR_STAT"
  "US_SET_RUN\020\001*1\n\tBoundType\022\021\n\rBOUND_SET_M"
  "AX\020\000\022\021\n\rBOUND_SET_MIN\020\001*3\n\tPedalType\022\025\n\021"
  "PEDAL_ACCELERATOR\020\000\022\017\n\013PEDAL_BRAKE\020\001*H\n\023"
  "BalancingStatusType\022\030\n\024BALANCING_STATUS_"
  "OFF\020\000\022\027\n\023BALANCING_STATUS_ON\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_primary_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_primary_2eproto = {
    false, false, 3638, descriptor_table_protodef_primary_2eproto,
    "primary.proto",
    &descriptor_table_primary_2eproto_once, nullptr, 0, 33,
    schemas, file_default_instances, TableStruct_primary_2eproto::offsets,
    file_level_metadata_primary_2eproto, file_level_enum_descriptors_primary_2eproto,
    file_level_service_descriptors_primary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_primary_2eproto_getter() {
  return &descriptor_table_primary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_primary_2eproto(&descriptor_table_primary_2eproto);
namespace primary {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TlmStatusSetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[0];
}
bool TlmStatusSetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaceTypeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[1];
}
bool RaceTypeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TlmStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[2];
}
bool TlmStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InverterStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[3];
}
bool InverterStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[4];
}
bool CarStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[5];
}
bool TsStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TsStatusSetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[6];
}
bool TsStatusSetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetBalancingStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[7];
}
bool SetBalancingStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TractionControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[8];
}
bool TractionControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[9];
}
bool MapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CarStatusSetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[10];
}
bool CarStatusSetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[11];
}
bool BoundType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PedalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[12];
}
bool PedalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BalancingStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[13];
}
bool BalancingStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SteerVersion::_Internal {
 public:
};

SteerVersion::SteerVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SteerVersion)
}
SteerVersion::SteerVersion(const SteerVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.SteerVersion)
}

inline void SteerVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

SteerVersion::~SteerVersion() {
  // @@protoc_insertion_point(destructor:primary.SteerVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SteerVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SteerVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteerVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SteerVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteerVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SteerVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SteerVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SteerVersion)
  return target;
}

size_t SteerVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SteerVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SteerVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SteerVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SteerVersion::GetClassData() const { return &_class_data_; }

void SteerVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SteerVersion *>(to)->MergeFrom(
      static_cast<const SteerVersion &>(from));
}


void SteerVersion::MergeFrom(const SteerVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SteerVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SteerVersion::CopyFrom(const SteerVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SteerVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteerVersion::IsInitialized() const {
  return true;
}

void SteerVersion::InternalSwap(SteerVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteerVersion, cancicd_version_)
      + sizeof(SteerVersion::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(SteerVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteerVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[0]);
}

// ===================================================================

class DasVersion::_Internal {
 public:
};

DasVersion::DasVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.DasVersion)
}
DasVersion::DasVersion(const DasVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.DasVersion)
}

inline void DasVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

DasVersion::~DasVersion() {
  // @@protoc_insertion_point(destructor:primary.DasVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DasVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DasVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DasVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DasVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DasVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DasVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DasVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DasVersion)
  return target;
}

size_t DasVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DasVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DasVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DasVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DasVersion::GetClassData() const { return &_class_data_; }

void DasVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DasVersion *>(to)->MergeFrom(
      static_cast<const DasVersion &>(from));
}


void DasVersion::MergeFrom(const DasVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DasVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DasVersion::CopyFrom(const DasVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DasVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DasVersion::IsInitialized() const {
  return true;
}

void DasVersion::InternalSwap(DasVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DasVersion, cancicd_version_)
      + sizeof(DasVersion::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(DasVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DasVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[1]);
}

// ===================================================================

class HvVersion::_Internal {
 public:
};

HvVersion::HvVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvVersion)
}
HvVersion::HvVersion(const HvVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.HvVersion)
}

inline void HvVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

HvVersion::~HvVersion() {
  // @@protoc_insertion_point(destructor:primary.HvVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvVersion)
  return target;
}

size_t HvVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvVersion::GetClassData() const { return &_class_data_; }

void HvVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvVersion *>(to)->MergeFrom(
      static_cast<const HvVersion &>(from));
}


void HvVersion::MergeFrom(const HvVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvVersion::CopyFrom(const HvVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvVersion::IsInitialized() const {
  return true;
}

void HvVersion::InternalSwap(HvVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvVersion, cancicd_version_)
      + sizeof(HvVersion::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(HvVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[2]);
}

// ===================================================================

class LvVersion::_Internal {
 public:
};

LvVersion::LvVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LvVersion)
}
LvVersion::LvVersion(const LvVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.LvVersion)
}

inline void LvVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

LvVersion::~LvVersion() {
  // @@protoc_insertion_point(destructor:primary.LvVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LvVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvVersion)
  return target;
}

size_t LvVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvVersion::GetClassData() const { return &_class_data_; }

void LvVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvVersion *>(to)->MergeFrom(
      static_cast<const LvVersion &>(from));
}


void LvVersion::MergeFrom(const LvVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvVersion::CopyFrom(const LvVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvVersion::IsInitialized() const {
  return true;
}

void LvVersion::InternalSwap(LvVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvVersion, cancicd_version_)
      + sizeof(LvVersion::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(LvVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[3]);
}

// ===================================================================

class TlmVersion::_Internal {
 public:
};

TlmVersion::TlmVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TlmVersion)
}
TlmVersion::TlmVersion(const TlmVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.TlmVersion)
}

inline void TlmVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

TlmVersion::~TlmVersion() {
  // @@protoc_insertion_point(destructor:primary.TlmVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TlmVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TlmVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TlmVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TlmVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TlmVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TlmVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TlmVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TlmVersion)
  return target;
}

size_t TlmVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TlmVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TlmVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TlmVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TlmVersion::GetClassData() const { return &_class_data_; }

void TlmVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TlmVersion *>(to)->MergeFrom(
      static_cast<const TlmVersion &>(from));
}


void TlmVersion::MergeFrom(const TlmVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TlmVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TlmVersion::CopyFrom(const TlmVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TlmVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlmVersion::IsInitialized() const {
  return true;
}

void TlmVersion::InternalSwap(TlmVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TlmVersion, cancicd_version_)
      + sizeof(TlmVersion::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(TlmVersion, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TlmVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[4]);
}

// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.Timestamp)
}

inline void Timestamp::SharedCtor() {
timestamp_ = 0u;
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:primary.Timestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Timestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Timestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Timestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Timestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timestamp::GetClassData() const { return &_class_data_; }

void Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Timestamp *>(to)->MergeFrom(
      static_cast<const Timestamp &>(from));
}


void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[5]);
}

// ===================================================================

class SetTlmStatus::_Internal {
 public:
};

SetTlmStatus::SetTlmStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SetTlmStatus)
}
SetTlmStatus::SetTlmStatus(const SetTlmStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tlm_status_set_, &from.tlm_status_set_,
    static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_set_)) + sizeof(circuit_));
  // @@protoc_insertion_point(copy_constructor:primary.SetTlmStatus)
}

inline void SetTlmStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlm_status_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_set_)) + sizeof(circuit_));
}

SetTlmStatus::~SetTlmStatus() {
  // @@protoc_insertion_point(destructor:primary.SetTlmStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTlmStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTlmStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTlmStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetTlmStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tlm_status_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&circuit_) -
      reinterpret_cast<char*>(&tlm_status_set_)) + sizeof(circuit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTlmStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TlmStatusSetType tlm_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status_set(static_cast<::primary::TlmStatusSetType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.RaceTypeType race_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::RaceTypeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTlmStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetTlmStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TlmStatusSetType tlm_status_set = 1;
  if (this->_internal_tlm_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status_set(), target);
  }

  // .primary.RaceTypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race_type(), target);
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_driver(), target);
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_circuit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetTlmStatus)
  return target;
}

size_t SetTlmStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetTlmStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TlmStatusSetType tlm_status_set = 1;
  if (this->_internal_tlm_status_set() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tlm_status_set());
  }

  // .primary.RaceTypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTlmStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTlmStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTlmStatus::GetClassData() const { return &_class_data_; }

void SetTlmStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTlmStatus *>(to)->MergeFrom(
      static_cast<const SetTlmStatus &>(from));
}


void SetTlmStatus::MergeFrom(const SetTlmStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetTlmStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tlm_status_set() != 0) {
    _internal_set_tlm_status_set(from._internal_tlm_status_set());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTlmStatus::CopyFrom(const SetTlmStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetTlmStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTlmStatus::IsInitialized() const {
  return true;
}

void SetTlmStatus::InternalSwap(SetTlmStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTlmStatus, circuit_)
      + sizeof(SetTlmStatus::circuit_)
      - PROTOBUF_FIELD_OFFSET(SetTlmStatus, tlm_status_set_)>(
          reinterpret_cast<char*>(&tlm_status_set_),
          reinterpret_cast<char*>(&other->tlm_status_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTlmStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[6]);
}

// ===================================================================

class SteerSystemStatus::_Internal {
 public:
};

SteerSystemStatus::SteerSystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SteerSystemStatus)
}
SteerSystemStatus::SteerSystemStatus(const SteerSystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  soc_temp_ = from.soc_temp_;
  // @@protoc_insertion_point(copy_constructor:primary.SteerSystemStatus)
}

inline void SteerSystemStatus::SharedCtor() {
soc_temp_ = 0u;
}

SteerSystemStatus::~SteerSystemStatus() {
  // @@protoc_insertion_point(destructor:primary.SteerSystemStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SteerSystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SteerSystemStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteerSystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SteerSystemStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  soc_temp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteerSystemStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 soc_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          soc_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SteerSystemStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SteerSystemStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soc_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SteerSystemStatus)
  return target;
}

size_t SteerSystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SteerSystemStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_soc_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SteerSystemStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SteerSystemStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SteerSystemStatus::GetClassData() const { return &_class_data_; }

void SteerSystemStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SteerSystemStatus *>(to)->MergeFrom(
      static_cast<const SteerSystemStatus &>(from));
}


void SteerSystemStatus::MergeFrom(const SteerSystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SteerSystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_soc_temp() != 0) {
    _internal_set_soc_temp(from._internal_soc_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SteerSystemStatus::CopyFrom(const SteerSystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SteerSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteerSystemStatus::IsInitialized() const {
  return true;
}

void SteerSystemStatus::InternalSwap(SteerSystemStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(soc_temp_, other->soc_temp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SteerSystemStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[7]);
}

// ===================================================================

class Marker::_Internal {
 public:
};

Marker::Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:primary.Marker)
}
Marker::Marker(const Marker& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:primary.Marker)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Marker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[8]);
}

// ===================================================================

class TlmStatus::_Internal {
 public:
};

TlmStatus::TlmStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TlmStatus)
}
TlmStatus::TlmStatus(const TlmStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tlm_status_, &from.tlm_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(circuit_));
  // @@protoc_insertion_point(copy_constructor:primary.TlmStatus)
}

inline void TlmStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlm_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(circuit_));
}

TlmStatus::~TlmStatus() {
  // @@protoc_insertion_point(destructor:primary.TlmStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TlmStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TlmStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TlmStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TlmStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tlm_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&circuit_) -
      reinterpret_cast<char*>(&tlm_status_)) + sizeof(circuit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TlmStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TlmStatusType tlm_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::TlmStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.RaceTypeType race_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::RaceTypeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TlmStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TlmStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TlmStatusType tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status(), target);
  }

  // .primary.RaceTypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race_type(), target);
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_driver(), target);
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_circuit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TlmStatus)
  return target;
}

size_t TlmStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TlmStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TlmStatusType tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  // .primary.RaceTypeType race_type = 2;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TlmStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TlmStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TlmStatus::GetClassData() const { return &_class_data_; }

void TlmStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TlmStatus *>(to)->MergeFrom(
      static_cast<const TlmStatus &>(from));
}


void TlmStatus::MergeFrom(const TlmStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TlmStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TlmStatus::CopyFrom(const TlmStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TlmStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlmStatus::IsInitialized() const {
  return true;
}

void TlmStatus::InternalSwap(TlmStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TlmStatus, circuit_)
      + sizeof(TlmStatus::circuit_)
      - PROTOBUF_FIELD_OFFSET(TlmStatus, tlm_status_)>(
          reinterpret_cast<char*>(&tlm_status_),
          reinterpret_cast<char*>(&other->tlm_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TlmStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[9]);
}

// ===================================================================

class CarStatus::_Internal {
 public:
};

CarStatus::CarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.CarStatus)
}
CarStatus::CarStatus(const CarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inverter_l_, &from.inverter_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  // @@protoc_insertion_point(copy_constructor:primary.CarStatus)
}

inline void CarStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inverter_l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
}

CarStatus::~CarStatus() {
  // @@protoc_insertion_point(destructor:primary.CarStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CarStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inverter_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_) -
      reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.InverterStatusType inverter_l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_l(static_cast<::primary::InverterStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.InverterStatusType inverter_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_r(static_cast<::primary::InverterStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.CarStatusType car_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status(static_cast<::primary::CarStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CarStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.InverterStatusType inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inverter_l(), target);
  }

  // .primary.InverterStatusType inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_inverter_r(), target);
  }

  // .primary.CarStatusType car_status = 3;
  if (this->_internal_car_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_car_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CarStatus)
  return target;
}

size_t CarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CarStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.InverterStatusType inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_inverter_l());
  }

  // .primary.InverterStatusType inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_inverter_r());
  }

  // .primary.CarStatusType car_status = 3;
  if (this->_internal_car_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_car_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarStatus::GetClassData() const { return &_class_data_; }

void CarStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CarStatus *>(to)->MergeFrom(
      static_cast<const CarStatus &>(from));
}


void CarStatus::MergeFrom(const CarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_car_status() != 0) {
    _internal_set_car_status(from._internal_car_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarStatus::CopyFrom(const CarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarStatus::IsInitialized() const {
  return true;
}

void CarStatus::InternalSwap(CarStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarStatus, car_status_)
      + sizeof(CarStatus::car_status_)
      - PROTOBUF_FIELD_OFFSET(CarStatus, inverter_l_)>(
          reinterpret_cast<char*>(&inverter_l_),
          reinterpret_cast<char*>(&other->inverter_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[10]);
}

// ===================================================================

class DasErrors::_Internal {
 public:
};

DasErrors::DasErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.DasErrors)
}
DasErrors::DasErrors(const DasErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  das_error_ = from.das_error_;
  // @@protoc_insertion_point(copy_constructor:primary.DasErrors)
}

inline void DasErrors::SharedCtor() {
das_error_ = 0u;
}

DasErrors::~DasErrors() {
  // @@protoc_insertion_point(destructor:primary.DasErrors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DasErrors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DasErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DasErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DasErrors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  das_error_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DasErrors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 das_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          das_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DasErrors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DasErrors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 das_error = 1;
  if (this->_internal_das_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_das_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DasErrors)
  return target;
}

size_t DasErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DasErrors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 das_error = 1;
  if (this->_internal_das_error() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_das_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DasErrors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DasErrors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DasErrors::GetClassData() const { return &_class_data_; }

void DasErrors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DasErrors *>(to)->MergeFrom(
      static_cast<const DasErrors &>(from));
}


void DasErrors::MergeFrom(const DasErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DasErrors)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_das_error() != 0) {
    _internal_set_das_error(from._internal_das_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DasErrors::CopyFrom(const DasErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DasErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DasErrors::IsInitialized() const {
  return true;
}

void DasErrors::InternalSwap(DasErrors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(das_error_, other->das_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DasErrors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[11]);
}

// ===================================================================

class Speed::_Internal {
 public:
};

Speed::Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.Speed)
}
Speed::Speed(const Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoder_r_, &from.encoder_r_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverter_l_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(inverter_l_));
  // @@protoc_insertion_point(copy_constructor:primary.Speed)
}

inline void Speed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoder_r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverter_l_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(inverter_l_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:primary.Speed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.Speed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoder_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inverter_l_) -
      reinterpret_cast<char*>(&encoder_r_)) + sizeof(inverter_l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Speed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 encoder_r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          encoder_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 encoder_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          encoder_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          inverter_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          inverter_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Speed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.Speed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_encoder_r(), target);
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_encoder_l(), target);
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inverter_r(), target);
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_inverter_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.Speed)
  return target;
}

size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.Speed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_r());
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_l());
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_r());
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_l());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Speed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Speed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Speed::GetClassData() const { return &_class_data_; }

void Speed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Speed *>(to)->MergeFrom(
      static_cast<const Speed &>(from));
}


void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encoder_r() != 0) {
    _internal_set_encoder_r(from._internal_encoder_r());
  }
  if (from._internal_encoder_l() != 0) {
    _internal_set_encoder_l(from._internal_encoder_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  return true;
}

void Speed::InternalSwap(Speed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Speed, inverter_l_)
      + sizeof(Speed::inverter_l_)
      - PROTOBUF_FIELD_OFFSET(Speed, encoder_r_)>(
          reinterpret_cast<char*>(&encoder_r_),
          reinterpret_cast<char*>(&other->encoder_r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Speed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[12]);
}

// ===================================================================

class HvVoltage::_Internal {
 public:
};

HvVoltage::HvVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvVoltage)
}
HvVoltage::HvVoltage(const HvVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pack_voltage_, &from.pack_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_cell_voltage_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(min_cell_voltage_));
  // @@protoc_insertion_point(copy_constructor:primary.HvVoltage)
}

inline void HvVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pack_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_cell_voltage_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(min_cell_voltage_));
}

HvVoltage::~HvVoltage() {
  // @@protoc_insertion_point(destructor:primary.HvVoltage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pack_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_cell_voltage_) -
      reinterpret_cast<char*>(&pack_voltage_)) + sizeof(min_cell_voltage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvVoltage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pack_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pack_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bus_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bus_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_cell_voltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_cell_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          min_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pack_voltage(), target);
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bus_voltage(), target);
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_cell_voltage(), target);
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_cell_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvVoltage)
  return target;
}

size_t HvVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pack_voltage());
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_voltage());
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_cell_voltage());
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_cell_voltage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvVoltage::GetClassData() const { return &_class_data_; }

void HvVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvVoltage *>(to)->MergeFrom(
      static_cast<const HvVoltage &>(from));
}


void HvVoltage::MergeFrom(const HvVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pack_voltage() != 0) {
    _internal_set_pack_voltage(from._internal_pack_voltage());
  }
  if (from._internal_bus_voltage() != 0) {
    _internal_set_bus_voltage(from._internal_bus_voltage());
  }
  if (from._internal_max_cell_voltage() != 0) {
    _internal_set_max_cell_voltage(from._internal_max_cell_voltage());
  }
  if (from._internal_min_cell_voltage() != 0) {
    _internal_set_min_cell_voltage(from._internal_min_cell_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvVoltage::CopyFrom(const HvVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvVoltage::IsInitialized() const {
  return true;
}

void HvVoltage::InternalSwap(HvVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvVoltage, min_cell_voltage_)
      + sizeof(HvVoltage::min_cell_voltage_)
      - PROTOBUF_FIELD_OFFSET(HvVoltage, pack_voltage_)>(
          reinterpret_cast<char*>(&pack_voltage_),
          reinterpret_cast<char*>(&other->pack_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvVoltage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[13]);
}

// ===================================================================

class HvCurrent::_Internal {
 public:
};

HvCurrent::HvCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvCurrent)
}
HvCurrent::HvCurrent(const HvCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&current_)) + sizeof(power_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCurrent)
}

inline void HvCurrent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&current_)) + sizeof(power_));
}

HvCurrent::~HvCurrent() {
  // @@protoc_insertion_point(destructor:primary.HvCurrent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvCurrent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCurrent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&current_)) + sizeof(power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCurrent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCurrent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCurrent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // int32 power = 2;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCurrent)
  return target;
}

size_t HvCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCurrent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  // int32 power = 2;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCurrent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCurrent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCurrent::GetClassData() const { return &_class_data_; }

void HvCurrent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCurrent *>(to)->MergeFrom(
      static_cast<const HvCurrent &>(from));
}


void HvCurrent::MergeFrom(const HvCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCurrent::CopyFrom(const HvCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCurrent::IsInitialized() const {
  return true;
}

void HvCurrent::InternalSwap(HvCurrent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCurrent, power_)
      + sizeof(HvCurrent::power_)
      - PROTOBUF_FIELD_OFFSET(HvCurrent, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCurrent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[14]);
}

// ===================================================================

class HvTemp::_Internal {
 public:
};

HvTemp::HvTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvTemp)
}
HvTemp::HvTemp(const HvTemp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_temp_, &from.average_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  // @@protoc_insertion_point(copy_constructor:primary.HvTemp)
}

inline void HvTemp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_temp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
}

HvTemp::~HvTemp() {
  // @@protoc_insertion_point(destructor:primary.HvTemp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvTemp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvTemp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvTemp::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvTemp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temp_) -
      reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvTemp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 average_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          average_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvTemp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvTemp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_temp(), target);
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_temp(), target);
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvTemp)
  return target;
}

size_t HvTemp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvTemp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_temp());
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_temp());
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvTemp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvTemp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvTemp::GetClassData() const { return &_class_data_; }

void HvTemp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvTemp *>(to)->MergeFrom(
      static_cast<const HvTemp &>(from));
}


void HvTemp::MergeFrom(const HvTemp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvTemp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average_temp() != 0) {
    _internal_set_average_temp(from._internal_average_temp());
  }
  if (from._internal_max_temp() != 0) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._internal_min_temp() != 0) {
    _internal_set_min_temp(from._internal_min_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvTemp::CopyFrom(const HvTemp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvTemp::IsInitialized() const {
  return true;
}

void HvTemp::InternalSwap(HvTemp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvTemp, min_temp_)
      + sizeof(HvTemp::min_temp_)
      - PROTOBUF_FIELD_OFFSET(HvTemp, average_temp_)>(
          reinterpret_cast<char*>(&average_temp_),
          reinterpret_cast<char*>(&other->average_temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvTemp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[15]);
}

// ===================================================================

class HvErrors::_Internal {
 public:
};

HvErrors::HvErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvErrors)
}
HvErrors::HvErrors(const HvErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warnings_, &from.warnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:primary.HvErrors)
}

inline void HvErrors::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&warnings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(errors_));
}

HvErrors::~HvErrors() {
  // @@protoc_insertion_point(destructor:primary.HvErrors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvErrors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvErrors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(errors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvErrors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 warnings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvErrors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvErrors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warnings(), target);
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvErrors)
  return target;
}

size_t HvErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvErrors)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_warnings());
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvErrors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvErrors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvErrors::GetClassData() const { return &_class_data_; }

void HvErrors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvErrors *>(to)->MergeFrom(
      static_cast<const HvErrors &>(from));
}


void HvErrors::MergeFrom(const HvErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvErrors)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_warnings() != 0) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvErrors::CopyFrom(const HvErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvErrors::IsInitialized() const {
  return true;
}

void HvErrors::InternalSwap(HvErrors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvErrors, errors_)
      + sizeof(HvErrors::errors_)
      - PROTOBUF_FIELD_OFFSET(HvErrors, warnings_)>(
          reinterpret_cast<char*>(&warnings_),
          reinterpret_cast<char*>(&other->warnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvErrors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[16]);
}

// ===================================================================

class TsStatus::_Internal {
 public:
};

TsStatus::TsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.TsStatus)
}
TsStatus::TsStatus(const TsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_status_ = from.ts_status_;
  // @@protoc_insertion_point(copy_constructor:primary.TsStatus)
}

inline void TsStatus::SharedCtor() {
ts_status_ = 0;
}

TsStatus::~TsStatus() {
  // @@protoc_insertion_point(destructor:primary.TsStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TsStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TsStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TsStatusType ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::TsStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TsStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TsStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsStatusType ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TsStatus)
  return target;
}

size_t TsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TsStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TsStatusType ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TsStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TsStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TsStatus::GetClassData() const { return &_class_data_; }

void TsStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TsStatus *>(to)->MergeFrom(
      static_cast<const TsStatus &>(from));
}


void TsStatus::MergeFrom(const TsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TsStatus::CopyFrom(const TsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsStatus::IsInitialized() const {
  return true;
}

void TsStatus::InternalSwap(TsStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ts_status_, other->ts_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TsStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[17]);
}

// ===================================================================

class SetTsStatus::_Internal {
 public:
};

SetTsStatus::SetTsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SetTsStatus)
}
SetTsStatus::SetTsStatus(const SetTsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_status_set_ = from.ts_status_set_;
  // @@protoc_insertion_point(copy_constructor:primary.SetTsStatus)
}

inline void SetTsStatus::SharedCtor() {
ts_status_set_ = 0;
}

SetTsStatus::~SetTsStatus() {
  // @@protoc_insertion_point(destructor:primary.SetTsStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetTsStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_status_set_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTsStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TsStatusSetType ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::TsStatusSetType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTsStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetTsStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TsStatusSetType ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetTsStatus)
  return target;
}

size_t SetTsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetTsStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TsStatusSetType ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTsStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTsStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTsStatus::GetClassData() const { return &_class_data_; }

void SetTsStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTsStatus *>(to)->MergeFrom(
      static_cast<const SetTsStatus &>(from));
}


void SetTsStatus::MergeFrom(const SetTsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetTsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTsStatus::CopyFrom(const SetTsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetTsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTsStatus::IsInitialized() const {
  return true;
}

void SetTsStatus::InternalSwap(SetTsStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ts_status_set_, other->ts_status_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTsStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[18]);
}

// ===================================================================

class SetCellBalancingStatus::_Internal {
 public:
};

SetCellBalancingStatus::SetCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SetCellBalancingStatus)
}
SetCellBalancingStatus::SetCellBalancingStatus(const SetCellBalancingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_balancing_status_ = from.set_balancing_status_;
  // @@protoc_insertion_point(copy_constructor:primary.SetCellBalancingStatus)
}

inline void SetCellBalancingStatus::SharedCtor() {
set_balancing_status_ = 0;
}

SetCellBalancingStatus::~SetCellBalancingStatus() {
  // @@protoc_insertion_point(destructor:primary.SetCellBalancingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCellBalancingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetCellBalancingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCellBalancingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_balancing_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCellBalancingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.SetBalancingStatusType set_balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_balancing_status(static_cast<::primary::SetBalancingStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetCellBalancingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.SetBalancingStatusType set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_set_balancing_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetCellBalancingStatus)
  return target;
}

size_t SetCellBalancingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetCellBalancingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.SetBalancingStatusType set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_set_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCellBalancingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCellBalancingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCellBalancingStatus::GetClassData() const { return &_class_data_; }

void SetCellBalancingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetCellBalancingStatus *>(to)->MergeFrom(
      static_cast<const SetCellBalancingStatus &>(from));
}


void SetCellBalancingStatus::MergeFrom(const SetCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetCellBalancingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_set_balancing_status() != 0) {
    _internal_set_set_balancing_status(from._internal_set_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCellBalancingStatus::CopyFrom(const SetCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetCellBalancingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCellBalancingStatus::IsInitialized() const {
  return true;
}

void SetCellBalancingStatus::InternalSwap(SetCellBalancingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(set_balancing_status_, other->set_balancing_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCellBalancingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[19]);
}

// ===================================================================

class HandcartStatus::_Internal {
 public:
};

HandcartStatus::HandcartStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HandcartStatus)
}
HandcartStatus::HandcartStatus(const HandcartStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connected_ = from.connected_;
  // @@protoc_insertion_point(copy_constructor:primary.HandcartStatus)
}

inline void HandcartStatus::SharedCtor() {
connected_ = false;
}

HandcartStatus::~HandcartStatus() {
  // @@protoc_insertion_point(destructor:primary.HandcartStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandcartStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HandcartStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HandcartStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HandcartStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandcartStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandcartStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HandcartStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HandcartStatus)
  return target;
}

size_t HandcartStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HandcartStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandcartStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HandcartStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandcartStatus::GetClassData() const { return &_class_data_; }

void HandcartStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HandcartStatus *>(to)->MergeFrom(
      static_cast<const HandcartStatus &>(from));
}


void HandcartStatus::MergeFrom(const HandcartStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HandcartStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandcartStatus::CopyFrom(const HandcartStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HandcartStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandcartStatus::IsInitialized() const {
  return true;
}

void HandcartStatus::InternalSwap(HandcartStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(connected_, other->connected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandcartStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[20]);
}

// ===================================================================

class SteerStatus::_Internal {
 public:
};

SteerStatus::SteerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SteerStatus)
}
SteerStatus::SteerStatus(const SteerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&traction_control_, &from.traction_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_) -
    reinterpret_cast<char*>(&traction_control_)) + sizeof(map_));
  // @@protoc_insertion_point(copy_constructor:primary.SteerStatus)
}

inline void SteerStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&traction_control_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_) -
    reinterpret_cast<char*>(&traction_control_)) + sizeof(map_));
}

SteerStatus::~SteerStatus() {
  // @@protoc_insertion_point(destructor:primary.SteerStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SteerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SteerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SteerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SteerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&traction_control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&traction_control_)) + sizeof(map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SteerStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.TractionControlType traction_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traction_control(static_cast<::primary::TractionControlType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.MapType map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::primary::MapType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SteerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SteerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.TractionControlType traction_control = 1;
  if (this->_internal_traction_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_traction_control(), target);
  }

  // .primary.MapType map = 2;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SteerStatus)
  return target;
}

size_t SteerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SteerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.TractionControlType traction_control = 1;
  if (this->_internal_traction_control() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_traction_control());
  }

  // .primary.MapType map = 2;
  if (this->_internal_map() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_map());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SteerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SteerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SteerStatus::GetClassData() const { return &_class_data_; }

void SteerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SteerStatus *>(to)->MergeFrom(
      static_cast<const SteerStatus &>(from));
}


void SteerStatus::MergeFrom(const SteerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SteerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_traction_control() != 0) {
    _internal_set_traction_control(from._internal_traction_control());
  }
  if (from._internal_map() != 0) {
    _internal_set_map(from._internal_map());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SteerStatus::CopyFrom(const SteerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SteerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteerStatus::IsInitialized() const {
  return true;
}

void SteerStatus::InternalSwap(SteerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SteerStatus, map_)
      + sizeof(SteerStatus::map_)
      - PROTOBUF_FIELD_OFFSET(SteerStatus, traction_control_)>(
          reinterpret_cast<char*>(&traction_control_),
          reinterpret_cast<char*>(&other->traction_control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SteerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[21]);
}

// ===================================================================

class SetCarStatus::_Internal {
 public:
};

SetCarStatus::SetCarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SetCarStatus)
}
SetCarStatus::SetCarStatus(const SetCarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  car_status_set_ = from.car_status_set_;
  // @@protoc_insertion_point(copy_constructor:primary.SetCarStatus)
}

inline void SetCarStatus::SharedCtor() {
car_status_set_ = 0;
}

SetCarStatus::~SetCarStatus() {
  // @@protoc_insertion_point(destructor:primary.SetCarStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetCarStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetCarStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  car_status_set_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCarStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.CarStatusSetType car_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status_set(static_cast<::primary::CarStatusSetType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetCarStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetCarStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.CarStatusSetType car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_status_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetCarStatus)
  return target;
}

size_t SetCarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetCarStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.CarStatusSetType car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_car_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCarStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCarStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCarStatus::GetClassData() const { return &_class_data_; }

void SetCarStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetCarStatus *>(to)->MergeFrom(
      static_cast<const SetCarStatus &>(from));
}


void SetCarStatus::MergeFrom(const SetCarStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetCarStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_car_status_set() != 0) {
    _internal_set_car_status_set(from._internal_car_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCarStatus::CopyFrom(const SetCarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetCarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCarStatus::IsInitialized() const {
  return true;
}

void SetCarStatus::InternalSwap(SetCarStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(car_status_set_, other->car_status_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCarStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[22]);
}

// ===================================================================

class SetPedalsRange::_Internal {
 public:
};

SetPedalsRange::SetPedalsRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.SetPedalsRange)
}
SetPedalsRange::SetPedalsRange(const SetPedalsRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bound_, &from.bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&pedal_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(pedal_));
  // @@protoc_insertion_point(copy_constructor:primary.SetPedalsRange)
}

inline void SetPedalsRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pedal_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(pedal_));
}

SetPedalsRange::~SetPedalsRange() {
  // @@protoc_insertion_point(destructor:primary.SetPedalsRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPedalsRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPedalsRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPedalsRange::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SetPedalsRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pedal_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(pedal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPedalsRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.BoundType bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::BoundType>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.PedalType pedal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pedal(static_cast<::primary::PedalType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPedalsRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SetPedalsRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.BoundType bound = 1;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // .primary.PedalType pedal = 2;
  if (this->_internal_pedal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pedal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SetPedalsRange)
  return target;
}

size_t SetPedalsRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SetPedalsRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.BoundType bound = 1;
  if (this->_internal_bound() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bound());
  }

  // .primary.PedalType pedal = 2;
  if (this->_internal_pedal() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pedal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPedalsRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPedalsRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPedalsRange::GetClassData() const { return &_class_data_; }

void SetPedalsRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPedalsRange *>(to)->MergeFrom(
      static_cast<const SetPedalsRange &>(from));
}


void SetPedalsRange::MergeFrom(const SetPedalsRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SetPedalsRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  if (from._internal_pedal() != 0) {
    _internal_set_pedal(from._internal_pedal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPedalsRange::CopyFrom(const SetPedalsRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SetPedalsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPedalsRange::IsInitialized() const {
  return true;
}

void SetPedalsRange::InternalSwap(SetPedalsRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPedalsRange, pedal_)
      + sizeof(SetPedalsRange::pedal_)
      - PROTOBUF_FIELD_OFFSET(SetPedalsRange, bound_)>(
          reinterpret_cast<char*>(&bound_),
          reinterpret_cast<char*>(&other->bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPedalsRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[23]);
}

// ===================================================================

class LvCurrent::_Internal {
 public:
};

LvCurrent::LvCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LvCurrent)
}
LvCurrent::LvCurrent(const LvCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:primary.LvCurrent)
}

inline void LvCurrent::SharedCtor() {
current_ = 0u;
}

LvCurrent::~LvCurrent() {
  // @@protoc_insertion_point(destructor:primary.LvCurrent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LvCurrent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvCurrent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvCurrent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvCurrent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvCurrent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvCurrent)
  return target;
}

size_t LvCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvCurrent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvCurrent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvCurrent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvCurrent::GetClassData() const { return &_class_data_; }

void LvCurrent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvCurrent *>(to)->MergeFrom(
      static_cast<const LvCurrent &>(from));
}


void LvCurrent::MergeFrom(const LvCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvCurrent::CopyFrom(const LvCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvCurrent::IsInitialized() const {
  return true;
}

void LvCurrent::InternalSwap(LvCurrent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(current_, other->current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LvCurrent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[24]);
}

// ===================================================================

class LvVoltage::_Internal {
 public:
};

LvVoltage::LvVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LvVoltage)
}
LvVoltage::LvVoltage(const LvVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_voltage_, &from.total_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage_4_) -
    reinterpret_cast<char*>(&total_voltage_)) + sizeof(voltage_4_));
  // @@protoc_insertion_point(copy_constructor:primary.LvVoltage)
}

inline void LvVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltage_4_) -
    reinterpret_cast<char*>(&total_voltage_)) + sizeof(voltage_4_));
}

LvVoltage::~LvVoltage() {
  // @@protoc_insertion_point(destructor:primary.LvVoltage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LvVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_4_) -
      reinterpret_cast<char*>(&total_voltage_)) + sizeof(voltage_4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvVoltage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          voltage_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_voltage(), target);
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_2(), target);
  }

  // uint32 voltage_3 = 4;
  if (this->_internal_voltage_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_3(), target);
  }

  // uint32 voltage_4 = 5;
  if (this->_internal_voltage_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_voltage_4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvVoltage)
  return target;
}

size_t LvVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_voltage());
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  // uint32 voltage_3 = 4;
  if (this->_internal_voltage_3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_3());
  }

  // uint32 voltage_4 = 5;
  if (this->_internal_voltage_4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvVoltage::GetClassData() const { return &_class_data_; }

void LvVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvVoltage *>(to)->MergeFrom(
      static_cast<const LvVoltage &>(from));
}


void LvVoltage::MergeFrom(const LvVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_voltage() != 0) {
    _internal_set_total_voltage(from._internal_total_voltage());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._internal_voltage_3() != 0) {
    _internal_set_voltage_3(from._internal_voltage_3());
  }
  if (from._internal_voltage_4() != 0) {
    _internal_set_voltage_4(from._internal_voltage_4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvVoltage::CopyFrom(const LvVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvVoltage::IsInitialized() const {
  return true;
}

void LvVoltage::InternalSwap(LvVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvVoltage, voltage_4_)
      + sizeof(LvVoltage::voltage_4_)
      - PROTOBUF_FIELD_OFFSET(LvVoltage, total_voltage_)>(
          reinterpret_cast<char*>(&total_voltage_),
          reinterpret_cast<char*>(&other->total_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvVoltage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[25]);
}

// ===================================================================

class LvTemperature::_Internal {
 public:
};

LvTemperature::LvTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.LvTemperature)
}
LvTemperature::LvTemperature(const LvTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bp_temperature_, &from.bp_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&dcdc_temperature_) -
    reinterpret_cast<char*>(&bp_temperature_)) + sizeof(dcdc_temperature_));
  // @@protoc_insertion_point(copy_constructor:primary.LvTemperature)
}

inline void LvTemperature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bp_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dcdc_temperature_) -
    reinterpret_cast<char*>(&bp_temperature_)) + sizeof(dcdc_temperature_));
}

LvTemperature::~LvTemperature() {
  // @@protoc_insertion_point(destructor:primary.LvTemperature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LvTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LvTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LvTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LvTemperature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bp_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dcdc_temperature_) -
      reinterpret_cast<char*>(&bp_temperature_)) + sizeof(dcdc_temperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LvTemperature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bp_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bp_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dcdc_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dcdc_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LvTemperature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LvTemperature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bp_temperature = 1;
  if (this->_internal_bp_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bp_temperature(), target);
  }

  // uint32 dcdc_temperature = 2;
  if (this->_internal_dcdc_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dcdc_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LvTemperature)
  return target;
}

size_t LvTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LvTemperature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bp_temperature = 1;
  if (this->_internal_bp_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bp_temperature());
  }

  // uint32 dcdc_temperature = 2;
  if (this->_internal_dcdc_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dcdc_temperature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LvTemperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LvTemperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LvTemperature::GetClassData() const { return &_class_data_; }

void LvTemperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LvTemperature *>(to)->MergeFrom(
      static_cast<const LvTemperature &>(from));
}


void LvTemperature::MergeFrom(const LvTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LvTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bp_temperature() != 0) {
    _internal_set_bp_temperature(from._internal_bp_temperature());
  }
  if (from._internal_dcdc_temperature() != 0) {
    _internal_set_dcdc_temperature(from._internal_dcdc_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LvTemperature::CopyFrom(const LvTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LvTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvTemperature::IsInitialized() const {
  return true;
}

void LvTemperature::InternalSwap(LvTemperature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LvTemperature, dcdc_temperature_)
      + sizeof(LvTemperature::dcdc_temperature_)
      - PROTOBUF_FIELD_OFFSET(LvTemperature, bp_temperature_)>(
          reinterpret_cast<char*>(&bp_temperature_),
          reinterpret_cast<char*>(&other->bp_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LvTemperature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[26]);
}

// ===================================================================

class CoolingStatus::_Internal {
 public:
};

CoolingStatus::CoolingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.CoolingStatus)
}
CoolingStatus::CoolingStatus(const CoolingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hv_fan_speed_, &from.hv_fan_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pump_speed_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
  // @@protoc_insertion_point(copy_constructor:primary.CoolingStatus)
}

inline void CoolingStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hv_fan_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pump_speed_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
}

CoolingStatus::~CoolingStatus() {
  // @@protoc_insertion_point(destructor:primary.CoolingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoolingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoolingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoolingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CoolingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hv_fan_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pump_speed_) -
      reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoolingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hv_fan_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lv_fan_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pump_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pump_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoolingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CoolingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hv_fan_speed(), target);
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lv_fan_speed(), target);
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pump_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CoolingStatus)
  return target;
}

size_t CoolingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CoolingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hv_fan_speed());
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lv_fan_speed());
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pump_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoolingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoolingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoolingStatus::GetClassData() const { return &_class_data_; }

void CoolingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CoolingStatus *>(to)->MergeFrom(
      static_cast<const CoolingStatus &>(from));
}


void CoolingStatus::MergeFrom(const CoolingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CoolingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hv_fan_speed() != 0) {
    _internal_set_hv_fan_speed(from._internal_hv_fan_speed());
  }
  if (from._internal_lv_fan_speed() != 0) {
    _internal_set_lv_fan_speed(from._internal_lv_fan_speed());
  }
  if (from._internal_pump_speed() != 0) {
    _internal_set_pump_speed(from._internal_pump_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoolingStatus::CopyFrom(const CoolingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CoolingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoolingStatus::IsInitialized() const {
  return true;
}

void CoolingStatus::InternalSwap(CoolingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoolingStatus, pump_speed_)
      + sizeof(CoolingStatus::pump_speed_)
      - PROTOBUF_FIELD_OFFSET(CoolingStatus, hv_fan_speed_)>(
          reinterpret_cast<char*>(&hv_fan_speed_),
          reinterpret_cast<char*>(&other->hv_fan_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoolingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[27]);
}

// ===================================================================

class HvCellsVoltage::_Internal {
 public:
};

HvCellsVoltage::HvCellsVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvCellsVoltage)
}
HvCellsVoltage::HvCellsVoltage(const HvCellsVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_index_, &from.cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage_2_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(voltage_2_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCellsVoltage)
}

inline void HvCellsVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltage_2_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(voltage_2_));
}

HvCellsVoltage::~HvCellsVoltage() {
  // @@protoc_insertion_point(destructor:primary.HvCellsVoltage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvCellsVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCellsVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCellsVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCellsVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_2_) -
      reinterpret_cast<char*>(&cell_index_)) + sizeof(voltage_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCellsVoltage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCellsVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCellsVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_index(), target);
  }

  // uint32 voltage_0 = 2;
  if (this->_internal_voltage_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_0(), target);
  }

  // uint32 voltage_1 = 3;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 4;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCellsVoltage)
  return target;
}

size_t HvCellsVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCellsVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_index());
  }

  // uint32 voltage_0 = 2;
  if (this->_internal_voltage_0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_0());
  }

  // uint32 voltage_1 = 3;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 4;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCellsVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCellsVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCellsVoltage::GetClassData() const { return &_class_data_; }

void HvCellsVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCellsVoltage *>(to)->MergeFrom(
      static_cast<const HvCellsVoltage &>(from));
}


void HvCellsVoltage::MergeFrom(const HvCellsVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCellsVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_index() != 0) {
    _internal_set_cell_index(from._internal_cell_index());
  }
  if (from._internal_voltage_0() != 0) {
    _internal_set_voltage_0(from._internal_voltage_0());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCellsVoltage::CopyFrom(const HvCellsVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCellsVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCellsVoltage::IsInitialized() const {
  return true;
}

void HvCellsVoltage::InternalSwap(HvCellsVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCellsVoltage, voltage_2_)
      + sizeof(HvCellsVoltage::voltage_2_)
      - PROTOBUF_FIELD_OFFSET(HvCellsVoltage, cell_index_)>(
          reinterpret_cast<char*>(&cell_index_),
          reinterpret_cast<char*>(&other->cell_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCellsVoltage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[28]);
}

// ===================================================================

class HvCellsTemp::_Internal {
 public:
};

HvCellsTemp::HvCellsTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvCellsTemp)
}
HvCellsTemp::HvCellsTemp(const HvCellsTemp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_index_, &from.cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_6_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(temp_6_));
  // @@protoc_insertion_point(copy_constructor:primary.HvCellsTemp)
}

inline void HvCellsTemp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp_6_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(temp_6_));
}

HvCellsTemp::~HvCellsTemp() {
  // @@protoc_insertion_point(destructor:primary.HvCellsTemp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvCellsTemp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCellsTemp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCellsTemp::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCellsTemp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_6_) -
      reinterpret_cast<char*>(&cell_index_)) + sizeof(temp_6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCellsTemp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          temp_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          temp_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          temp_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          temp_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCellsTemp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCellsTemp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_index(), target);
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_temp_0(), target);
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_temp_1(), target);
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp_2(), target);
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temp_3(), target);
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temp_4(), target);
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_temp_5(), target);
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_temp_6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCellsTemp)
  return target;
}

size_t HvCellsTemp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCellsTemp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_index());
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_0());
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_1());
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_2());
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_3());
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_4());
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_5());
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_6());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCellsTemp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCellsTemp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCellsTemp::GetClassData() const { return &_class_data_; }

void HvCellsTemp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCellsTemp *>(to)->MergeFrom(
      static_cast<const HvCellsTemp &>(from));
}


void HvCellsTemp::MergeFrom(const HvCellsTemp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCellsTemp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_index() != 0) {
    _internal_set_cell_index(from._internal_cell_index());
  }
  if (from._internal_temp_0() != 0) {
    _internal_set_temp_0(from._internal_temp_0());
  }
  if (from._internal_temp_1() != 0) {
    _internal_set_temp_1(from._internal_temp_1());
  }
  if (from._internal_temp_2() != 0) {
    _internal_set_temp_2(from._internal_temp_2());
  }
  if (from._internal_temp_3() != 0) {
    _internal_set_temp_3(from._internal_temp_3());
  }
  if (from._internal_temp_4() != 0) {
    _internal_set_temp_4(from._internal_temp_4());
  }
  if (from._internal_temp_5() != 0) {
    _internal_set_temp_5(from._internal_temp_5());
  }
  if (from._internal_temp_6() != 0) {
    _internal_set_temp_6(from._internal_temp_6());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCellsTemp::CopyFrom(const HvCellsTemp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCellsTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCellsTemp::IsInitialized() const {
  return true;
}

void HvCellsTemp::InternalSwap(HvCellsTemp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HvCellsTemp, temp_6_)
      + sizeof(HvCellsTemp::temp_6_)
      - PROTOBUF_FIELD_OFFSET(HvCellsTemp, cell_index_)>(
          reinterpret_cast<char*>(&cell_index_),
          reinterpret_cast<char*>(&other->cell_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCellsTemp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[29]);
}

// ===================================================================

class HvCellBalancingStatus::_Internal {
 public:
};

HvCellBalancingStatus::HvCellBalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.HvCellBalancingStatus)
}
HvCellBalancingStatus::HvCellBalancingStatus(const HvCellBalancingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  balancing_status_ = from.balancing_status_;
  // @@protoc_insertion_point(copy_constructor:primary.HvCellBalancingStatus)
}

inline void HvCellBalancingStatus::SharedCtor() {
balancing_status_ = 0;
}

HvCellBalancingStatus::~HvCellBalancingStatus() {
  // @@protoc_insertion_point(destructor:primary.HvCellBalancingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HvCellBalancingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HvCellBalancingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HvCellBalancingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HvCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balancing_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HvCellBalancingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.BalancingStatusType balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::primary::BalancingStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HvCellBalancingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HvCellBalancingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.BalancingStatusType balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_balancing_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HvCellBalancingStatus)
  return target;
}

size_t HvCellBalancingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HvCellBalancingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.BalancingStatusType balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HvCellBalancingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HvCellBalancingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HvCellBalancingStatus::GetClassData() const { return &_class_data_; }

void HvCellBalancingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HvCellBalancingStatus *>(to)->MergeFrom(
      static_cast<const HvCellBalancingStatus &>(from));
}


void HvCellBalancingStatus::MergeFrom(const HvCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HvCellBalancingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HvCellBalancingStatus::CopyFrom(const HvCellBalancingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HvCellBalancingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HvCellBalancingStatus::IsInitialized() const {
  return true;
}

void HvCellBalancingStatus::InternalSwap(HvCellBalancingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(balancing_status_, other->balancing_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HvCellBalancingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[30]);
}

// ===================================================================

class InvLSetTorque::_Internal {
 public:
};

InvLSetTorque::InvLSetTorque(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.InvLSetTorque)
}
InvLSetTorque::InvLSetTorque(const InvLSetTorque& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&regid_, &from.regid_,
    static_cast<size_t>(reinterpret_cast<char*>(&msb_) -
    reinterpret_cast<char*>(&regid_)) + sizeof(msb_));
  // @@protoc_insertion_point(copy_constructor:primary.InvLSetTorque)
}

inline void InvLSetTorque::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&regid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msb_) -
    reinterpret_cast<char*>(&regid_)) + sizeof(msb_));
}

InvLSetTorque::~InvLSetTorque() {
  // @@protoc_insertion_point(destructor:primary.InvLSetTorque)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvLSetTorque::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvLSetTorque::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvLSetTorque::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.InvLSetTorque)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&regid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msb_) -
      reinterpret_cast<char*>(&regid_)) + sizeof(msb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvLSetTorque::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 regid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          regid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lsb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvLSetTorque::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.InvLSetTorque)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 regid = 1;
  if (this->_internal_regid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_regid(), target);
  }

  // uint32 lsb = 2;
  if (this->_internal_lsb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lsb(), target);
  }

  // uint32 msb = 3;
  if (this->_internal_msb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.InvLSetTorque)
  return target;
}

size_t InvLSetTorque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.InvLSetTorque)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 regid = 1;
  if (this->_internal_regid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_regid());
  }

  // uint32 lsb = 2;
  if (this->_internal_lsb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lsb());
  }

  // uint32 msb = 3;
  if (this->_internal_msb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvLSetTorque::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvLSetTorque::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvLSetTorque::GetClassData() const { return &_class_data_; }

void InvLSetTorque::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvLSetTorque *>(to)->MergeFrom(
      static_cast<const InvLSetTorque &>(from));
}


void InvLSetTorque::MergeFrom(const InvLSetTorque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.InvLSetTorque)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_regid() != 0) {
    _internal_set_regid(from._internal_regid());
  }
  if (from._internal_lsb() != 0) {
    _internal_set_lsb(from._internal_lsb());
  }
  if (from._internal_msb() != 0) {
    _internal_set_msb(from._internal_msb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvLSetTorque::CopyFrom(const InvLSetTorque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.InvLSetTorque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvLSetTorque::IsInitialized() const {
  return true;
}

void InvLSetTorque::InternalSwap(InvLSetTorque* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvLSetTorque, msb_)
      + sizeof(InvLSetTorque::msb_)
      - PROTOBUF_FIELD_OFFSET(InvLSetTorque, regid_)>(
          reinterpret_cast<char*>(&regid_),
          reinterpret_cast<char*>(&other->regid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvLSetTorque::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[31]);
}

// ===================================================================

class InvLResponse::_Internal {
 public:
};

InvLResponse::InvLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:primary.InvLResponse)
}
InvLResponse::InvLResponse(const InvLResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reg_id_, &from.reg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reg_val_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(reg_val_));
  // @@protoc_insertion_point(copy_constructor:primary.InvLResponse)
}

inline void InvLResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reg_val_) -
    reinterpret_cast<char*>(&reg_id_)) + sizeof(reg_val_));
}

InvLResponse::~InvLResponse() {
  // @@protoc_insertion_point(destructor:primary.InvLResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvLResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvLResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.InvLResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reg_val_) -
      reinterpret_cast<char*>(&reg_id_)) + sizeof(reg_val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvLResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          reg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reg_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvLResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.InvLResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reg_id(), target);
  }

  // uint32 reg_val = 2;
  if (this->_internal_reg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reg_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.InvLResponse)
  return target;
}

size_t InvLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.InvLResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reg_id = 1;
  if (this->_internal_reg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_id());
  }

  // uint32 reg_val = 2;
  if (this->_internal_reg_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvLResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvLResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvLResponse::GetClassData() const { return &_class_data_; }

void InvLResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvLResponse *>(to)->MergeFrom(
      static_cast<const InvLResponse &>(from));
}


void InvLResponse::MergeFrom(const InvLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.InvLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg_id() != 0) {
    _internal_set_reg_id(from._internal_reg_id());
  }
  if (from._internal_reg_val() != 0) {
    _internal_set_reg_val(from._internal_reg_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvLResponse::CopyFrom(const InvLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.InvLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvLResponse::IsInitialized() const {
  return true;
}

void InvLResponse::InternalSwap(InvLResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvLResponse, reg_val_)
      + sizeof(InvLResponse::reg_val_)
      - PROTOBUF_FIELD_OFFSET(InvLResponse, reg_id_)>(
          reinterpret_cast<char*>(&reg_id_),
          reinterpret_cast<char*>(&other->reg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvLResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace primary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::primary::SteerVersion*
Arena::CreateMaybeMessage< ::primary::SteerVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SteerVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DasVersion*
Arena::CreateMaybeMessage< ::primary::DasVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DasVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvVersion*
Arena::CreateMaybeMessage< ::primary::HvVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvVersion*
Arena::CreateMaybeMessage< ::primary::LvVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TlmVersion*
Arena::CreateMaybeMessage< ::primary::TlmVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TlmVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Timestamp*
Arena::CreateMaybeMessage< ::primary::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetTlmStatus*
Arena::CreateMaybeMessage< ::primary::SetTlmStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetTlmStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SteerSystemStatus*
Arena::CreateMaybeMessage< ::primary::SteerSystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SteerSystemStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Marker*
Arena::CreateMaybeMessage< ::primary::Marker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Marker >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TlmStatus*
Arena::CreateMaybeMessage< ::primary::TlmStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TlmStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CarStatus*
Arena::CreateMaybeMessage< ::primary::CarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DasErrors*
Arena::CreateMaybeMessage< ::primary::DasErrors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DasErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::Speed*
Arena::CreateMaybeMessage< ::primary::Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvVoltage*
Arena::CreateMaybeMessage< ::primary::HvVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCurrent*
Arena::CreateMaybeMessage< ::primary::HvCurrent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvTemp*
Arena::CreateMaybeMessage< ::primary::HvTemp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvTemp >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvErrors*
Arena::CreateMaybeMessage< ::primary::HvErrors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TsStatus*
Arena::CreateMaybeMessage< ::primary::TsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetTsStatus*
Arena::CreateMaybeMessage< ::primary::SetTsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetTsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetCellBalancingStatus*
Arena::CreateMaybeMessage< ::primary::SetCellBalancingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetCellBalancingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HandcartStatus*
Arena::CreateMaybeMessage< ::primary::HandcartStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HandcartStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SteerStatus*
Arena::CreateMaybeMessage< ::primary::SteerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SteerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetCarStatus*
Arena::CreateMaybeMessage< ::primary::SetCarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetCarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SetPedalsRange*
Arena::CreateMaybeMessage< ::primary::SetPedalsRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SetPedalsRange >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvCurrent*
Arena::CreateMaybeMessage< ::primary::LvCurrent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvVoltage*
Arena::CreateMaybeMessage< ::primary::LvVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LvTemperature*
Arena::CreateMaybeMessage< ::primary::LvTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LvTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CoolingStatus*
Arena::CreateMaybeMessage< ::primary::CoolingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CoolingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCellsVoltage*
Arena::CreateMaybeMessage< ::primary::HvCellsVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCellsVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCellsTemp*
Arena::CreateMaybeMessage< ::primary::HvCellsTemp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCellsTemp >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HvCellBalancingStatus*
Arena::CreateMaybeMessage< ::primary::HvCellBalancingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HvCellBalancingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::InvLSetTorque*
Arena::CreateMaybeMessage< ::primary::InvLSetTorque >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::InvLSetTorque >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::InvLResponse*
Arena::CreateMaybeMessage< ::primary::InvLResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::InvLResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
