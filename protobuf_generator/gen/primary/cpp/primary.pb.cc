// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primary.proto

#include "primary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace primary {
constexpr STEER_VERSION::STEER_VERSION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct STEER_VERSIONDefaultTypeInternal {
  constexpr STEER_VERSIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STEER_VERSIONDefaultTypeInternal() {}
  union {
    STEER_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STEER_VERSIONDefaultTypeInternal _STEER_VERSION_default_instance_;
constexpr DAS_VERSION::DAS_VERSION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct DAS_VERSIONDefaultTypeInternal {
  constexpr DAS_VERSIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAS_VERSIONDefaultTypeInternal() {}
  union {
    DAS_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAS_VERSIONDefaultTypeInternal _DAS_VERSION_default_instance_;
constexpr HV_VERSION::HV_VERSION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct HV_VERSIONDefaultTypeInternal {
  constexpr HV_VERSIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_VERSIONDefaultTypeInternal() {}
  union {
    HV_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_VERSIONDefaultTypeInternal _HV_VERSION_default_instance_;
constexpr LV_VERSION::LV_VERSION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct LV_VERSIONDefaultTypeInternal {
  constexpr LV_VERSIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LV_VERSIONDefaultTypeInternal() {}
  union {
    LV_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LV_VERSIONDefaultTypeInternal _LV_VERSION_default_instance_;
constexpr TLM_VERSION::TLM_VERSION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_version_(0u)
  , cancicd_version_(0u){}
struct TLM_VERSIONDefaultTypeInternal {
  constexpr TLM_VERSIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TLM_VERSIONDefaultTypeInternal() {}
  union {
    TLM_VERSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TLM_VERSIONDefaultTypeInternal _TLM_VERSION_default_instance_;
constexpr TIMESTAMP::TIMESTAMP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(0u){}
struct TIMESTAMPDefaultTypeInternal {
  constexpr TIMESTAMPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TIMESTAMPDefaultTypeInternal() {}
  union {
    TIMESTAMP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TIMESTAMPDefaultTypeInternal _TIMESTAMP_default_instance_;
constexpr SET_TLM_STATUS::SET_TLM_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tlm_status_set_(0)

  , race_type_(0)

  , driver_(0u)
  , circuit_(0u){}
struct SET_TLM_STATUSDefaultTypeInternal {
  constexpr SET_TLM_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SET_TLM_STATUSDefaultTypeInternal() {}
  union {
    SET_TLM_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SET_TLM_STATUSDefaultTypeInternal _SET_TLM_STATUS_default_instance_;
constexpr STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soc_temp_(0u){}
struct STEER_SYSTEM_STATUSDefaultTypeInternal {
  constexpr STEER_SYSTEM_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STEER_SYSTEM_STATUSDefaultTypeInternal() {}
  union {
    STEER_SYSTEM_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STEER_SYSTEM_STATUSDefaultTypeInternal _STEER_SYSTEM_STATUS_default_instance_;
constexpr TLM_STATUS::TLM_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tlm_status_(0)

  , race_type_(0)

  , driver_(0u)
  , circuit_(0u){}
struct TLM_STATUSDefaultTypeInternal {
  constexpr TLM_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TLM_STATUSDefaultTypeInternal() {}
  union {
    TLM_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TLM_STATUSDefaultTypeInternal _TLM_STATUS_default_instance_;
constexpr CAR_STATUS::CAR_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inverter_l_(0)

  , inverter_r_(0)

  , car_status_(0)
{}
struct CAR_STATUSDefaultTypeInternal {
  constexpr CAR_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAR_STATUSDefaultTypeInternal() {}
  union {
    CAR_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAR_STATUSDefaultTypeInternal _CAR_STATUS_default_instance_;
constexpr SPEED::SPEED(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoder_r_(0u)
  , encoder_l_(0u)
  , inverter_r_(0u)
  , inverter_l_(0u){}
struct SPEEDDefaultTypeInternal {
  constexpr SPEEDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SPEEDDefaultTypeInternal() {}
  union {
    SPEED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SPEEDDefaultTypeInternal _SPEED_default_instance_;
constexpr HV_VOLTAGE::HV_VOLTAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pack_voltage_(0u)
  , bus_voltage_(0u)
  , max_cell_voltage_(0u)
  , min_cell_voltage_(0u){}
struct HV_VOLTAGEDefaultTypeInternal {
  constexpr HV_VOLTAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_VOLTAGEDefaultTypeInternal() {}
  union {
    HV_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_VOLTAGEDefaultTypeInternal _HV_VOLTAGE_default_instance_;
constexpr HV_CURRENT::HV_CURRENT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_(0u)
  , power_(0){}
struct HV_CURRENTDefaultTypeInternal {
  constexpr HV_CURRENTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_CURRENTDefaultTypeInternal() {}
  union {
    HV_CURRENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_CURRENTDefaultTypeInternal _HV_CURRENT_default_instance_;
constexpr HV_TEMP::HV_TEMP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_temp_(0u)
  , max_temp_(0u)
  , min_temp_(0u){}
struct HV_TEMPDefaultTypeInternal {
  constexpr HV_TEMPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_TEMPDefaultTypeInternal() {}
  union {
    HV_TEMP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_TEMPDefaultTypeInternal _HV_TEMP_default_instance_;
constexpr HV_ERRORS::HV_ERRORS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : warnings_(0u)
  , errors_(0u){}
struct HV_ERRORSDefaultTypeInternal {
  constexpr HV_ERRORSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_ERRORSDefaultTypeInternal() {}
  union {
    HV_ERRORS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_ERRORSDefaultTypeInternal _HV_ERRORS_default_instance_;
constexpr TS_STATUS::TS_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ts_status_(0)
{}
struct TS_STATUSDefaultTypeInternal {
  constexpr TS_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TS_STATUSDefaultTypeInternal() {}
  union {
    TS_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TS_STATUSDefaultTypeInternal _TS_STATUS_default_instance_;
constexpr SET_TS_STATUS::SET_TS_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ts_status_set_(0)
{}
struct SET_TS_STATUSDefaultTypeInternal {
  constexpr SET_TS_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SET_TS_STATUSDefaultTypeInternal() {}
  union {
    SET_TS_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SET_TS_STATUSDefaultTypeInternal _SET_TS_STATUS_default_instance_;
constexpr SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_balancing_status_(0)
{}
struct SET_CELL_BALANCING_STATUSDefaultTypeInternal {
  constexpr SET_CELL_BALANCING_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SET_CELL_BALANCING_STATUSDefaultTypeInternal() {}
  union {
    SET_CELL_BALANCING_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SET_CELL_BALANCING_STATUSDefaultTypeInternal _SET_CELL_BALANCING_STATUS_default_instance_;
constexpr HANDCART_STATUS::HANDCART_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connected_(false){}
struct HANDCART_STATUSDefaultTypeInternal {
  constexpr HANDCART_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HANDCART_STATUSDefaultTypeInternal() {}
  union {
    HANDCART_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HANDCART_STATUSDefaultTypeInternal _HANDCART_STATUS_default_instance_;
constexpr STEER_STATUS::STEER_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : traction_control_(0)

  , map_(0)
{}
struct STEER_STATUSDefaultTypeInternal {
  constexpr STEER_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STEER_STATUSDefaultTypeInternal() {}
  union {
    STEER_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STEER_STATUSDefaultTypeInternal _STEER_STATUS_default_instance_;
constexpr SET_CAR_STATUS::SET_CAR_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : car_status_set_(0)
{}
struct SET_CAR_STATUSDefaultTypeInternal {
  constexpr SET_CAR_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SET_CAR_STATUSDefaultTypeInternal() {}
  union {
    SET_CAR_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SET_CAR_STATUSDefaultTypeInternal _SET_CAR_STATUS_default_instance_;
constexpr SET_PEDALS_RANGE::SET_PEDALS_RANGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bound_(0)

  , pedal_(0)
{}
struct SET_PEDALS_RANGEDefaultTypeInternal {
  constexpr SET_PEDALS_RANGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SET_PEDALS_RANGEDefaultTypeInternal() {}
  union {
    SET_PEDALS_RANGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SET_PEDALS_RANGEDefaultTypeInternal _SET_PEDALS_RANGE_default_instance_;
constexpr LV_CURRENT::LV_CURRENT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_(0u){}
struct LV_CURRENTDefaultTypeInternal {
  constexpr LV_CURRENTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LV_CURRENTDefaultTypeInternal() {}
  union {
    LV_CURRENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LV_CURRENTDefaultTypeInternal _LV_CURRENT_default_instance_;
constexpr LV_VOLTAGE::LV_VOLTAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_voltage_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u)
  , voltage_3_(0u)
  , voltage_4_(0u){}
struct LV_VOLTAGEDefaultTypeInternal {
  constexpr LV_VOLTAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LV_VOLTAGEDefaultTypeInternal() {}
  union {
    LV_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LV_VOLTAGEDefaultTypeInternal _LV_VOLTAGE_default_instance_;
constexpr LV_TEMPERATURE::LV_TEMPERATURE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bp_temperature_(0u)
  , dcdc_temperature_(0u){}
struct LV_TEMPERATUREDefaultTypeInternal {
  constexpr LV_TEMPERATUREDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LV_TEMPERATUREDefaultTypeInternal() {}
  union {
    LV_TEMPERATURE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LV_TEMPERATUREDefaultTypeInternal _LV_TEMPERATURE_default_instance_;
constexpr COOLING_STATUS::COOLING_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hv_fan_speed_(0u)
  , lv_fan_speed_(0u)
  , pump_speed_(0u){}
struct COOLING_STATUSDefaultTypeInternal {
  constexpr COOLING_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~COOLING_STATUSDefaultTypeInternal() {}
  union {
    COOLING_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT COOLING_STATUSDefaultTypeInternal _COOLING_STATUS_default_instance_;
constexpr HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_index_(0u)
  , voltage_0_(0u)
  , voltage_1_(0u)
  , voltage_2_(0u){}
struct HV_CELLS_VOLTAGEDefaultTypeInternal {
  constexpr HV_CELLS_VOLTAGEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_CELLS_VOLTAGEDefaultTypeInternal() {}
  union {
    HV_CELLS_VOLTAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_CELLS_VOLTAGEDefaultTypeInternal _HV_CELLS_VOLTAGE_default_instance_;
constexpr HV_CELLS_TEMP::HV_CELLS_TEMP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_index_(0u)
  , temp_0_(0u)
  , temp_1_(0u)
  , temp_2_(0u)
  , temp_3_(0u)
  , temp_4_(0u)
  , temp_5_(0u)
  , temp_6_(0u){}
struct HV_CELLS_TEMPDefaultTypeInternal {
  constexpr HV_CELLS_TEMPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_CELLS_TEMPDefaultTypeInternal() {}
  union {
    HV_CELLS_TEMP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_CELLS_TEMPDefaultTypeInternal _HV_CELLS_TEMP_default_instance_;
constexpr HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balancing_status_(0)
{}
struct HV_CELL_BALANCING_STATUSDefaultTypeInternal {
  constexpr HV_CELL_BALANCING_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HV_CELL_BALANCING_STATUSDefaultTypeInternal() {}
  union {
    HV_CELL_BALANCING_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HV_CELL_BALANCING_STATUSDefaultTypeInternal _HV_CELL_BALANCING_STATUS_default_instance_;
}  // namespace primary
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_primary_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_primary_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_primary_2eproto = nullptr;

const uint32_t TableStruct_primary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_VERSION, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::DAS_VERSION, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VERSION, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VERSION, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, component_version_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_VERSION, cancicd_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TIMESTAMP, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, tlm_status_set_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_TLM_STATUS, circuit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_SYSTEM_STATUS, soc_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, tlm_status_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, race_type_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, driver_),
  PROTOBUF_FIELD_OFFSET(::primary::TLM_STATUS, circuit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, inverter_l_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::CAR_STATUS, car_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, encoder_r_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, encoder_l_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, inverter_r_),
  PROTOBUF_FIELD_OFFSET(::primary::SPEED, inverter_l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, pack_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, bus_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, max_cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_VOLTAGE, min_cell_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, current_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CURRENT, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, average_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, max_temp_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_TEMP, min_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, warnings_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_ERRORS, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::TS_STATUS, ts_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_TS_STATUS, ts_status_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CELL_BALANCING_STATUS, set_balancing_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HANDCART_STATUS, connected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, traction_control_),
  PROTOBUF_FIELD_OFFSET(::primary::STEER_STATUS, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_CAR_STATUS, car_status_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, bound_),
  PROTOBUF_FIELD_OFFSET(::primary::SET_PEDALS_RANGE, pedal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_CURRENT, current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, total_voltage_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_2_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_3_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_VOLTAGE, voltage_4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, bp_temperature_),
  PROTOBUF_FIELD_OFFSET(::primary::LV_TEMPERATURE, dcdc_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, hv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, lv_fan_speed_),
  PROTOBUF_FIELD_OFFSET(::primary::COOLING_STATUS, pump_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, cell_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_VOLTAGE, voltage_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, cell_index_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_0_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_1_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_2_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_3_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_4_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_5_),
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELLS_TEMP, temp_6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::primary::HV_CELL_BALANCING_STATUS, balancing_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::primary::STEER_VERSION)},
  { 8, -1, -1, sizeof(::primary::DAS_VERSION)},
  { 16, -1, -1, sizeof(::primary::HV_VERSION)},
  { 24, -1, -1, sizeof(::primary::LV_VERSION)},
  { 32, -1, -1, sizeof(::primary::TLM_VERSION)},
  { 40, -1, -1, sizeof(::primary::TIMESTAMP)},
  { 47, -1, -1, sizeof(::primary::SET_TLM_STATUS)},
  { 57, -1, -1, sizeof(::primary::STEER_SYSTEM_STATUS)},
  { 64, -1, -1, sizeof(::primary::TLM_STATUS)},
  { 74, -1, -1, sizeof(::primary::CAR_STATUS)},
  { 83, -1, -1, sizeof(::primary::SPEED)},
  { 93, -1, -1, sizeof(::primary::HV_VOLTAGE)},
  { 103, -1, -1, sizeof(::primary::HV_CURRENT)},
  { 111, -1, -1, sizeof(::primary::HV_TEMP)},
  { 120, -1, -1, sizeof(::primary::HV_ERRORS)},
  { 128, -1, -1, sizeof(::primary::TS_STATUS)},
  { 135, -1, -1, sizeof(::primary::SET_TS_STATUS)},
  { 142, -1, -1, sizeof(::primary::SET_CELL_BALANCING_STATUS)},
  { 149, -1, -1, sizeof(::primary::HANDCART_STATUS)},
  { 156, -1, -1, sizeof(::primary::STEER_STATUS)},
  { 164, -1, -1, sizeof(::primary::SET_CAR_STATUS)},
  { 171, -1, -1, sizeof(::primary::SET_PEDALS_RANGE)},
  { 179, -1, -1, sizeof(::primary::LV_CURRENT)},
  { 186, -1, -1, sizeof(::primary::LV_VOLTAGE)},
  { 197, -1, -1, sizeof(::primary::LV_TEMPERATURE)},
  { 205, -1, -1, sizeof(::primary::COOLING_STATUS)},
  { 214, -1, -1, sizeof(::primary::HV_CELLS_VOLTAGE)},
  { 224, -1, -1, sizeof(::primary::HV_CELLS_TEMP)},
  { 238, -1, -1, sizeof(::primary::HV_CELL_BALANCING_STATUS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_STEER_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_DAS_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TLM_VERSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TIMESTAMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_TLM_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_STEER_SYSTEM_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TLM_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_CAR_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SPEED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CURRENT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_TEMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_ERRORS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_TS_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_TS_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_CELL_BALANCING_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HANDCART_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_STEER_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_CAR_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_SET_PEDALS_RANGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_CURRENT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_LV_TEMPERATURE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_COOLING_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CELLS_VOLTAGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CELLS_TEMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::primary::_HV_CELL_BALANCING_STATUS_default_instance_),
};

const char descriptor_table_protodef_primary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rprimary.proto\022\007primary\"C\n\rSTEER_VERSIO"
  "N\022\031\n\021component_version\030\001 \001(\r\022\027\n\017cancicd_"
  "version\030\002 \001(\r\"A\n\013DAS_VERSION\022\031\n\021componen"
  "t_version\030\001 \001(\r\022\027\n\017cancicd_version\030\002 \001(\r"
  "\"@\n\nHV_VERSION\022\031\n\021component_version\030\001 \001("
  "\r\022\027\n\017cancicd_version\030\002 \001(\r\"@\n\nLV_VERSION"
  "\022\031\n\021component_version\030\001 \001(\r\022\027\n\017cancicd_v"
  "ersion\030\002 \001(\r\"A\n\013TLM_VERSION\022\031\n\021component"
  "_version\030\001 \001(\r\022\027\n\017cancicd_version\030\002 \001(\r\""
  "\036\n\tTIMESTAMP\022\021\n\ttimestamp\030\001 \001(\r\"\211\001\n\016SET_"
  "TLM_STATUS\022/\n\016tlm_status_set\030\001 \001(\0162\027.pri"
  "mary.Tlm_Status_Set\022%\n\trace_type\030\002 \001(\0162\022"
  ".primary.Race_Type\022\016\n\006driver\030\003 \001(\r\022\017\n\007ci"
  "rcuit\030\004 \001(\r\"\'\n\023STEER_SYSTEM_STATUS\022\020\n\010so"
  "c_temp\030\001 \001(\r\"}\n\nTLM_STATUS\022\'\n\ntlm_status"
  "\030\001 \001(\0162\023.primary.Tlm_Status\022%\n\trace_type"
  "\030\002 \001(\0162\022.primary.Race_Type\022\016\n\006driver\030\003 \001"
  "(\r\022\017\n\007circuit\030\004 \001(\r\"\221\001\n\nCAR_STATUS\022,\n\nin"
  "verter_l\030\001 \001(\0162\030.primary.Inverter_Status"
  "\022,\n\ninverter_r\030\002 \001(\0162\030.primary.Inverter_"
  "Status\022\'\n\ncar_status\030\003 \001(\0162\023.primary.Car"
  "_Status\"U\n\005SPEED\022\021\n\tencoder_r\030\001 \001(\r\022\021\n\te"
  "ncoder_l\030\002 \001(\r\022\022\n\ninverter_r\030\003 \001(\r\022\022\n\nin"
  "verter_l\030\004 \001(\r\"k\n\nHV_VOLTAGE\022\024\n\014pack_vol"
  "tage\030\001 \001(\r\022\023\n\013bus_voltage\030\002 \001(\r\022\030\n\020max_c"
  "ell_voltage\030\003 \001(\r\022\030\n\020min_cell_voltage\030\004 "
  "\001(\r\",\n\nHV_CURRENT\022\017\n\007current\030\001 \001(\r\022\r\n\005po"
  "wer\030\002 \001(\005\"C\n\007HV_TEMP\022\024\n\014average_temp\030\001 \001"
  "(\r\022\020\n\010max_temp\030\002 \001(\r\022\020\n\010min_temp\030\003 \001(\r\"-"
  "\n\tHV_ERRORS\022\020\n\010warnings\030\001 \001(\r\022\016\n\006errors\030"
  "\002 \001(\r\"2\n\tTS_STATUS\022%\n\tts_status\030\001 \001(\0162\022."
  "primary.Ts_Status\">\n\rSET_TS_STATUS\022-\n\rts"
  "_status_set\030\001 \001(\0162\026.primary.Ts_Status_Se"
  "t\"X\n\031SET_CELL_BALANCING_STATUS\022;\n\024set_ba"
  "lancing_status\030\001 \001(\0162\035.primary.Set_Balan"
  "cing_Status\"$\n\017HANDCART_STATUS\022\021\n\tconnec"
  "ted\030\001 \001(\010\"^\n\014STEER_STATUS\0223\n\020traction_co"
  "ntrol\030\001 \001(\0162\031.primary.Traction_Control\022\031"
  "\n\003map\030\002 \001(\0162\014.primary.Map\"A\n\016SET_CAR_STA"
  "TUS\022/\n\016car_status_set\030\001 \001(\0162\027.primary.Ca"
  "r_Status_Set\"P\n\020SET_PEDALS_RANGE\022\035\n\005boun"
  "d\030\001 \001(\0162\016.primary.Bound\022\035\n\005pedal\030\002 \001(\0162\016"
  ".primary.Pedal\"\035\n\nLV_CURRENT\022\017\n\007current\030"
  "\001 \001(\r\"o\n\nLV_VOLTAGE\022\025\n\rtotal_voltage\030\001 \001"
  "(\r\022\021\n\tvoltage_1\030\002 \001(\r\022\021\n\tvoltage_2\030\003 \001(\r"
  "\022\021\n\tvoltage_3\030\004 \001(\r\022\021\n\tvoltage_4\030\005 \001(\r\"B"
  "\n\016LV_TEMPERATURE\022\026\n\016bp_temperature\030\001 \001(\r"
  "\022\030\n\020dcdc_temperature\030\002 \001(\r\"P\n\016COOLING_ST"
  "ATUS\022\024\n\014hv_fan_speed\030\001 \001(\r\022\024\n\014lv_fan_spe"
  "ed\030\002 \001(\r\022\022\n\npump_speed\030\003 \001(\r\"_\n\020HV_CELLS"
  "_VOLTAGE\022\022\n\ncell_index\030\001 \001(\r\022\021\n\tvoltage_"
  "0\030\002 \001(\r\022\021\n\tvoltage_1\030\003 \001(\r\022\021\n\tvoltage_2\030"
  "\004 \001(\r\"\223\001\n\rHV_CELLS_TEMP\022\022\n\ncell_index\030\001 "
  "\001(\r\022\016\n\006temp_0\030\002 \001(\r\022\016\n\006temp_1\030\003 \001(\r\022\016\n\006t"
  "emp_2\030\004 \001(\r\022\016\n\006temp_3\030\005 \001(\r\022\016\n\006temp_4\030\006 "
  "\001(\r\022\016\n\006temp_5\030\007 \001(\r\022\016\n\006temp_6\030\010 \001(\r\"O\n\030H"
  "V_CELL_BALANCING_STATUS\0223\n\020balancing_sta"
  "tus\030\001 \001(\0162\031.primary.Balancing_Status*\?\n\016"
  "Tlm_Status_Set\022\026\n\022TLM_STATUS_SET_OFF\020\000\022\025"
  "\n\021TLM_STATUS_SET_ON\020\001*p\n\tRace_Type\022\032\n\026RA"
  "CE_TYPE_ACCELERATION\020\000\022\025\n\021RACE_TYPE_SKID"
  "PAD\020\001\022\027\n\023RACE_TYPE_AUTOCROSS\020\002\022\027\n\023RACE_T"
  "YPE_ENDURANCE\020\003*3\n\nTlm_Status\022\021\n\rTLM_STA"
  "TUS_ON\020\000\022\022\n\016TLM_STATUS_OFF\020\001*\\\n\017Inverter"
  "_Status\022\027\n\023INVERTER_STATUS_OFF\020\000\022\030\n\024INVE"
  "RTER_STATUS_IDLE\020\001\022\026\n\022INVERTER_STATUS_ON"
  "\020\002*K\n\nCar_Status\022\023\n\017CAR_STATUS_IDLE\020\000\022\024\n"
  "\020CAR_STATUS_SETUP\020\001\022\022\n\016CAR_STATUS_RUN\020\002*"
  "^\n\tTs_Status\022\021\n\rTS_STATUS_OFF\020\000\022\027\n\023TS_ST"
  "ATUS_PRECHARGE\020\001\022\020\n\014TS_STATUS_ON\020\002\022\023\n\017TS"
  "_STATUS_FATAL\020\003*<\n\rTs_Status_Set\022\025\n\021TS_S"
  "TATUS_SET_OFF\020\000\022\024\n\020TS_STATUS_SET_ON\020\001*Q\n"
  "\024Set_Balancing_Status\022\034\n\030SET_BALANCING_S"
  "TATUS_OFF\020\000\022\033\n\027SET_BALANCING_STATUS_ON\020\001"
  "*\225\001\n\020Traction_Control\022\030\n\024TRACTION_CONTRO"
  "L_OFF\020\000\022!\n\035TRACTION_CONTROL_SLIP_CONTROL"
  "\020\001\022%\n!TRACTION_CONTROL_TORQUE_VECTORING\020"
  "\002\022\035\n\031TRACTION_CONTROL_COMPLETE\020\003*R\n\003Map\022"
  "\t\n\005MAP_R\020\000\022\013\n\007MAP_D20\020\001\022\013\n\007MAP_D40\020\002\022\013\n\007"
  "MAP_D60\020\003\022\013\n\007MAP_D80\020\004\022\014\n\010MAP_D100\020\005*A\n\016"
  "Car_Status_Set\022\027\n\023CAR_STATUS_SET_IDLE\020\000\022"
  "\026\n\022CAR_STATUS_SET_RUN\020\001*-\n\005Bound\022\021\n\rBOUN"
  "D_SET_MAX\020\000\022\021\n\rBOUND_SET_MIN\020\001*/\n\005Pedal\022"
  "\025\n\021PEDAL_ACCELERATOR\020\000\022\017\n\013PEDAL_BRAKE\020\001*"
  "E\n\020Balancing_Status\022\027\n\023BALANCING_STATUS_"
  "ON\020\000\022\030\n\024BALANCING_STATUS_OFF\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_primary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primary_2eproto = {
  false, false, 3438, descriptor_table_protodef_primary_2eproto, "primary.proto", 
  &descriptor_table_primary_2eproto_once, nullptr, 0, 29,
  schemas, file_default_instances, TableStruct_primary_2eproto::offsets,
  file_level_metadata_primary_2eproto, file_level_enum_descriptors_primary_2eproto, file_level_service_descriptors_primary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_primary_2eproto_getter() {
  return &descriptor_table_primary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_primary_2eproto(&descriptor_table_primary_2eproto);
namespace primary {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Tlm_Status_Set_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[0];
}
bool Tlm_Status_Set_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Race_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[1];
}
bool Race_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Tlm_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[2];
}
bool Tlm_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inverter_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[3];
}
bool Inverter_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Car_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[4];
}
bool Car_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ts_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[5];
}
bool Ts_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ts_Status_Set_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[6];
}
bool Ts_Status_Set_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Set_Balancing_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[7];
}
bool Set_Balancing_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Traction_Control_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[8];
}
bool Traction_Control_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Map_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[9];
}
bool Map_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Car_Status_Set_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[10];
}
bool Car_Status_Set_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bound_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[11];
}
bool Bound_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pedal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[12];
}
bool Pedal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Balancing_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primary_2eproto);
  return file_level_enum_descriptors_primary_2eproto[13];
}
bool Balancing_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class STEER_VERSION::_Internal {
 public:
};

STEER_VERSION::STEER_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.STEER_VERSION)
}
STEER_VERSION::STEER_VERSION(const STEER_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_VERSION)
}

inline void STEER_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

STEER_VERSION::~STEER_VERSION() {
  // @@protoc_insertion_point(destructor:primary.STEER_VERSION)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void STEER_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEER_VERSION::ArenaDtor(void* object) {
  STEER_VERSION* _this = reinterpret_cast< STEER_VERSION* >(object);
  (void)_this;
}
void STEER_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEER_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEER_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEER_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_VERSION)
  return target;
}

size_t STEER_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEER_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEER_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEER_VERSION::GetClassData() const { return &_class_data_; }

void STEER_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEER_VERSION *>(to)->MergeFrom(
      static_cast<const STEER_VERSION &>(from));
}


void STEER_VERSION::MergeFrom(const STEER_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEER_VERSION::CopyFrom(const STEER_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_VERSION::IsInitialized() const {
  return true;
}

void STEER_VERSION::InternalSwap(STEER_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_VERSION, cancicd_version_)
      + sizeof(STEER_VERSION::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(STEER_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_VERSION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[0]);
}

// ===================================================================

class DAS_VERSION::_Internal {
 public:
};

DAS_VERSION::DAS_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.DAS_VERSION)
}
DAS_VERSION::DAS_VERSION(const DAS_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.DAS_VERSION)
}

inline void DAS_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

DAS_VERSION::~DAS_VERSION() {
  // @@protoc_insertion_point(destructor:primary.DAS_VERSION)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DAS_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DAS_VERSION::ArenaDtor(void* object) {
  DAS_VERSION* _this = reinterpret_cast< DAS_VERSION* >(object);
  (void)_this;
}
void DAS_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAS_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAS_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.DAS_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAS_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DAS_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.DAS_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.DAS_VERSION)
  return target;
}

size_t DAS_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.DAS_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DAS_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DAS_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DAS_VERSION::GetClassData() const { return &_class_data_; }

void DAS_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DAS_VERSION *>(to)->MergeFrom(
      static_cast<const DAS_VERSION &>(from));
}


void DAS_VERSION::MergeFrom(const DAS_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.DAS_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DAS_VERSION::CopyFrom(const DAS_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.DAS_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAS_VERSION::IsInitialized() const {
  return true;
}

void DAS_VERSION::InternalSwap(DAS_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAS_VERSION, cancicd_version_)
      + sizeof(DAS_VERSION::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(DAS_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAS_VERSION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[1]);
}

// ===================================================================

class HV_VERSION::_Internal {
 public:
};

HV_VERSION::HV_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_VERSION)
}
HV_VERSION::HV_VERSION(const HV_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_VERSION)
}

inline void HV_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

HV_VERSION::~HV_VERSION() {
  // @@protoc_insertion_point(destructor:primary.HV_VERSION)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_VERSION::ArenaDtor(void* object) {
  HV_VERSION* _this = reinterpret_cast< HV_VERSION* >(object);
  (void)_this;
}
void HV_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_VERSION)
  return target;
}

size_t HV_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_VERSION::GetClassData() const { return &_class_data_; }

void HV_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_VERSION *>(to)->MergeFrom(
      static_cast<const HV_VERSION &>(from));
}


void HV_VERSION::MergeFrom(const HV_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_VERSION::CopyFrom(const HV_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_VERSION::IsInitialized() const {
  return true;
}

void HV_VERSION::InternalSwap(HV_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_VERSION, cancicd_version_)
      + sizeof(HV_VERSION::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(HV_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_VERSION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[2]);
}

// ===================================================================

class LV_VERSION::_Internal {
 public:
};

LV_VERSION::LV_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LV_VERSION)
}
LV_VERSION::LV_VERSION(const LV_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_VERSION)
}

inline void LV_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

LV_VERSION::~LV_VERSION() {
  // @@protoc_insertion_point(destructor:primary.LV_VERSION)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LV_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_VERSION::ArenaDtor(void* object) {
  LV_VERSION* _this = reinterpret_cast< LV_VERSION* >(object);
  (void)_this;
}
void LV_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_VERSION)
  return target;
}

size_t LV_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_VERSION::GetClassData() const { return &_class_data_; }

void LV_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_VERSION *>(to)->MergeFrom(
      static_cast<const LV_VERSION &>(from));
}


void LV_VERSION::MergeFrom(const LV_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_VERSION::CopyFrom(const LV_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_VERSION::IsInitialized() const {
  return true;
}

void LV_VERSION::InternalSwap(LV_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_VERSION, cancicd_version_)
      + sizeof(LV_VERSION::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(LV_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_VERSION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[3]);
}

// ===================================================================

class TLM_VERSION::_Internal {
 public:
};

TLM_VERSION::TLM_VERSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TLM_VERSION)
}
TLM_VERSION::TLM_VERSION(const TLM_VERSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&component_version_, &from.component_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  // @@protoc_insertion_point(copy_constructor:primary.TLM_VERSION)
}

inline void TLM_VERSION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cancicd_version_) -
    reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
}

TLM_VERSION::~TLM_VERSION() {
  // @@protoc_insertion_point(destructor:primary.TLM_VERSION)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TLM_VERSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TLM_VERSION::ArenaDtor(void* object) {
  TLM_VERSION* _this = reinterpret_cast< TLM_VERSION* >(object);
  (void)_this;
}
void TLM_VERSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TLM_VERSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TLM_VERSION::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TLM_VERSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancicd_version_) -
      reinterpret_cast<char*>(&component_version_)) + sizeof(cancicd_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLM_VERSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cancicd_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cancicd_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLM_VERSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TLM_VERSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_version(), target);
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cancicd_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TLM_VERSION)
  return target;
}

size_t TLM_VERSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TLM_VERSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component_version = 1;
  if (this->_internal_component_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_version());
  }

  // uint32 cancicd_version = 2;
  if (this->_internal_cancicd_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancicd_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLM_VERSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLM_VERSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLM_VERSION::GetClassData() const { return &_class_data_; }

void TLM_VERSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLM_VERSION *>(to)->MergeFrom(
      static_cast<const TLM_VERSION &>(from));
}


void TLM_VERSION::MergeFrom(const TLM_VERSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TLM_VERSION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_component_version() != 0) {
    _internal_set_component_version(from._internal_component_version());
  }
  if (from._internal_cancicd_version() != 0) {
    _internal_set_cancicd_version(from._internal_cancicd_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLM_VERSION::CopyFrom(const TLM_VERSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TLM_VERSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLM_VERSION::IsInitialized() const {
  return true;
}

void TLM_VERSION::InternalSwap(TLM_VERSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLM_VERSION, cancicd_version_)
      + sizeof(TLM_VERSION::cancicd_version_)
      - PROTOBUF_FIELD_OFFSET(TLM_VERSION, component_version_)>(
          reinterpret_cast<char*>(&component_version_),
          reinterpret_cast<char*>(&other->component_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLM_VERSION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[4]);
}

// ===================================================================

class TIMESTAMP::_Internal {
 public:
};

TIMESTAMP::TIMESTAMP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TIMESTAMP)
}
TIMESTAMP::TIMESTAMP(const TIMESTAMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:primary.TIMESTAMP)
}

inline void TIMESTAMP::SharedCtor() {
timestamp_ = 0u;
}

TIMESTAMP::~TIMESTAMP() {
  // @@protoc_insertion_point(destructor:primary.TIMESTAMP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TIMESTAMP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TIMESTAMP::ArenaDtor(void* object) {
  TIMESTAMP* _this = reinterpret_cast< TIMESTAMP* >(object);
  (void)_this;
}
void TIMESTAMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TIMESTAMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TIMESTAMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TIMESTAMP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TIMESTAMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TIMESTAMP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TIMESTAMP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TIMESTAMP)
  return target;
}

size_t TIMESTAMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TIMESTAMP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TIMESTAMP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TIMESTAMP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TIMESTAMP::GetClassData() const { return &_class_data_; }

void TIMESTAMP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TIMESTAMP *>(to)->MergeFrom(
      static_cast<const TIMESTAMP &>(from));
}


void TIMESTAMP::MergeFrom(const TIMESTAMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TIMESTAMP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TIMESTAMP::CopyFrom(const TIMESTAMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TIMESTAMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIMESTAMP::IsInitialized() const {
  return true;
}

void TIMESTAMP::InternalSwap(TIMESTAMP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TIMESTAMP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[5]);
}

// ===================================================================

class SET_TLM_STATUS::_Internal {
 public:
};

SET_TLM_STATUS::SET_TLM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SET_TLM_STATUS)
}
SET_TLM_STATUS::SET_TLM_STATUS(const SET_TLM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tlm_status_set_, &from.tlm_status_set_,
    static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_set_)) + sizeof(circuit_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_TLM_STATUS)
}

inline void SET_TLM_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlm_status_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_set_)) + sizeof(circuit_));
}

SET_TLM_STATUS::~SET_TLM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_TLM_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SET_TLM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_TLM_STATUS::ArenaDtor(void* object) {
  SET_TLM_STATUS* _this = reinterpret_cast< SET_TLM_STATUS* >(object);
  (void)_this;
}
void SET_TLM_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_TLM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_TLM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TLM_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tlm_status_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&circuit_) -
      reinterpret_cast<char*>(&tlm_status_set_)) + sizeof(circuit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TLM_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Tlm_Status_Set tlm_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status_set(static_cast<::primary::Tlm_Status_Set>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Race_Type race_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::Race_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_TLM_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TLM_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Tlm_Status_Set tlm_status_set = 1;
  if (this->_internal_tlm_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status_set(), target);
  }

  // .primary.Race_Type race_type = 2;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race_type(), target);
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_driver(), target);
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_circuit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TLM_STATUS)
  return target;
}

size_t SET_TLM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TLM_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Tlm_Status_Set tlm_status_set = 1;
  if (this->_internal_tlm_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tlm_status_set());
  }

  // .primary.Race_Type race_type = 2;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_TLM_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_TLM_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_TLM_STATUS::GetClassData() const { return &_class_data_; }

void SET_TLM_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_TLM_STATUS *>(to)->MergeFrom(
      static_cast<const SET_TLM_STATUS &>(from));
}


void SET_TLM_STATUS::MergeFrom(const SET_TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tlm_status_set() != 0) {
    _internal_set_tlm_status_set(from._internal_tlm_status_set());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_TLM_STATUS::CopyFrom(const SET_TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TLM_STATUS::IsInitialized() const {
  return true;
}

void SET_TLM_STATUS::InternalSwap(SET_TLM_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_TLM_STATUS, circuit_)
      + sizeof(SET_TLM_STATUS::circuit_)
      - PROTOBUF_FIELD_OFFSET(SET_TLM_STATUS, tlm_status_set_)>(
          reinterpret_cast<char*>(&tlm_status_set_),
          reinterpret_cast<char*>(&other->tlm_status_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TLM_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[6]);
}

// ===================================================================

class STEER_SYSTEM_STATUS::_Internal {
 public:
};

STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.STEER_SYSTEM_STATUS)
}
STEER_SYSTEM_STATUS::STEER_SYSTEM_STATUS(const STEER_SYSTEM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  soc_temp_ = from.soc_temp_;
  // @@protoc_insertion_point(copy_constructor:primary.STEER_SYSTEM_STATUS)
}

inline void STEER_SYSTEM_STATUS::SharedCtor() {
soc_temp_ = 0u;
}

STEER_SYSTEM_STATUS::~STEER_SYSTEM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.STEER_SYSTEM_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void STEER_SYSTEM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEER_SYSTEM_STATUS::ArenaDtor(void* object) {
  STEER_SYSTEM_STATUS* _this = reinterpret_cast< STEER_SYSTEM_STATUS* >(object);
  (void)_this;
}
void STEER_SYSTEM_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEER_SYSTEM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEER_SYSTEM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_SYSTEM_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  soc_temp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_SYSTEM_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 soc_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          soc_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEER_SYSTEM_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_SYSTEM_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soc_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_SYSTEM_STATUS)
  return target;
}

size_t STEER_SYSTEM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_SYSTEM_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 soc_temp = 1;
  if (this->_internal_soc_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_soc_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEER_SYSTEM_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEER_SYSTEM_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEER_SYSTEM_STATUS::GetClassData() const { return &_class_data_; }

void STEER_SYSTEM_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEER_SYSTEM_STATUS *>(to)->MergeFrom(
      static_cast<const STEER_SYSTEM_STATUS &>(from));
}


void STEER_SYSTEM_STATUS::MergeFrom(const STEER_SYSTEM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_SYSTEM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_soc_temp() != 0) {
    _internal_set_soc_temp(from._internal_soc_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEER_SYSTEM_STATUS::CopyFrom(const STEER_SYSTEM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_SYSTEM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_SYSTEM_STATUS::IsInitialized() const {
  return true;
}

void STEER_SYSTEM_STATUS::InternalSwap(STEER_SYSTEM_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(soc_temp_, other->soc_temp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_SYSTEM_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[7]);
}

// ===================================================================

class TLM_STATUS::_Internal {
 public:
};

TLM_STATUS::TLM_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TLM_STATUS)
}
TLM_STATUS::TLM_STATUS(const TLM_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tlm_status_, &from.tlm_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(circuit_));
  // @@protoc_insertion_point(copy_constructor:primary.TLM_STATUS)
}

inline void TLM_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tlm_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&circuit_) -
    reinterpret_cast<char*>(&tlm_status_)) + sizeof(circuit_));
}

TLM_STATUS::~TLM_STATUS() {
  // @@protoc_insertion_point(destructor:primary.TLM_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TLM_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TLM_STATUS::ArenaDtor(void* object) {
  TLM_STATUS* _this = reinterpret_cast< TLM_STATUS* >(object);
  (void)_this;
}
void TLM_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TLM_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TLM_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TLM_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tlm_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&circuit_) -
      reinterpret_cast<char*>(&tlm_status_)) + sizeof(circuit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLM_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Tlm_Status tlm_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tlm_status(static_cast<::primary::Tlm_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Race_Type race_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_race_type(static_cast<::primary::Race_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 circuit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          circuit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLM_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TLM_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Tlm_Status tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tlm_status(), target);
  }

  // .primary.Race_Type race_type = 2;
  if (this->_internal_race_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race_type(), target);
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_driver(), target);
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_circuit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TLM_STATUS)
  return target;
}

size_t TLM_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TLM_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Tlm_Status tlm_status = 1;
  if (this->_internal_tlm_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tlm_status());
  }

  // .primary.Race_Type race_type = 2;
  if (this->_internal_race_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_race_type());
  }

  // uint32 driver = 3;
  if (this->_internal_driver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_driver());
  }

  // uint32 circuit = 4;
  if (this->_internal_circuit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_circuit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLM_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLM_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLM_STATUS::GetClassData() const { return &_class_data_; }

void TLM_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLM_STATUS *>(to)->MergeFrom(
      static_cast<const TLM_STATUS &>(from));
}


void TLM_STATUS::MergeFrom(const TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TLM_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tlm_status() != 0) {
    _internal_set_tlm_status(from._internal_tlm_status());
  }
  if (from._internal_race_type() != 0) {
    _internal_set_race_type(from._internal_race_type());
  }
  if (from._internal_driver() != 0) {
    _internal_set_driver(from._internal_driver());
  }
  if (from._internal_circuit() != 0) {
    _internal_set_circuit(from._internal_circuit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLM_STATUS::CopyFrom(const TLM_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TLM_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLM_STATUS::IsInitialized() const {
  return true;
}

void TLM_STATUS::InternalSwap(TLM_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLM_STATUS, circuit_)
      + sizeof(TLM_STATUS::circuit_)
      - PROTOBUF_FIELD_OFFSET(TLM_STATUS, tlm_status_)>(
          reinterpret_cast<char*>(&tlm_status_),
          reinterpret_cast<char*>(&other->tlm_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLM_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[8]);
}

// ===================================================================

class CAR_STATUS::_Internal {
 public:
};

CAR_STATUS::CAR_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.CAR_STATUS)
}
CAR_STATUS::CAR_STATUS(const CAR_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inverter_l_, &from.inverter_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  // @@protoc_insertion_point(copy_constructor:primary.CAR_STATUS)
}

inline void CAR_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inverter_l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&car_status_) -
    reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
}

CAR_STATUS::~CAR_STATUS() {
  // @@protoc_insertion_point(destructor:primary.CAR_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAR_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CAR_STATUS::ArenaDtor(void* object) {
  CAR_STATUS* _this = reinterpret_cast< CAR_STATUS* >(object);
  (void)_this;
}
void CAR_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAR_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAR_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.CAR_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inverter_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_status_) -
      reinterpret_cast<char*>(&inverter_l_)) + sizeof(car_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAR_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Inverter_Status inverter_l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_l(static_cast<::primary::Inverter_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Inverter_Status inverter_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inverter_r(static_cast<::primary::Inverter_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Car_Status car_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status(static_cast<::primary::Car_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAR_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.CAR_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Inverter_Status inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inverter_l(), target);
  }

  // .primary.Inverter_Status inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_inverter_r(), target);
  }

  // .primary.Car_Status car_status = 3;
  if (this->_internal_car_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_car_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.CAR_STATUS)
  return target;
}

size_t CAR_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.CAR_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Inverter_Status inverter_l = 1;
  if (this->_internal_inverter_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverter_l());
  }

  // .primary.Inverter_Status inverter_r = 2;
  if (this->_internal_inverter_r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inverter_r());
  }

  // .primary.Car_Status car_status = 3;
  if (this->_internal_car_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAR_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAR_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAR_STATUS::GetClassData() const { return &_class_data_; }

void CAR_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAR_STATUS *>(to)->MergeFrom(
      static_cast<const CAR_STATUS &>(from));
}


void CAR_STATUS::MergeFrom(const CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_car_status() != 0) {
    _internal_set_car_status(from._internal_car_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAR_STATUS::CopyFrom(const CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAR_STATUS::IsInitialized() const {
  return true;
}

void CAR_STATUS::InternalSwap(CAR_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAR_STATUS, car_status_)
      + sizeof(CAR_STATUS::car_status_)
      - PROTOBUF_FIELD_OFFSET(CAR_STATUS, inverter_l_)>(
          reinterpret_cast<char*>(&inverter_l_),
          reinterpret_cast<char*>(&other->inverter_l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAR_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[9]);
}

// ===================================================================

class SPEED::_Internal {
 public:
};

SPEED::SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SPEED)
}
SPEED::SPEED(const SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&encoder_r_, &from.encoder_r_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverter_l_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(inverter_l_));
  // @@protoc_insertion_point(copy_constructor:primary.SPEED)
}

inline void SPEED::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoder_r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverter_l_) -
    reinterpret_cast<char*>(&encoder_r_)) + sizeof(inverter_l_));
}

SPEED::~SPEED() {
  // @@protoc_insertion_point(destructor:primary.SPEED)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SPEED::ArenaDtor(void* object) {
  SPEED* _this = reinterpret_cast< SPEED* >(object);
  (void)_this;
}
void SPEED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SPEED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&encoder_r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inverter_l_) -
      reinterpret_cast<char*>(&encoder_r_)) + sizeof(inverter_l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPEED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 encoder_r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          encoder_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 encoder_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          encoder_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          inverter_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inverter_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          inverter_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPEED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SPEED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_encoder_r(), target);
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_encoder_l(), target);
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inverter_r(), target);
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_inverter_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SPEED)
  return target;
}

size_t SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SPEED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 encoder_r = 1;
  if (this->_internal_encoder_r() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_r());
  }

  // uint32 encoder_l = 2;
  if (this->_internal_encoder_l() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_encoder_l());
  }

  // uint32 inverter_r = 3;
  if (this->_internal_inverter_r() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_r());
  }

  // uint32 inverter_l = 4;
  if (this->_internal_inverter_l() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inverter_l());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPEED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPEED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPEED::GetClassData() const { return &_class_data_; }

void SPEED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SPEED *>(to)->MergeFrom(
      static_cast<const SPEED &>(from));
}


void SPEED::MergeFrom(const SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encoder_r() != 0) {
    _internal_set_encoder_r(from._internal_encoder_r());
  }
  if (from._internal_encoder_l() != 0) {
    _internal_set_encoder_l(from._internal_encoder_l());
  }
  if (from._internal_inverter_r() != 0) {
    _internal_set_inverter_r(from._internal_inverter_r());
  }
  if (from._internal_inverter_l() != 0) {
    _internal_set_inverter_l(from._internal_inverter_l());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPEED::CopyFrom(const SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPEED::IsInitialized() const {
  return true;
}

void SPEED::InternalSwap(SPEED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SPEED, inverter_l_)
      + sizeof(SPEED::inverter_l_)
      - PROTOBUF_FIELD_OFFSET(SPEED, encoder_r_)>(
          reinterpret_cast<char*>(&encoder_r_),
          reinterpret_cast<char*>(&other->encoder_r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SPEED::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[10]);
}

// ===================================================================

class HV_VOLTAGE::_Internal {
 public:
};

HV_VOLTAGE::HV_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_VOLTAGE)
}
HV_VOLTAGE::HV_VOLTAGE(const HV_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pack_voltage_, &from.pack_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_cell_voltage_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(min_cell_voltage_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_VOLTAGE)
}

inline void HV_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pack_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_cell_voltage_) -
    reinterpret_cast<char*>(&pack_voltage_)) + sizeof(min_cell_voltage_));
}

HV_VOLTAGE::~HV_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.HV_VOLTAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_VOLTAGE::ArenaDtor(void* object) {
  HV_VOLTAGE* _this = reinterpret_cast< HV_VOLTAGE* >(object);
  (void)_this;
}
void HV_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pack_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_cell_voltage_) -
      reinterpret_cast<char*>(&pack_voltage_)) + sizeof(min_cell_voltage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pack_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pack_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bus_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bus_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_cell_voltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_cell_voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          min_cell_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pack_voltage(), target);
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bus_voltage(), target);
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_cell_voltage(), target);
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_cell_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_VOLTAGE)
  return target;
}

size_t HV_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pack_voltage = 1;
  if (this->_internal_pack_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pack_voltage());
  }

  // uint32 bus_voltage = 2;
  if (this->_internal_bus_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_voltage());
  }

  // uint32 max_cell_voltage = 3;
  if (this->_internal_max_cell_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_cell_voltage());
  }

  // uint32 min_cell_voltage = 4;
  if (this->_internal_min_cell_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_cell_voltage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_VOLTAGE::GetClassData() const { return &_class_data_; }

void HV_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_VOLTAGE *>(to)->MergeFrom(
      static_cast<const HV_VOLTAGE &>(from));
}


void HV_VOLTAGE::MergeFrom(const HV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pack_voltage() != 0) {
    _internal_set_pack_voltage(from._internal_pack_voltage());
  }
  if (from._internal_bus_voltage() != 0) {
    _internal_set_bus_voltage(from._internal_bus_voltage());
  }
  if (from._internal_max_cell_voltage() != 0) {
    _internal_set_max_cell_voltage(from._internal_max_cell_voltage());
  }
  if (from._internal_min_cell_voltage() != 0) {
    _internal_set_min_cell_voltage(from._internal_min_cell_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_VOLTAGE::CopyFrom(const HV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_VOLTAGE::IsInitialized() const {
  return true;
}

void HV_VOLTAGE::InternalSwap(HV_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_VOLTAGE, min_cell_voltage_)
      + sizeof(HV_VOLTAGE::min_cell_voltage_)
      - PROTOBUF_FIELD_OFFSET(HV_VOLTAGE, pack_voltage_)>(
          reinterpret_cast<char*>(&pack_voltage_),
          reinterpret_cast<char*>(&other->pack_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_VOLTAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[11]);
}

// ===================================================================

class HV_CURRENT::_Internal {
 public:
};

HV_CURRENT::HV_CURRENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_CURRENT)
}
HV_CURRENT::HV_CURRENT(const HV_CURRENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&current_)) + sizeof(power_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CURRENT)
}

inline void HV_CURRENT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&current_)) + sizeof(power_));
}

HV_CURRENT::~HV_CURRENT() {
  // @@protoc_insertion_point(destructor:primary.HV_CURRENT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_CURRENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CURRENT::ArenaDtor(void* object) {
  HV_CURRENT* _this = reinterpret_cast< HV_CURRENT* >(object);
  (void)_this;
}
void HV_CURRENT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CURRENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CURRENT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CURRENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&current_)) + sizeof(power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CURRENT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CURRENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CURRENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // int32 power = 2;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CURRENT)
  return target;
}

size_t HV_CURRENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CURRENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  // int32 power = 2;
  if (this->_internal_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CURRENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CURRENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CURRENT::GetClassData() const { return &_class_data_; }

void HV_CURRENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CURRENT *>(to)->MergeFrom(
      static_cast<const HV_CURRENT &>(from));
}


void HV_CURRENT::MergeFrom(const HV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CURRENT::CopyFrom(const HV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CURRENT::IsInitialized() const {
  return true;
}

void HV_CURRENT::InternalSwap(HV_CURRENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CURRENT, power_)
      + sizeof(HV_CURRENT::power_)
      - PROTOBUF_FIELD_OFFSET(HV_CURRENT, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CURRENT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[12]);
}

// ===================================================================

class HV_TEMP::_Internal {
 public:
};

HV_TEMP::HV_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_TEMP)
}
HV_TEMP::HV_TEMP(const HV_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_temp_, &from.average_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_TEMP)
}

inline void HV_TEMP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_temp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_temp_) -
    reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
}

HV_TEMP::~HV_TEMP() {
  // @@protoc_insertion_point(destructor:primary.HV_TEMP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_TEMP::ArenaDtor(void* object) {
  HV_TEMP* _this = reinterpret_cast< HV_TEMP* >(object);
  (void)_this;
}
void HV_TEMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_TEMP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temp_) -
      reinterpret_cast<char*>(&average_temp_)) + sizeof(min_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_TEMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 average_temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          average_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          min_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_TEMP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_TEMP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_temp(), target);
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_temp(), target);
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_TEMP)
  return target;
}

size_t HV_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_TEMP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 average_temp = 1;
  if (this->_internal_average_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_average_temp());
  }

  // uint32 max_temp = 2;
  if (this->_internal_max_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_temp());
  }

  // uint32 min_temp = 3;
  if (this->_internal_min_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_TEMP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_TEMP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_TEMP::GetClassData() const { return &_class_data_; }

void HV_TEMP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_TEMP *>(to)->MergeFrom(
      static_cast<const HV_TEMP &>(from));
}


void HV_TEMP::MergeFrom(const HV_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average_temp() != 0) {
    _internal_set_average_temp(from._internal_average_temp());
  }
  if (from._internal_max_temp() != 0) {
    _internal_set_max_temp(from._internal_max_temp());
  }
  if (from._internal_min_temp() != 0) {
    _internal_set_min_temp(from._internal_min_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_TEMP::CopyFrom(const HV_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_TEMP::IsInitialized() const {
  return true;
}

void HV_TEMP::InternalSwap(HV_TEMP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_TEMP, min_temp_)
      + sizeof(HV_TEMP::min_temp_)
      - PROTOBUF_FIELD_OFFSET(HV_TEMP, average_temp_)>(
          reinterpret_cast<char*>(&average_temp_),
          reinterpret_cast<char*>(&other->average_temp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_TEMP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[13]);
}

// ===================================================================

class HV_ERRORS::_Internal {
 public:
};

HV_ERRORS::HV_ERRORS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_ERRORS)
}
HV_ERRORS::HV_ERRORS(const HV_ERRORS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warnings_, &from.warnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_ERRORS)
}

inline void HV_ERRORS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&warnings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&warnings_)) + sizeof(errors_));
}

HV_ERRORS::~HV_ERRORS() {
  // @@protoc_insertion_point(destructor:primary.HV_ERRORS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_ERRORS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_ERRORS::ArenaDtor(void* object) {
  HV_ERRORS* _this = reinterpret_cast< HV_ERRORS* >(object);
  (void)_this;
}
void HV_ERRORS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_ERRORS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_ERRORS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_ERRORS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&warnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&warnings_)) + sizeof(errors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_ERRORS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 warnings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          warnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_ERRORS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_ERRORS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_warnings(), target);
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_ERRORS)
  return target;
}

size_t HV_ERRORS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_ERRORS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 warnings = 1;
  if (this->_internal_warnings() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_warnings());
  }

  // uint32 errors = 2;
  if (this->_internal_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_ERRORS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_ERRORS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_ERRORS::GetClassData() const { return &_class_data_; }

void HV_ERRORS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_ERRORS *>(to)->MergeFrom(
      static_cast<const HV_ERRORS &>(from));
}


void HV_ERRORS::MergeFrom(const HV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_ERRORS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_warnings() != 0) {
    _internal_set_warnings(from._internal_warnings());
  }
  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_ERRORS::CopyFrom(const HV_ERRORS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_ERRORS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_ERRORS::IsInitialized() const {
  return true;
}

void HV_ERRORS::InternalSwap(HV_ERRORS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_ERRORS, errors_)
      + sizeof(HV_ERRORS::errors_)
      - PROTOBUF_FIELD_OFFSET(HV_ERRORS, warnings_)>(
          reinterpret_cast<char*>(&warnings_),
          reinterpret_cast<char*>(&other->warnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_ERRORS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[14]);
}

// ===================================================================

class TS_STATUS::_Internal {
 public:
};

TS_STATUS::TS_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.TS_STATUS)
}
TS_STATUS::TS_STATUS(const TS_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_status_ = from.ts_status_;
  // @@protoc_insertion_point(copy_constructor:primary.TS_STATUS)
}

inline void TS_STATUS::SharedCtor() {
ts_status_ = 0;
}

TS_STATUS::~TS_STATUS() {
  // @@protoc_insertion_point(destructor:primary.TS_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TS_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TS_STATUS::ArenaDtor(void* object) {
  TS_STATUS* _this = reinterpret_cast< TS_STATUS* >(object);
  (void)_this;
}
void TS_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TS_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TS_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.TS_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TS_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Ts_Status ts_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status(static_cast<::primary::Ts_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TS_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.TS_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Ts_Status ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.TS_STATUS)
  return target;
}

size_t TS_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.TS_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Ts_Status ts_status = 1;
  if (this->_internal_ts_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TS_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TS_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TS_STATUS::GetClassData() const { return &_class_data_; }

void TS_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TS_STATUS *>(to)->MergeFrom(
      static_cast<const TS_STATUS &>(from));
}


void TS_STATUS::MergeFrom(const TS_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.TS_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ts_status() != 0) {
    _internal_set_ts_status(from._internal_ts_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TS_STATUS::CopyFrom(const TS_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.TS_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TS_STATUS::IsInitialized() const {
  return true;
}

void TS_STATUS::InternalSwap(TS_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ts_status_, other->ts_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TS_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[15]);
}

// ===================================================================

class SET_TS_STATUS::_Internal {
 public:
};

SET_TS_STATUS::SET_TS_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SET_TS_STATUS)
}
SET_TS_STATUS::SET_TS_STATUS(const SET_TS_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_status_set_ = from.ts_status_set_;
  // @@protoc_insertion_point(copy_constructor:primary.SET_TS_STATUS)
}

inline void SET_TS_STATUS::SharedCtor() {
ts_status_set_ = 0;
}

SET_TS_STATUS::~SET_TS_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_TS_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SET_TS_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_TS_STATUS::ArenaDtor(void* object) {
  SET_TS_STATUS* _this = reinterpret_cast< SET_TS_STATUS* >(object);
  (void)_this;
}
void SET_TS_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_TS_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_TS_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_TS_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_status_set_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_TS_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Ts_Status_Set ts_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ts_status_set(static_cast<::primary::Ts_Status_Set>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_TS_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_TS_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Ts_Status_Set ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ts_status_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_TS_STATUS)
  return target;
}

size_t SET_TS_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_TS_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Ts_Status_Set ts_status_set = 1;
  if (this->_internal_ts_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ts_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_TS_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_TS_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_TS_STATUS::GetClassData() const { return &_class_data_; }

void SET_TS_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_TS_STATUS *>(to)->MergeFrom(
      static_cast<const SET_TS_STATUS &>(from));
}


void SET_TS_STATUS::MergeFrom(const SET_TS_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_TS_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ts_status_set() != 0) {
    _internal_set_ts_status_set(from._internal_ts_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_TS_STATUS::CopyFrom(const SET_TS_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_TS_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_TS_STATUS::IsInitialized() const {
  return true;
}

void SET_TS_STATUS::InternalSwap(SET_TS_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ts_status_set_, other->ts_status_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_TS_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[16]);
}

// ===================================================================

class SET_CELL_BALANCING_STATUS::_Internal {
 public:
};

SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SET_CELL_BALANCING_STATUS)
}
SET_CELL_BALANCING_STATUS::SET_CELL_BALANCING_STATUS(const SET_CELL_BALANCING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_balancing_status_ = from.set_balancing_status_;
  // @@protoc_insertion_point(copy_constructor:primary.SET_CELL_BALANCING_STATUS)
}

inline void SET_CELL_BALANCING_STATUS::SharedCtor() {
set_balancing_status_ = 0;
}

SET_CELL_BALANCING_STATUS::~SET_CELL_BALANCING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_CELL_BALANCING_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SET_CELL_BALANCING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_CELL_BALANCING_STATUS::ArenaDtor(void* object) {
  SET_CELL_BALANCING_STATUS* _this = reinterpret_cast< SET_CELL_BALANCING_STATUS* >(object);
  (void)_this;
}
void SET_CELL_BALANCING_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_CELL_BALANCING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_CELL_BALANCING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_balancing_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_CELL_BALANCING_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Set_Balancing_Status set_balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_balancing_status(static_cast<::primary::Set_Balancing_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_CELL_BALANCING_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Set_Balancing_Status set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_set_balancing_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_CELL_BALANCING_STATUS)
  return target;
}

size_t SET_CELL_BALANCING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_CELL_BALANCING_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Set_Balancing_Status set_balancing_status = 1;
  if (this->_internal_set_balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_set_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_CELL_BALANCING_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_CELL_BALANCING_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_CELL_BALANCING_STATUS::GetClassData() const { return &_class_data_; }

void SET_CELL_BALANCING_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_CELL_BALANCING_STATUS *>(to)->MergeFrom(
      static_cast<const SET_CELL_BALANCING_STATUS &>(from));
}


void SET_CELL_BALANCING_STATUS::MergeFrom(const SET_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_set_balancing_status() != 0) {
    _internal_set_set_balancing_status(from._internal_set_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_CELL_BALANCING_STATUS::CopyFrom(const SET_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_CELL_BALANCING_STATUS::IsInitialized() const {
  return true;
}

void SET_CELL_BALANCING_STATUS::InternalSwap(SET_CELL_BALANCING_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(set_balancing_status_, other->set_balancing_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_CELL_BALANCING_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[17]);
}

// ===================================================================

class HANDCART_STATUS::_Internal {
 public:
};

HANDCART_STATUS::HANDCART_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HANDCART_STATUS)
}
HANDCART_STATUS::HANDCART_STATUS(const HANDCART_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connected_ = from.connected_;
  // @@protoc_insertion_point(copy_constructor:primary.HANDCART_STATUS)
}

inline void HANDCART_STATUS::SharedCtor() {
connected_ = false;
}

HANDCART_STATUS::~HANDCART_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HANDCART_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HANDCART_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HANDCART_STATUS::ArenaDtor(void* object) {
  HANDCART_STATUS* _this = reinterpret_cast< HANDCART_STATUS* >(object);
  (void)_this;
}
void HANDCART_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HANDCART_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HANDCART_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HANDCART_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HANDCART_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HANDCART_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HANDCART_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HANDCART_STATUS)
  return target;
}

size_t HANDCART_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HANDCART_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HANDCART_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HANDCART_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HANDCART_STATUS::GetClassData() const { return &_class_data_; }

void HANDCART_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HANDCART_STATUS *>(to)->MergeFrom(
      static_cast<const HANDCART_STATUS &>(from));
}


void HANDCART_STATUS::MergeFrom(const HANDCART_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HANDCART_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HANDCART_STATUS::CopyFrom(const HANDCART_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HANDCART_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HANDCART_STATUS::IsInitialized() const {
  return true;
}

void HANDCART_STATUS::InternalSwap(HANDCART_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(connected_, other->connected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HANDCART_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[18]);
}

// ===================================================================

class STEER_STATUS::_Internal {
 public:
};

STEER_STATUS::STEER_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.STEER_STATUS)
}
STEER_STATUS::STEER_STATUS(const STEER_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&traction_control_, &from.traction_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_) -
    reinterpret_cast<char*>(&traction_control_)) + sizeof(map_));
  // @@protoc_insertion_point(copy_constructor:primary.STEER_STATUS)
}

inline void STEER_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&traction_control_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_) -
    reinterpret_cast<char*>(&traction_control_)) + sizeof(map_));
}

STEER_STATUS::~STEER_STATUS() {
  // @@protoc_insertion_point(destructor:primary.STEER_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void STEER_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STEER_STATUS::ArenaDtor(void* object) {
  STEER_STATUS* _this = reinterpret_cast< STEER_STATUS* >(object);
  (void)_this;
}
void STEER_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STEER_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STEER_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.STEER_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&traction_control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&traction_control_)) + sizeof(map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STEER_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Traction_Control traction_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traction_control(static_cast<::primary::Traction_Control>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Map map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map(static_cast<::primary::Map>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STEER_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.STEER_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Traction_Control traction_control = 1;
  if (this->_internal_traction_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_traction_control(), target);
  }

  // .primary.Map map = 2;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.STEER_STATUS)
  return target;
}

size_t STEER_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.STEER_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Traction_Control traction_control = 1;
  if (this->_internal_traction_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_traction_control());
  }

  // .primary.Map map = 2;
  if (this->_internal_map() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_map());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STEER_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STEER_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STEER_STATUS::GetClassData() const { return &_class_data_; }

void STEER_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STEER_STATUS *>(to)->MergeFrom(
      static_cast<const STEER_STATUS &>(from));
}


void STEER_STATUS::MergeFrom(const STEER_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.STEER_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_traction_control() != 0) {
    _internal_set_traction_control(from._internal_traction_control());
  }
  if (from._internal_map() != 0) {
    _internal_set_map(from._internal_map());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STEER_STATUS::CopyFrom(const STEER_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.STEER_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEER_STATUS::IsInitialized() const {
  return true;
}

void STEER_STATUS::InternalSwap(STEER_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STEER_STATUS, map_)
      + sizeof(STEER_STATUS::map_)
      - PROTOBUF_FIELD_OFFSET(STEER_STATUS, traction_control_)>(
          reinterpret_cast<char*>(&traction_control_),
          reinterpret_cast<char*>(&other->traction_control_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STEER_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[19]);
}

// ===================================================================

class SET_CAR_STATUS::_Internal {
 public:
};

SET_CAR_STATUS::SET_CAR_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SET_CAR_STATUS)
}
SET_CAR_STATUS::SET_CAR_STATUS(const SET_CAR_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  car_status_set_ = from.car_status_set_;
  // @@protoc_insertion_point(copy_constructor:primary.SET_CAR_STATUS)
}

inline void SET_CAR_STATUS::SharedCtor() {
car_status_set_ = 0;
}

SET_CAR_STATUS::~SET_CAR_STATUS() {
  // @@protoc_insertion_point(destructor:primary.SET_CAR_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SET_CAR_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_CAR_STATUS::ArenaDtor(void* object) {
  SET_CAR_STATUS* _this = reinterpret_cast< SET_CAR_STATUS* >(object);
  (void)_this;
}
void SET_CAR_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_CAR_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_CAR_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_CAR_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  car_status_set_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_CAR_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Car_Status_Set car_status_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_car_status_set(static_cast<::primary::Car_Status_Set>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_CAR_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_CAR_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Car_Status_Set car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_status_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_CAR_STATUS)
  return target;
}

size_t SET_CAR_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_CAR_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Car_Status_Set car_status_set = 1;
  if (this->_internal_car_status_set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_status_set());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_CAR_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_CAR_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_CAR_STATUS::GetClassData() const { return &_class_data_; }

void SET_CAR_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_CAR_STATUS *>(to)->MergeFrom(
      static_cast<const SET_CAR_STATUS &>(from));
}


void SET_CAR_STATUS::MergeFrom(const SET_CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_CAR_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_car_status_set() != 0) {
    _internal_set_car_status_set(from._internal_car_status_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_CAR_STATUS::CopyFrom(const SET_CAR_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_CAR_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_CAR_STATUS::IsInitialized() const {
  return true;
}

void SET_CAR_STATUS::InternalSwap(SET_CAR_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(car_status_set_, other->car_status_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_CAR_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[20]);
}

// ===================================================================

class SET_PEDALS_RANGE::_Internal {
 public:
};

SET_PEDALS_RANGE::SET_PEDALS_RANGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.SET_PEDALS_RANGE)
}
SET_PEDALS_RANGE::SET_PEDALS_RANGE(const SET_PEDALS_RANGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bound_, &from.bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&pedal_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(pedal_));
  // @@protoc_insertion_point(copy_constructor:primary.SET_PEDALS_RANGE)
}

inline void SET_PEDALS_RANGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pedal_) -
    reinterpret_cast<char*>(&bound_)) + sizeof(pedal_));
}

SET_PEDALS_RANGE::~SET_PEDALS_RANGE() {
  // @@protoc_insertion_point(destructor:primary.SET_PEDALS_RANGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SET_PEDALS_RANGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SET_PEDALS_RANGE::ArenaDtor(void* object) {
  SET_PEDALS_RANGE* _this = reinterpret_cast< SET_PEDALS_RANGE* >(object);
  (void)_this;
}
void SET_PEDALS_RANGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SET_PEDALS_RANGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SET_PEDALS_RANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.SET_PEDALS_RANGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pedal_) -
      reinterpret_cast<char*>(&bound_)) + sizeof(pedal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SET_PEDALS_RANGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Bound bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bound(static_cast<::primary::Bound>(val));
        } else
          goto handle_unusual;
        continue;
      // .primary.Pedal pedal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pedal(static_cast<::primary::Pedal>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SET_PEDALS_RANGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.SET_PEDALS_RANGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->_internal_bound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bound(), target);
  }

  // .primary.Pedal pedal = 2;
  if (this->_internal_pedal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pedal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.SET_PEDALS_RANGE)
  return target;
}

size_t SET_PEDALS_RANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.SET_PEDALS_RANGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Bound bound = 1;
  if (this->_internal_bound() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bound());
  }

  // .primary.Pedal pedal = 2;
  if (this->_internal_pedal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pedal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SET_PEDALS_RANGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SET_PEDALS_RANGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SET_PEDALS_RANGE::GetClassData() const { return &_class_data_; }

void SET_PEDALS_RANGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SET_PEDALS_RANGE *>(to)->MergeFrom(
      static_cast<const SET_PEDALS_RANGE &>(from));
}


void SET_PEDALS_RANGE::MergeFrom(const SET_PEDALS_RANGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.SET_PEDALS_RANGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bound() != 0) {
    _internal_set_bound(from._internal_bound());
  }
  if (from._internal_pedal() != 0) {
    _internal_set_pedal(from._internal_pedal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SET_PEDALS_RANGE::CopyFrom(const SET_PEDALS_RANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.SET_PEDALS_RANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SET_PEDALS_RANGE::IsInitialized() const {
  return true;
}

void SET_PEDALS_RANGE::InternalSwap(SET_PEDALS_RANGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SET_PEDALS_RANGE, pedal_)
      + sizeof(SET_PEDALS_RANGE::pedal_)
      - PROTOBUF_FIELD_OFFSET(SET_PEDALS_RANGE, bound_)>(
          reinterpret_cast<char*>(&bound_),
          reinterpret_cast<char*>(&other->bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SET_PEDALS_RANGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[21]);
}

// ===================================================================

class LV_CURRENT::_Internal {
 public:
};

LV_CURRENT::LV_CURRENT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LV_CURRENT)
}
LV_CURRENT::LV_CURRENT(const LV_CURRENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:primary.LV_CURRENT)
}

inline void LV_CURRENT::SharedCtor() {
current_ = 0u;
}

LV_CURRENT::~LV_CURRENT() {
  // @@protoc_insertion_point(destructor:primary.LV_CURRENT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LV_CURRENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_CURRENT::ArenaDtor(void* object) {
  LV_CURRENT* _this = reinterpret_cast< LV_CURRENT* >(object);
  (void)_this;
}
void LV_CURRENT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_CURRENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_CURRENT::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_CURRENT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_CURRENT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_CURRENT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_CURRENT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_CURRENT)
  return target;
}

size_t LV_CURRENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_CURRENT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current = 1;
  if (this->_internal_current() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_CURRENT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_CURRENT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_CURRENT::GetClassData() const { return &_class_data_; }

void LV_CURRENT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_CURRENT *>(to)->MergeFrom(
      static_cast<const LV_CURRENT &>(from));
}


void LV_CURRENT::MergeFrom(const LV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_CURRENT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_CURRENT::CopyFrom(const LV_CURRENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_CURRENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_CURRENT::IsInitialized() const {
  return true;
}

void LV_CURRENT::InternalSwap(LV_CURRENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(current_, other->current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_CURRENT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[22]);
}

// ===================================================================

class LV_VOLTAGE::_Internal {
 public:
};

LV_VOLTAGE::LV_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LV_VOLTAGE)
}
LV_VOLTAGE::LV_VOLTAGE(const LV_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_voltage_, &from.total_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage_4_) -
    reinterpret_cast<char*>(&total_voltage_)) + sizeof(voltage_4_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_VOLTAGE)
}

inline void LV_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_voltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltage_4_) -
    reinterpret_cast<char*>(&total_voltage_)) + sizeof(voltage_4_));
}

LV_VOLTAGE::~LV_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.LV_VOLTAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LV_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_VOLTAGE::ArenaDtor(void* object) {
  LV_VOLTAGE* _this = reinterpret_cast< LV_VOLTAGE* >(object);
  (void)_this;
}
void LV_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_4_) -
      reinterpret_cast<char*>(&total_voltage_)) + sizeof(voltage_4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          voltage_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_voltage(), target);
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_2(), target);
  }

  // uint32 voltage_3 = 4;
  if (this->_internal_voltage_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_3(), target);
  }

  // uint32 voltage_4 = 5;
  if (this->_internal_voltage_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_voltage_4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_VOLTAGE)
  return target;
}

size_t LV_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 total_voltage = 1;
  if (this->_internal_total_voltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_voltage());
  }

  // uint32 voltage_1 = 2;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 3;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  // uint32 voltage_3 = 4;
  if (this->_internal_voltage_3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_3());
  }

  // uint32 voltage_4 = 5;
  if (this->_internal_voltage_4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_VOLTAGE::GetClassData() const { return &_class_data_; }

void LV_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_VOLTAGE *>(to)->MergeFrom(
      static_cast<const LV_VOLTAGE &>(from));
}


void LV_VOLTAGE::MergeFrom(const LV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_voltage() != 0) {
    _internal_set_total_voltage(from._internal_total_voltage());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  if (from._internal_voltage_3() != 0) {
    _internal_set_voltage_3(from._internal_voltage_3());
  }
  if (from._internal_voltage_4() != 0) {
    _internal_set_voltage_4(from._internal_voltage_4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_VOLTAGE::CopyFrom(const LV_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_VOLTAGE::IsInitialized() const {
  return true;
}

void LV_VOLTAGE::InternalSwap(LV_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_VOLTAGE, voltage_4_)
      + sizeof(LV_VOLTAGE::voltage_4_)
      - PROTOBUF_FIELD_OFFSET(LV_VOLTAGE, total_voltage_)>(
          reinterpret_cast<char*>(&total_voltage_),
          reinterpret_cast<char*>(&other->total_voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_VOLTAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[23]);
}

// ===================================================================

class LV_TEMPERATURE::_Internal {
 public:
};

LV_TEMPERATURE::LV_TEMPERATURE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.LV_TEMPERATURE)
}
LV_TEMPERATURE::LV_TEMPERATURE(const LV_TEMPERATURE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bp_temperature_, &from.bp_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&dcdc_temperature_) -
    reinterpret_cast<char*>(&bp_temperature_)) + sizeof(dcdc_temperature_));
  // @@protoc_insertion_point(copy_constructor:primary.LV_TEMPERATURE)
}

inline void LV_TEMPERATURE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bp_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dcdc_temperature_) -
    reinterpret_cast<char*>(&bp_temperature_)) + sizeof(dcdc_temperature_));
}

LV_TEMPERATURE::~LV_TEMPERATURE() {
  // @@protoc_insertion_point(destructor:primary.LV_TEMPERATURE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LV_TEMPERATURE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LV_TEMPERATURE::ArenaDtor(void* object) {
  LV_TEMPERATURE* _this = reinterpret_cast< LV_TEMPERATURE* >(object);
  (void)_this;
}
void LV_TEMPERATURE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LV_TEMPERATURE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LV_TEMPERATURE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.LV_TEMPERATURE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bp_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dcdc_temperature_) -
      reinterpret_cast<char*>(&bp_temperature_)) + sizeof(dcdc_temperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LV_TEMPERATURE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bp_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bp_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dcdc_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dcdc_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LV_TEMPERATURE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.LV_TEMPERATURE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bp_temperature = 1;
  if (this->_internal_bp_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bp_temperature(), target);
  }

  // uint32 dcdc_temperature = 2;
  if (this->_internal_dcdc_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dcdc_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.LV_TEMPERATURE)
  return target;
}

size_t LV_TEMPERATURE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.LV_TEMPERATURE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bp_temperature = 1;
  if (this->_internal_bp_temperature() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bp_temperature());
  }

  // uint32 dcdc_temperature = 2;
  if (this->_internal_dcdc_temperature() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dcdc_temperature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LV_TEMPERATURE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LV_TEMPERATURE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LV_TEMPERATURE::GetClassData() const { return &_class_data_; }

void LV_TEMPERATURE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LV_TEMPERATURE *>(to)->MergeFrom(
      static_cast<const LV_TEMPERATURE &>(from));
}


void LV_TEMPERATURE::MergeFrom(const LV_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.LV_TEMPERATURE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bp_temperature() != 0) {
    _internal_set_bp_temperature(from._internal_bp_temperature());
  }
  if (from._internal_dcdc_temperature() != 0) {
    _internal_set_dcdc_temperature(from._internal_dcdc_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LV_TEMPERATURE::CopyFrom(const LV_TEMPERATURE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.LV_TEMPERATURE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LV_TEMPERATURE::IsInitialized() const {
  return true;
}

void LV_TEMPERATURE::InternalSwap(LV_TEMPERATURE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LV_TEMPERATURE, dcdc_temperature_)
      + sizeof(LV_TEMPERATURE::dcdc_temperature_)
      - PROTOBUF_FIELD_OFFSET(LV_TEMPERATURE, bp_temperature_)>(
          reinterpret_cast<char*>(&bp_temperature_),
          reinterpret_cast<char*>(&other->bp_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LV_TEMPERATURE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[24]);
}

// ===================================================================

class COOLING_STATUS::_Internal {
 public:
};

COOLING_STATUS::COOLING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.COOLING_STATUS)
}
COOLING_STATUS::COOLING_STATUS(const COOLING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hv_fan_speed_, &from.hv_fan_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pump_speed_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
  // @@protoc_insertion_point(copy_constructor:primary.COOLING_STATUS)
}

inline void COOLING_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hv_fan_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pump_speed_) -
    reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
}

COOLING_STATUS::~COOLING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.COOLING_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void COOLING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void COOLING_STATUS::ArenaDtor(void* object) {
  COOLING_STATUS* _this = reinterpret_cast< COOLING_STATUS* >(object);
  (void)_this;
}
void COOLING_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COOLING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void COOLING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.COOLING_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hv_fan_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pump_speed_) -
      reinterpret_cast<char*>(&hv_fan_speed_)) + sizeof(pump_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COOLING_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hv_fan_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lv_fan_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lv_fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pump_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pump_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* COOLING_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.COOLING_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hv_fan_speed(), target);
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lv_fan_speed(), target);
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pump_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.COOLING_STATUS)
  return target;
}

size_t COOLING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.COOLING_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hv_fan_speed = 1;
  if (this->_internal_hv_fan_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hv_fan_speed());
  }

  // uint32 lv_fan_speed = 2;
  if (this->_internal_lv_fan_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lv_fan_speed());
  }

  // uint32 pump_speed = 3;
  if (this->_internal_pump_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pump_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COOLING_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    COOLING_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COOLING_STATUS::GetClassData() const { return &_class_data_; }

void COOLING_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<COOLING_STATUS *>(to)->MergeFrom(
      static_cast<const COOLING_STATUS &>(from));
}


void COOLING_STATUS::MergeFrom(const COOLING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.COOLING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hv_fan_speed() != 0) {
    _internal_set_hv_fan_speed(from._internal_hv_fan_speed());
  }
  if (from._internal_lv_fan_speed() != 0) {
    _internal_set_lv_fan_speed(from._internal_lv_fan_speed());
  }
  if (from._internal_pump_speed() != 0) {
    _internal_set_pump_speed(from._internal_pump_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void COOLING_STATUS::CopyFrom(const COOLING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.COOLING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COOLING_STATUS::IsInitialized() const {
  return true;
}

void COOLING_STATUS::InternalSwap(COOLING_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(COOLING_STATUS, pump_speed_)
      + sizeof(COOLING_STATUS::pump_speed_)
      - PROTOBUF_FIELD_OFFSET(COOLING_STATUS, hv_fan_speed_)>(
          reinterpret_cast<char*>(&hv_fan_speed_),
          reinterpret_cast<char*>(&other->hv_fan_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata COOLING_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[25]);
}

// ===================================================================

class HV_CELLS_VOLTAGE::_Internal {
 public:
};

HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELLS_VOLTAGE)
}
HV_CELLS_VOLTAGE::HV_CELLS_VOLTAGE(const HV_CELLS_VOLTAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_index_, &from.cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage_2_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(voltage_2_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELLS_VOLTAGE)
}

inline void HV_CELLS_VOLTAGE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltage_2_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(voltage_2_));
}

HV_CELLS_VOLTAGE::~HV_CELLS_VOLTAGE() {
  // @@protoc_insertion_point(destructor:primary.HV_CELLS_VOLTAGE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_CELLS_VOLTAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CELLS_VOLTAGE::ArenaDtor(void* object) {
  HV_CELLS_VOLTAGE* _this = reinterpret_cast< HV_CELLS_VOLTAGE* >(object);
  (void)_this;
}
void HV_CELLS_VOLTAGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CELLS_VOLTAGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CELLS_VOLTAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELLS_VOLTAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_2_) -
      reinterpret_cast<char*>(&cell_index_)) + sizeof(voltage_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELLS_VOLTAGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CELLS_VOLTAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELLS_VOLTAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_index(), target);
  }

  // uint32 voltage_0 = 2;
  if (this->_internal_voltage_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage_0(), target);
  }

  // uint32 voltage_1 = 3;
  if (this->_internal_voltage_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage_1(), target);
  }

  // uint32 voltage_2 = 4;
  if (this->_internal_voltage_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELLS_VOLTAGE)
  return target;
}

size_t HV_CELLS_VOLTAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELLS_VOLTAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_index());
  }

  // uint32 voltage_0 = 2;
  if (this->_internal_voltage_0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_0());
  }

  // uint32 voltage_1 = 3;
  if (this->_internal_voltage_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_1());
  }

  // uint32 voltage_2 = 4;
  if (this->_internal_voltage_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CELLS_VOLTAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CELLS_VOLTAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CELLS_VOLTAGE::GetClassData() const { return &_class_data_; }

void HV_CELLS_VOLTAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CELLS_VOLTAGE *>(to)->MergeFrom(
      static_cast<const HV_CELLS_VOLTAGE &>(from));
}


void HV_CELLS_VOLTAGE::MergeFrom(const HV_CELLS_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELLS_VOLTAGE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_index() != 0) {
    _internal_set_cell_index(from._internal_cell_index());
  }
  if (from._internal_voltage_0() != 0) {
    _internal_set_voltage_0(from._internal_voltage_0());
  }
  if (from._internal_voltage_1() != 0) {
    _internal_set_voltage_1(from._internal_voltage_1());
  }
  if (from._internal_voltage_2() != 0) {
    _internal_set_voltage_2(from._internal_voltage_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CELLS_VOLTAGE::CopyFrom(const HV_CELLS_VOLTAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELLS_VOLTAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELLS_VOLTAGE::IsInitialized() const {
  return true;
}

void HV_CELLS_VOLTAGE::InternalSwap(HV_CELLS_VOLTAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELLS_VOLTAGE, voltage_2_)
      + sizeof(HV_CELLS_VOLTAGE::voltage_2_)
      - PROTOBUF_FIELD_OFFSET(HV_CELLS_VOLTAGE, cell_index_)>(
          reinterpret_cast<char*>(&cell_index_),
          reinterpret_cast<char*>(&other->cell_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELLS_VOLTAGE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[26]);
}

// ===================================================================

class HV_CELLS_TEMP::_Internal {
 public:
};

HV_CELLS_TEMP::HV_CELLS_TEMP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELLS_TEMP)
}
HV_CELLS_TEMP::HV_CELLS_TEMP(const HV_CELLS_TEMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_index_, &from.cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_6_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(temp_6_));
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELLS_TEMP)
}

inline void HV_CELLS_TEMP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp_6_) -
    reinterpret_cast<char*>(&cell_index_)) + sizeof(temp_6_));
}

HV_CELLS_TEMP::~HV_CELLS_TEMP() {
  // @@protoc_insertion_point(destructor:primary.HV_CELLS_TEMP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_CELLS_TEMP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CELLS_TEMP::ArenaDtor(void* object) {
  HV_CELLS_TEMP* _this = reinterpret_cast< HV_CELLS_TEMP* >(object);
  (void)_this;
}
void HV_CELLS_TEMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CELLS_TEMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CELLS_TEMP::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELLS_TEMP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_6_) -
      reinterpret_cast<char*>(&cell_index_)) + sizeof(temp_6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELLS_TEMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          temp_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          temp_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          temp_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp_6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          temp_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CELLS_TEMP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELLS_TEMP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_index(), target);
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_temp_0(), target);
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_temp_1(), target);
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp_2(), target);
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temp_3(), target);
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temp_4(), target);
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_temp_5(), target);
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_temp_6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELLS_TEMP)
  return target;
}

size_t HV_CELLS_TEMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELLS_TEMP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_index = 1;
  if (this->_internal_cell_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_index());
  }

  // uint32 temp_0 = 2;
  if (this->_internal_temp_0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_0());
  }

  // uint32 temp_1 = 3;
  if (this->_internal_temp_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_1());
  }

  // uint32 temp_2 = 4;
  if (this->_internal_temp_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_2());
  }

  // uint32 temp_3 = 5;
  if (this->_internal_temp_3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_3());
  }

  // uint32 temp_4 = 6;
  if (this->_internal_temp_4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_4());
  }

  // uint32 temp_5 = 7;
  if (this->_internal_temp_5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_5());
  }

  // uint32 temp_6 = 8;
  if (this->_internal_temp_6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp_6());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CELLS_TEMP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CELLS_TEMP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CELLS_TEMP::GetClassData() const { return &_class_data_; }

void HV_CELLS_TEMP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CELLS_TEMP *>(to)->MergeFrom(
      static_cast<const HV_CELLS_TEMP &>(from));
}


void HV_CELLS_TEMP::MergeFrom(const HV_CELLS_TEMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELLS_TEMP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_index() != 0) {
    _internal_set_cell_index(from._internal_cell_index());
  }
  if (from._internal_temp_0() != 0) {
    _internal_set_temp_0(from._internal_temp_0());
  }
  if (from._internal_temp_1() != 0) {
    _internal_set_temp_1(from._internal_temp_1());
  }
  if (from._internal_temp_2() != 0) {
    _internal_set_temp_2(from._internal_temp_2());
  }
  if (from._internal_temp_3() != 0) {
    _internal_set_temp_3(from._internal_temp_3());
  }
  if (from._internal_temp_4() != 0) {
    _internal_set_temp_4(from._internal_temp_4());
  }
  if (from._internal_temp_5() != 0) {
    _internal_set_temp_5(from._internal_temp_5());
  }
  if (from._internal_temp_6() != 0) {
    _internal_set_temp_6(from._internal_temp_6());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CELLS_TEMP::CopyFrom(const HV_CELLS_TEMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELLS_TEMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELLS_TEMP::IsInitialized() const {
  return true;
}

void HV_CELLS_TEMP::InternalSwap(HV_CELLS_TEMP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HV_CELLS_TEMP, temp_6_)
      + sizeof(HV_CELLS_TEMP::temp_6_)
      - PROTOBUF_FIELD_OFFSET(HV_CELLS_TEMP, cell_index_)>(
          reinterpret_cast<char*>(&cell_index_),
          reinterpret_cast<char*>(&other->cell_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELLS_TEMP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[27]);
}

// ===================================================================

class HV_CELL_BALANCING_STATUS::_Internal {
 public:
};

HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:primary.HV_CELL_BALANCING_STATUS)
}
HV_CELL_BALANCING_STATUS::HV_CELL_BALANCING_STATUS(const HV_CELL_BALANCING_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  balancing_status_ = from.balancing_status_;
  // @@protoc_insertion_point(copy_constructor:primary.HV_CELL_BALANCING_STATUS)
}

inline void HV_CELL_BALANCING_STATUS::SharedCtor() {
balancing_status_ = 0;
}

HV_CELL_BALANCING_STATUS::~HV_CELL_BALANCING_STATUS() {
  // @@protoc_insertion_point(destructor:primary.HV_CELL_BALANCING_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HV_CELL_BALANCING_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HV_CELL_BALANCING_STATUS::ArenaDtor(void* object) {
  HV_CELL_BALANCING_STATUS* _this = reinterpret_cast< HV_CELL_BALANCING_STATUS* >(object);
  (void)_this;
}
void HV_CELL_BALANCING_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HV_CELL_BALANCING_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HV_CELL_BALANCING_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:primary.HV_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balancing_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HV_CELL_BALANCING_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .primary.Balancing_Status balancing_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::primary::Balancing_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HV_CELL_BALANCING_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:primary.HV_CELL_BALANCING_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .primary.Balancing_Status balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_balancing_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:primary.HV_CELL_BALANCING_STATUS)
  return target;
}

size_t HV_CELL_BALANCING_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:primary.HV_CELL_BALANCING_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .primary.Balancing_Status balancing_status = 1;
  if (this->_internal_balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HV_CELL_BALANCING_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HV_CELL_BALANCING_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HV_CELL_BALANCING_STATUS::GetClassData() const { return &_class_data_; }

void HV_CELL_BALANCING_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HV_CELL_BALANCING_STATUS *>(to)->MergeFrom(
      static_cast<const HV_CELL_BALANCING_STATUS &>(from));
}


void HV_CELL_BALANCING_STATUS::MergeFrom(const HV_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:primary.HV_CELL_BALANCING_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HV_CELL_BALANCING_STATUS::CopyFrom(const HV_CELL_BALANCING_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:primary.HV_CELL_BALANCING_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HV_CELL_BALANCING_STATUS::IsInitialized() const {
  return true;
}

void HV_CELL_BALANCING_STATUS::InternalSwap(HV_CELL_BALANCING_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(balancing_status_, other->balancing_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HV_CELL_BALANCING_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_primary_2eproto_getter, &descriptor_table_primary_2eproto_once,
      file_level_metadata_primary_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace primary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::primary::STEER_VERSION* Arena::CreateMaybeMessage< ::primary::STEER_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::DAS_VERSION* Arena::CreateMaybeMessage< ::primary::DAS_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::DAS_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_VERSION* Arena::CreateMaybeMessage< ::primary::HV_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_VERSION* Arena::CreateMaybeMessage< ::primary::LV_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TLM_VERSION* Arena::CreateMaybeMessage< ::primary::TLM_VERSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TLM_VERSION >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TIMESTAMP* Arena::CreateMaybeMessage< ::primary::TIMESTAMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TIMESTAMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TLM_STATUS* Arena::CreateMaybeMessage< ::primary::SET_TLM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TLM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_SYSTEM_STATUS* Arena::CreateMaybeMessage< ::primary::STEER_SYSTEM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_SYSTEM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TLM_STATUS* Arena::CreateMaybeMessage< ::primary::TLM_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TLM_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::CAR_STATUS* Arena::CreateMaybeMessage< ::primary::CAR_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::CAR_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SPEED* Arena::CreateMaybeMessage< ::primary::SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_VOLTAGE* Arena::CreateMaybeMessage< ::primary::HV_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CURRENT* Arena::CreateMaybeMessage< ::primary::HV_CURRENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CURRENT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_TEMP* Arena::CreateMaybeMessage< ::primary::HV_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_ERRORS* Arena::CreateMaybeMessage< ::primary::HV_ERRORS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_ERRORS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::TS_STATUS* Arena::CreateMaybeMessage< ::primary::TS_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::TS_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_TS_STATUS* Arena::CreateMaybeMessage< ::primary::SET_TS_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_TS_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_CELL_BALANCING_STATUS* Arena::CreateMaybeMessage< ::primary::SET_CELL_BALANCING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_CELL_BALANCING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HANDCART_STATUS* Arena::CreateMaybeMessage< ::primary::HANDCART_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HANDCART_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::STEER_STATUS* Arena::CreateMaybeMessage< ::primary::STEER_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::STEER_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_CAR_STATUS* Arena::CreateMaybeMessage< ::primary::SET_CAR_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_CAR_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::SET_PEDALS_RANGE* Arena::CreateMaybeMessage< ::primary::SET_PEDALS_RANGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::SET_PEDALS_RANGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_CURRENT* Arena::CreateMaybeMessage< ::primary::LV_CURRENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_CURRENT >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_VOLTAGE* Arena::CreateMaybeMessage< ::primary::LV_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::LV_TEMPERATURE* Arena::CreateMaybeMessage< ::primary::LV_TEMPERATURE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::LV_TEMPERATURE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::COOLING_STATUS* Arena::CreateMaybeMessage< ::primary::COOLING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::COOLING_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELLS_VOLTAGE* Arena::CreateMaybeMessage< ::primary::HV_CELLS_VOLTAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELLS_VOLTAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELLS_TEMP* Arena::CreateMaybeMessage< ::primary::HV_CELLS_TEMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELLS_TEMP >(arena);
}
template<> PROTOBUF_NOINLINE ::primary::HV_CELL_BALANCING_STATUS* Arena::CreateMaybeMessage< ::primary::HV_CELL_BALANCING_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::primary::HV_CELL_BALANCING_STATUS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
