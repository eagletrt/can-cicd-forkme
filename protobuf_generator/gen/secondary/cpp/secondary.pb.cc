// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: secondary.proto

#include "secondary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace secondary {
constexpr IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ang_rate_x_(0u)
  , ang_rate_y_(0u)
  , ang_rate_z_(0u){}
struct IMU_ANGULAR_RATEDefaultTypeInternal {
  constexpr IMU_ANGULAR_RATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMU_ANGULAR_RATEDefaultTypeInternal() {}
  union {
    IMU_ANGULAR_RATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMU_ANGULAR_RATEDefaultTypeInternal _IMU_ANGULAR_RATE_default_instance_;
constexpr IMU_ACCELERATION::IMU_ACCELERATION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accel_x_(0u)
  , accel_y_(0u)
  , accel_z_(0u){}
struct IMU_ACCELERATIONDefaultTypeInternal {
  constexpr IMU_ACCELERATIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMU_ACCELERATIONDefaultTypeInternal() {}
  union {
    IMU_ACCELERATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMU_ACCELERATIONDefaultTypeInternal _IMU_ACCELERATION_default_instance_;
constexpr IRTS_FL_0::IRTS_FL_0(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u){}
struct IRTS_FL_0DefaultTypeInternal {
  constexpr IRTS_FL_0DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FL_0DefaultTypeInternal() {}
  union {
    IRTS_FL_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FL_0DefaultTypeInternal _IRTS_FL_0_default_instance_;
constexpr IRTS_FL_1::IRTS_FL_1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u){}
struct IRTS_FL_1DefaultTypeInternal {
  constexpr IRTS_FL_1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FL_1DefaultTypeInternal() {}
  union {
    IRTS_FL_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FL_1DefaultTypeInternal _IRTS_FL_1_default_instance_;
constexpr IRTS_FL_2::IRTS_FL_2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u){}
struct IRTS_FL_2DefaultTypeInternal {
  constexpr IRTS_FL_2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FL_2DefaultTypeInternal() {}
  union {
    IRTS_FL_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FL_2DefaultTypeInternal _IRTS_FL_2_default_instance_;
constexpr IRTS_FL_3::IRTS_FL_3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u){}
struct IRTS_FL_3DefaultTypeInternal {
  constexpr IRTS_FL_3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FL_3DefaultTypeInternal() {}
  union {
    IRTS_FL_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FL_3DefaultTypeInternal _IRTS_FL_3_default_instance_;
constexpr IRTS_FR_0::IRTS_FR_0(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u){}
struct IRTS_FR_0DefaultTypeInternal {
  constexpr IRTS_FR_0DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FR_0DefaultTypeInternal() {}
  union {
    IRTS_FR_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FR_0DefaultTypeInternal _IRTS_FR_0_default_instance_;
constexpr IRTS_FR_1::IRTS_FR_1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u){}
struct IRTS_FR_1DefaultTypeInternal {
  constexpr IRTS_FR_1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FR_1DefaultTypeInternal() {}
  union {
    IRTS_FR_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FR_1DefaultTypeInternal _IRTS_FR_1_default_instance_;
constexpr IRTS_FR_2::IRTS_FR_2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u){}
struct IRTS_FR_2DefaultTypeInternal {
  constexpr IRTS_FR_2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FR_2DefaultTypeInternal() {}
  union {
    IRTS_FR_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FR_2DefaultTypeInternal _IRTS_FR_2_default_instance_;
constexpr IRTS_FR_3::IRTS_FR_3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u){}
struct IRTS_FR_3DefaultTypeInternal {
  constexpr IRTS_FR_3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_FR_3DefaultTypeInternal() {}
  union {
    IRTS_FR_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_FR_3DefaultTypeInternal _IRTS_FR_3_default_instance_;
constexpr IRTS_RL_0::IRTS_RL_0(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u){}
struct IRTS_RL_0DefaultTypeInternal {
  constexpr IRTS_RL_0DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RL_0DefaultTypeInternal() {}
  union {
    IRTS_RL_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RL_0DefaultTypeInternal _IRTS_RL_0_default_instance_;
constexpr IRTS_RL_1::IRTS_RL_1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u){}
struct IRTS_RL_1DefaultTypeInternal {
  constexpr IRTS_RL_1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RL_1DefaultTypeInternal() {}
  union {
    IRTS_RL_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RL_1DefaultTypeInternal _IRTS_RL_1_default_instance_;
constexpr IRTS_RL_2::IRTS_RL_2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u){}
struct IRTS_RL_2DefaultTypeInternal {
  constexpr IRTS_RL_2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RL_2DefaultTypeInternal() {}
  union {
    IRTS_RL_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RL_2DefaultTypeInternal _IRTS_RL_2_default_instance_;
constexpr IRTS_RL_3::IRTS_RL_3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u){}
struct IRTS_RL_3DefaultTypeInternal {
  constexpr IRTS_RL_3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RL_3DefaultTypeInternal() {}
  union {
    IRTS_RL_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RL_3DefaultTypeInternal _IRTS_RL_3_default_instance_;
constexpr IRTS_RR_0::IRTS_RR_0(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel1_(0u)
  , channel2_(0u)
  , channel3_(0u)
  , channel4_(0u){}
struct IRTS_RR_0DefaultTypeInternal {
  constexpr IRTS_RR_0DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RR_0DefaultTypeInternal() {}
  union {
    IRTS_RR_0 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RR_0DefaultTypeInternal _IRTS_RR_0_default_instance_;
constexpr IRTS_RR_1::IRTS_RR_1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel5_(0u)
  , channel6_(0u)
  , channel7_(0u)
  , channel8_(0u){}
struct IRTS_RR_1DefaultTypeInternal {
  constexpr IRTS_RR_1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RR_1DefaultTypeInternal() {}
  union {
    IRTS_RR_1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RR_1DefaultTypeInternal _IRTS_RR_1_default_instance_;
constexpr IRTS_RR_2::IRTS_RR_2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel9_(0u)
  , channel10_(0u)
  , channel11_(0u)
  , channel12_(0u){}
struct IRTS_RR_2DefaultTypeInternal {
  constexpr IRTS_RR_2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RR_2DefaultTypeInternal() {}
  union {
    IRTS_RR_2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RR_2DefaultTypeInternal _IRTS_RR_2_default_instance_;
constexpr IRTS_RR_3::IRTS_RR_3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel13_(0u)
  , channel14_(0u)
  , channel15_(0u)
  , channel16_(0u){}
struct IRTS_RR_3DefaultTypeInternal {
  constexpr IRTS_RR_3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IRTS_RR_3DefaultTypeInternal() {}
  union {
    IRTS_RR_3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IRTS_RR_3DefaultTypeInternal _IRTS_RR_3_default_instance_;
constexpr GPS_COORDS::GPS_COORDS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0){}
struct GPS_COORDSDefaultTypeInternal {
  constexpr GPS_COORDSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPS_COORDSDefaultTypeInternal() {}
  union {
    GPS_COORDS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPS_COORDSDefaultTypeInternal _GPS_COORDS_default_instance_;
constexpr GPS_SPEED::GPS_SPEED(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speed_(0u){}
struct GPS_SPEEDDefaultTypeInternal {
  constexpr GPS_SPEEDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPS_SPEEDDefaultTypeInternal() {}
  union {
    GPS_SPEED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPS_SPEEDDefaultTypeInternal _GPS_SPEED_default_instance_;
constexpr LAP_COUNT::LAP_COUNT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lap_count_(0u)
  , timestamp_(0u){}
struct LAP_COUNTDefaultTypeInternal {
  constexpr LAP_COUNTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LAP_COUNTDefaultTypeInternal() {}
  union {
    LAP_COUNT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LAP_COUNTDefaultTypeInternal _LAP_COUNT_default_instance_;
}  // namespace secondary
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_secondary_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_secondary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_secondary_2eproto = nullptr;

const uint32_t TableStruct_secondary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_x_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_y_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ANGULAR_RATE, ang_rate_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_x_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_y_),
  PROTOBUF_FIELD_OFFSET(::secondary::IMU_ACCELERATION, accel_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_0, channel4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_1, channel8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_2, channel12_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FL_3, channel16_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_0, channel4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_1, channel8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_2, channel12_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_FR_3, channel16_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_0, channel4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_1, channel8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_2, channel12_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RL_3, channel16_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel1_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel2_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel3_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_0, channel4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel5_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel6_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel7_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_1, channel8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel9_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel10_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel11_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_2, channel12_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel13_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel14_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel15_),
  PROTOBUF_FIELD_OFFSET(::secondary::IRTS_RR_3, channel16_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, latitude_),
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_COORDS, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::GPS_SPEED, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, lap_count_),
  PROTOBUF_FIELD_OFFSET(::secondary::LAP_COUNT, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::secondary::IMU_ANGULAR_RATE)},
  { 9, -1, -1, sizeof(::secondary::IMU_ACCELERATION)},
  { 18, -1, -1, sizeof(::secondary::IRTS_FL_0)},
  { 28, -1, -1, sizeof(::secondary::IRTS_FL_1)},
  { 38, -1, -1, sizeof(::secondary::IRTS_FL_2)},
  { 48, -1, -1, sizeof(::secondary::IRTS_FL_3)},
  { 58, -1, -1, sizeof(::secondary::IRTS_FR_0)},
  { 68, -1, -1, sizeof(::secondary::IRTS_FR_1)},
  { 78, -1, -1, sizeof(::secondary::IRTS_FR_2)},
  { 88, -1, -1, sizeof(::secondary::IRTS_FR_3)},
  { 98, -1, -1, sizeof(::secondary::IRTS_RL_0)},
  { 108, -1, -1, sizeof(::secondary::IRTS_RL_1)},
  { 118, -1, -1, sizeof(::secondary::IRTS_RL_2)},
  { 128, -1, -1, sizeof(::secondary::IRTS_RL_3)},
  { 138, -1, -1, sizeof(::secondary::IRTS_RR_0)},
  { 148, -1, -1, sizeof(::secondary::IRTS_RR_1)},
  { 158, -1, -1, sizeof(::secondary::IRTS_RR_2)},
  { 168, -1, -1, sizeof(::secondary::IRTS_RR_3)},
  { 178, -1, -1, sizeof(::secondary::GPS_COORDS)},
  { 186, -1, -1, sizeof(::secondary::GPS_SPEED)},
  { 193, -1, -1, sizeof(::secondary::LAP_COUNT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IMU_ANGULAR_RATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IMU_ACCELERATION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FL_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_FR_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RL_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_IRTS_RR_3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_GPS_COORDS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_GPS_SPEED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::secondary::_LAP_COUNT_default_instance_),
};

const char descriptor_table_protodef_secondary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017secondary.proto\022\tsecondary\"N\n\020IMU_ANGU"
  "LAR_RATE\022\022\n\nang_rate_x\030\001 \001(\r\022\022\n\nang_rate"
  "_y\030\002 \001(\r\022\022\n\nang_rate_z\030\003 \001(\r\"E\n\020IMU_ACCE"
  "LERATION\022\017\n\007accel_x\030\001 \001(\r\022\017\n\007accel_y\030\002 \001"
  "(\r\022\017\n\007accel_z\030\003 \001(\r\"S\n\tIRTS_FL_0\022\020\n\010chan"
  "nel1\030\001 \001(\r\022\020\n\010channel2\030\002 \001(\r\022\020\n\010channel3"
  "\030\003 \001(\r\022\020\n\010channel4\030\004 \001(\r\"S\n\tIRTS_FL_1\022\020\n"
  "\010channel5\030\001 \001(\r\022\020\n\010channel6\030\002 \001(\r\022\020\n\010cha"
  "nnel7\030\003 \001(\r\022\020\n\010channel8\030\004 \001(\r\"V\n\tIRTS_FL"
  "_2\022\020\n\010channel9\030\001 \001(\r\022\021\n\tchannel10\030\002 \001(\r\022"
  "\021\n\tchannel11\030\003 \001(\r\022\021\n\tchannel12\030\004 \001(\r\"W\n"
  "\tIRTS_FL_3\022\021\n\tchannel13\030\001 \001(\r\022\021\n\tchannel"
  "14\030\002 \001(\r\022\021\n\tchannel15\030\003 \001(\r\022\021\n\tchannel16"
  "\030\004 \001(\r\"S\n\tIRTS_FR_0\022\020\n\010channel1\030\001 \001(\r\022\020\n"
  "\010channel2\030\002 \001(\r\022\020\n\010channel3\030\003 \001(\r\022\020\n\010cha"
  "nnel4\030\004 \001(\r\"S\n\tIRTS_FR_1\022\020\n\010channel5\030\001 \001"
  "(\r\022\020\n\010channel6\030\002 \001(\r\022\020\n\010channel7\030\003 \001(\r\022\020"
  "\n\010channel8\030\004 \001(\r\"V\n\tIRTS_FR_2\022\020\n\010channel"
  "9\030\001 \001(\r\022\021\n\tchannel10\030\002 \001(\r\022\021\n\tchannel11\030"
  "\003 \001(\r\022\021\n\tchannel12\030\004 \001(\r\"W\n\tIRTS_FR_3\022\021\n"
  "\tchannel13\030\001 \001(\r\022\021\n\tchannel14\030\002 \001(\r\022\021\n\tc"
  "hannel15\030\003 \001(\r\022\021\n\tchannel16\030\004 \001(\r\"S\n\tIRT"
  "S_RL_0\022\020\n\010channel1\030\001 \001(\r\022\020\n\010channel2\030\002 \001"
  "(\r\022\020\n\010channel3\030\003 \001(\r\022\020\n\010channel4\030\004 \001(\r\"S"
  "\n\tIRTS_RL_1\022\020\n\010channel5\030\001 \001(\r\022\020\n\010channel"
  "6\030\002 \001(\r\022\020\n\010channel7\030\003 \001(\r\022\020\n\010channel8\030\004 "
  "\001(\r\"V\n\tIRTS_RL_2\022\020\n\010channel9\030\001 \001(\r\022\021\n\tch"
  "annel10\030\002 \001(\r\022\021\n\tchannel11\030\003 \001(\r\022\021\n\tchan"
  "nel12\030\004 \001(\r\"W\n\tIRTS_RL_3\022\021\n\tchannel13\030\001 "
  "\001(\r\022\021\n\tchannel14\030\002 \001(\r\022\021\n\tchannel15\030\003 \001("
  "\r\022\021\n\tchannel16\030\004 \001(\r\"S\n\tIRTS_RR_0\022\020\n\010cha"
  "nnel1\030\001 \001(\r\022\020\n\010channel2\030\002 \001(\r\022\020\n\010channel"
  "3\030\003 \001(\r\022\020\n\010channel4\030\004 \001(\r\"S\n\tIRTS_RR_1\022\020"
  "\n\010channel5\030\001 \001(\r\022\020\n\010channel6\030\002 \001(\r\022\020\n\010ch"
  "annel7\030\003 \001(\r\022\020\n\010channel8\030\004 \001(\r\"V\n\tIRTS_R"
  "R_2\022\020\n\010channel9\030\001 \001(\r\022\021\n\tchannel10\030\002 \001(\r"
  "\022\021\n\tchannel11\030\003 \001(\r\022\021\n\tchannel12\030\004 \001(\r\"W"
  "\n\tIRTS_RR_3\022\021\n\tchannel13\030\001 \001(\r\022\021\n\tchanne"
  "l14\030\002 \001(\r\022\021\n\tchannel15\030\003 \001(\r\022\021\n\tchannel1"
  "6\030\004 \001(\r\"1\n\nGPS_COORDS\022\020\n\010latitude\030\001 \001(\002\022"
  "\021\n\tlongitude\030\002 \001(\002\"\032\n\tGPS_SPEED\022\r\n\005speed"
  "\030\001 \001(\r\"1\n\tLAP_COUNT\022\021\n\tlap_count\030\001 \001(\r\022\021"
  "\n\ttimestamp\030\002 \001(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_secondary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_secondary_2eproto = {
  false, false, 1705, descriptor_table_protodef_secondary_2eproto, "secondary.proto", 
  &descriptor_table_secondary_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_secondary_2eproto::offsets,
  file_level_metadata_secondary_2eproto, file_level_enum_descriptors_secondary_2eproto, file_level_service_descriptors_secondary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_secondary_2eproto_getter() {
  return &descriptor_table_secondary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_secondary_2eproto(&descriptor_table_secondary_2eproto);
namespace secondary {

// ===================================================================

class IMU_ANGULAR_RATE::_Internal {
 public:
};

IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IMU_ANGULAR_RATE)
}
IMU_ANGULAR_RATE::IMU_ANGULAR_RATE(const IMU_ANGULAR_RATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ang_rate_x_, &from.ang_rate_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_rate_z_) -
    reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
  // @@protoc_insertion_point(copy_constructor:secondary.IMU_ANGULAR_RATE)
}

inline void IMU_ANGULAR_RATE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ang_rate_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ang_rate_z_) -
    reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
}

IMU_ANGULAR_RATE::~IMU_ANGULAR_RATE() {
  // @@protoc_insertion_point(destructor:secondary.IMU_ANGULAR_RATE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMU_ANGULAR_RATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMU_ANGULAR_RATE::ArenaDtor(void* object) {
  IMU_ANGULAR_RATE* _this = reinterpret_cast< IMU_ANGULAR_RATE* >(object);
  (void)_this;
}
void IMU_ANGULAR_RATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_ANGULAR_RATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMU_ANGULAR_RATE::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IMU_ANGULAR_RATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ang_rate_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_rate_z_) -
      reinterpret_cast<char*>(&ang_rate_x_)) + sizeof(ang_rate_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_ANGULAR_RATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ang_rate_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ang_rate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ang_rate_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ang_rate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ang_rate_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ang_rate_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMU_ANGULAR_RATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IMU_ANGULAR_RATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ang_rate_x = 1;
  if (this->_internal_ang_rate_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ang_rate_x(), target);
  }

  // uint32 ang_rate_y = 2;
  if (this->_internal_ang_rate_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ang_rate_y(), target);
  }

  // uint32 ang_rate_z = 3;
  if (this->_internal_ang_rate_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ang_rate_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IMU_ANGULAR_RATE)
  return target;
}

size_t IMU_ANGULAR_RATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IMU_ANGULAR_RATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ang_rate_x = 1;
  if (this->_internal_ang_rate_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ang_rate_x());
  }

  // uint32 ang_rate_y = 2;
  if (this->_internal_ang_rate_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ang_rate_y());
  }

  // uint32 ang_rate_z = 3;
  if (this->_internal_ang_rate_z() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ang_rate_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMU_ANGULAR_RATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMU_ANGULAR_RATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMU_ANGULAR_RATE::GetClassData() const { return &_class_data_; }

void IMU_ANGULAR_RATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMU_ANGULAR_RATE *>(to)->MergeFrom(
      static_cast<const IMU_ANGULAR_RATE &>(from));
}


void IMU_ANGULAR_RATE::MergeFrom(const IMU_ANGULAR_RATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IMU_ANGULAR_RATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ang_rate_x() != 0) {
    _internal_set_ang_rate_x(from._internal_ang_rate_x());
  }
  if (from._internal_ang_rate_y() != 0) {
    _internal_set_ang_rate_y(from._internal_ang_rate_y());
  }
  if (from._internal_ang_rate_z() != 0) {
    _internal_set_ang_rate_z(from._internal_ang_rate_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMU_ANGULAR_RATE::CopyFrom(const IMU_ANGULAR_RATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IMU_ANGULAR_RATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_ANGULAR_RATE::IsInitialized() const {
  return true;
}

void IMU_ANGULAR_RATE::InternalSwap(IMU_ANGULAR_RATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_ANGULAR_RATE, ang_rate_z_)
      + sizeof(IMU_ANGULAR_RATE::ang_rate_z_)
      - PROTOBUF_FIELD_OFFSET(IMU_ANGULAR_RATE, ang_rate_x_)>(
          reinterpret_cast<char*>(&ang_rate_x_),
          reinterpret_cast<char*>(&other->ang_rate_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_ANGULAR_RATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[0]);
}

// ===================================================================

class IMU_ACCELERATION::_Internal {
 public:
};

IMU_ACCELERATION::IMU_ACCELERATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IMU_ACCELERATION)
}
IMU_ACCELERATION::IMU_ACCELERATION(const IMU_ACCELERATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accel_x_, &from.accel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&accel_z_) -
    reinterpret_cast<char*>(&accel_x_)) + sizeof(accel_z_));
  // @@protoc_insertion_point(copy_constructor:secondary.IMU_ACCELERATION)
}

inline void IMU_ACCELERATION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accel_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accel_z_) -
    reinterpret_cast<char*>(&accel_x_)) + sizeof(accel_z_));
}

IMU_ACCELERATION::~IMU_ACCELERATION() {
  // @@protoc_insertion_point(destructor:secondary.IMU_ACCELERATION)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMU_ACCELERATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMU_ACCELERATION::ArenaDtor(void* object) {
  IMU_ACCELERATION* _this = reinterpret_cast< IMU_ACCELERATION* >(object);
  (void)_this;
}
void IMU_ACCELERATION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_ACCELERATION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMU_ACCELERATION::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IMU_ACCELERATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accel_z_) -
      reinterpret_cast<char*>(&accel_x_)) + sizeof(accel_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_ACCELERATION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 accel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          accel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 accel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          accel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 accel_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          accel_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMU_ACCELERATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IMU_ACCELERATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 accel_x = 1;
  if (this->_internal_accel_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accel_x(), target);
  }

  // uint32 accel_y = 2;
  if (this->_internal_accel_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accel_y(), target);
  }

  // uint32 accel_z = 3;
  if (this->_internal_accel_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accel_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IMU_ACCELERATION)
  return target;
}

size_t IMU_ACCELERATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IMU_ACCELERATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 accel_x = 1;
  if (this->_internal_accel_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accel_x());
  }

  // uint32 accel_y = 2;
  if (this->_internal_accel_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accel_y());
  }

  // uint32 accel_z = 3;
  if (this->_internal_accel_z() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accel_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMU_ACCELERATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMU_ACCELERATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMU_ACCELERATION::GetClassData() const { return &_class_data_; }

void IMU_ACCELERATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMU_ACCELERATION *>(to)->MergeFrom(
      static_cast<const IMU_ACCELERATION &>(from));
}


void IMU_ACCELERATION::MergeFrom(const IMU_ACCELERATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IMU_ACCELERATION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accel_x() != 0) {
    _internal_set_accel_x(from._internal_accel_x());
  }
  if (from._internal_accel_y() != 0) {
    _internal_set_accel_y(from._internal_accel_y());
  }
  if (from._internal_accel_z() != 0) {
    _internal_set_accel_z(from._internal_accel_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMU_ACCELERATION::CopyFrom(const IMU_ACCELERATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IMU_ACCELERATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_ACCELERATION::IsInitialized() const {
  return true;
}

void IMU_ACCELERATION::InternalSwap(IMU_ACCELERATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_ACCELERATION, accel_z_)
      + sizeof(IMU_ACCELERATION::accel_z_)
      - PROTOBUF_FIELD_OFFSET(IMU_ACCELERATION, accel_x_)>(
          reinterpret_cast<char*>(&accel_x_),
          reinterpret_cast<char*>(&other->accel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_ACCELERATION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[1]);
}

// ===================================================================

class IRTS_FL_0::_Internal {
 public:
};

IRTS_FL_0::IRTS_FL_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_0)
}
IRTS_FL_0::IRTS_FL_0(const IRTS_FL_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_0)
}

inline void IRTS_FL_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
}

IRTS_FL_0::~IRTS_FL_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_0)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FL_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_0::ArenaDtor(void* object) {
  IRTS_FL_0* _this = reinterpret_cast< IRTS_FL_0* >(object);
  (void)_this;
}
void IRTS_FL_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel4_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_0)
  return target;
}

size_t IRTS_FL_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_0::GetClassData() const { return &_class_data_; }

void IRTS_FL_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_0 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_0 &>(from));
}


void IRTS_FL_0::MergeFrom(const IRTS_FL_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_0::CopyFrom(const IRTS_FL_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_0::IsInitialized() const {
  return true;
}

void IRTS_FL_0::InternalSwap(IRTS_FL_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_0, channel4_)
      + sizeof(IRTS_FL_0::channel4_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_0::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[2]);
}

// ===================================================================

class IRTS_FL_1::_Internal {
 public:
};

IRTS_FL_1::IRTS_FL_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_1)
}
IRTS_FL_1::IRTS_FL_1(const IRTS_FL_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_1)
}

inline void IRTS_FL_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
}

IRTS_FL_1::~IRTS_FL_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FL_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_1::ArenaDtor(void* object) {
  IRTS_FL_1* _this = reinterpret_cast< IRTS_FL_1* >(object);
  (void)_this;
}
void IRTS_FL_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel8_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_1)
  return target;
}

size_t IRTS_FL_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_1::GetClassData() const { return &_class_data_; }

void IRTS_FL_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_1 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_1 &>(from));
}


void IRTS_FL_1::MergeFrom(const IRTS_FL_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_1::CopyFrom(const IRTS_FL_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_1::IsInitialized() const {
  return true;
}

void IRTS_FL_1::InternalSwap(IRTS_FL_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_1, channel8_)
      + sizeof(IRTS_FL_1::channel8_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[3]);
}

// ===================================================================

class IRTS_FL_2::_Internal {
 public:
};

IRTS_FL_2::IRTS_FL_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_2)
}
IRTS_FL_2::IRTS_FL_2(const IRTS_FL_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_2)
}

inline void IRTS_FL_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
}

IRTS_FL_2::~IRTS_FL_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FL_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_2::ArenaDtor(void* object) {
  IRTS_FL_2* _this = reinterpret_cast< IRTS_FL_2* >(object);
  (void)_this;
}
void IRTS_FL_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel12_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_2)
  return target;
}

size_t IRTS_FL_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_2::GetClassData() const { return &_class_data_; }

void IRTS_FL_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_2 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_2 &>(from));
}


void IRTS_FL_2::MergeFrom(const IRTS_FL_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_2::CopyFrom(const IRTS_FL_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_2::IsInitialized() const {
  return true;
}

void IRTS_FL_2::InternalSwap(IRTS_FL_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_2, channel12_)
      + sizeof(IRTS_FL_2::channel12_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[4]);
}

// ===================================================================

class IRTS_FL_3::_Internal {
 public:
};

IRTS_FL_3::IRTS_FL_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FL_3)
}
IRTS_FL_3::IRTS_FL_3(const IRTS_FL_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FL_3)
}

inline void IRTS_FL_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
}

IRTS_FL_3::~IRTS_FL_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FL_3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FL_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FL_3::ArenaDtor(void* object) {
  IRTS_FL_3* _this = reinterpret_cast< IRTS_FL_3* >(object);
  (void)_this;
}
void IRTS_FL_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FL_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FL_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FL_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel16_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FL_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FL_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FL_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FL_3)
  return target;
}

size_t IRTS_FL_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FL_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FL_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FL_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FL_3::GetClassData() const { return &_class_data_; }

void IRTS_FL_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FL_3 *>(to)->MergeFrom(
      static_cast<const IRTS_FL_3 &>(from));
}


void IRTS_FL_3::MergeFrom(const IRTS_FL_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FL_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FL_3::CopyFrom(const IRTS_FL_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FL_3::IsInitialized() const {
  return true;
}

void IRTS_FL_3::InternalSwap(IRTS_FL_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FL_3, channel16_)
      + sizeof(IRTS_FL_3::channel16_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FL_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FL_3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[5]);
}

// ===================================================================

class IRTS_FR_0::_Internal {
 public:
};

IRTS_FR_0::IRTS_FR_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_0)
}
IRTS_FR_0::IRTS_FR_0(const IRTS_FR_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_0)
}

inline void IRTS_FR_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
}

IRTS_FR_0::~IRTS_FR_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_0)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FR_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_0::ArenaDtor(void* object) {
  IRTS_FR_0* _this = reinterpret_cast< IRTS_FR_0* >(object);
  (void)_this;
}
void IRTS_FR_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel4_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_0)
  return target;
}

size_t IRTS_FR_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_0::GetClassData() const { return &_class_data_; }

void IRTS_FR_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_0 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_0 &>(from));
}


void IRTS_FR_0::MergeFrom(const IRTS_FR_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_0::CopyFrom(const IRTS_FR_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_0::IsInitialized() const {
  return true;
}

void IRTS_FR_0::InternalSwap(IRTS_FR_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_0, channel4_)
      + sizeof(IRTS_FR_0::channel4_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_0::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[6]);
}

// ===================================================================

class IRTS_FR_1::_Internal {
 public:
};

IRTS_FR_1::IRTS_FR_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_1)
}
IRTS_FR_1::IRTS_FR_1(const IRTS_FR_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_1)
}

inline void IRTS_FR_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
}

IRTS_FR_1::~IRTS_FR_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FR_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_1::ArenaDtor(void* object) {
  IRTS_FR_1* _this = reinterpret_cast< IRTS_FR_1* >(object);
  (void)_this;
}
void IRTS_FR_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel8_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_1)
  return target;
}

size_t IRTS_FR_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_1::GetClassData() const { return &_class_data_; }

void IRTS_FR_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_1 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_1 &>(from));
}


void IRTS_FR_1::MergeFrom(const IRTS_FR_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_1::CopyFrom(const IRTS_FR_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_1::IsInitialized() const {
  return true;
}

void IRTS_FR_1::InternalSwap(IRTS_FR_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_1, channel8_)
      + sizeof(IRTS_FR_1::channel8_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[7]);
}

// ===================================================================

class IRTS_FR_2::_Internal {
 public:
};

IRTS_FR_2::IRTS_FR_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_2)
}
IRTS_FR_2::IRTS_FR_2(const IRTS_FR_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_2)
}

inline void IRTS_FR_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
}

IRTS_FR_2::~IRTS_FR_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FR_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_2::ArenaDtor(void* object) {
  IRTS_FR_2* _this = reinterpret_cast< IRTS_FR_2* >(object);
  (void)_this;
}
void IRTS_FR_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel12_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_2)
  return target;
}

size_t IRTS_FR_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_2::GetClassData() const { return &_class_data_; }

void IRTS_FR_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_2 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_2 &>(from));
}


void IRTS_FR_2::MergeFrom(const IRTS_FR_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_2::CopyFrom(const IRTS_FR_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_2::IsInitialized() const {
  return true;
}

void IRTS_FR_2::InternalSwap(IRTS_FR_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_2, channel12_)
      + sizeof(IRTS_FR_2::channel12_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[8]);
}

// ===================================================================

class IRTS_FR_3::_Internal {
 public:
};

IRTS_FR_3::IRTS_FR_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_FR_3)
}
IRTS_FR_3::IRTS_FR_3(const IRTS_FR_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_FR_3)
}

inline void IRTS_FR_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
}

IRTS_FR_3::~IRTS_FR_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_FR_3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_FR_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_FR_3::ArenaDtor(void* object) {
  IRTS_FR_3* _this = reinterpret_cast< IRTS_FR_3* >(object);
  (void)_this;
}
void IRTS_FR_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_FR_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_FR_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_FR_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel16_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_FR_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_FR_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_FR_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_FR_3)
  return target;
}

size_t IRTS_FR_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_FR_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_FR_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_FR_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_FR_3::GetClassData() const { return &_class_data_; }

void IRTS_FR_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_FR_3 *>(to)->MergeFrom(
      static_cast<const IRTS_FR_3 &>(from));
}


void IRTS_FR_3::MergeFrom(const IRTS_FR_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_FR_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_FR_3::CopyFrom(const IRTS_FR_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_FR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_FR_3::IsInitialized() const {
  return true;
}

void IRTS_FR_3::InternalSwap(IRTS_FR_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_FR_3, channel16_)
      + sizeof(IRTS_FR_3::channel16_)
      - PROTOBUF_FIELD_OFFSET(IRTS_FR_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_FR_3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[9]);
}

// ===================================================================

class IRTS_RL_0::_Internal {
 public:
};

IRTS_RL_0::IRTS_RL_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_0)
}
IRTS_RL_0::IRTS_RL_0(const IRTS_RL_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_0)
}

inline void IRTS_RL_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
}

IRTS_RL_0::~IRTS_RL_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_0)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RL_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_0::ArenaDtor(void* object) {
  IRTS_RL_0* _this = reinterpret_cast< IRTS_RL_0* >(object);
  (void)_this;
}
void IRTS_RL_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel4_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_0)
  return target;
}

size_t IRTS_RL_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_0::GetClassData() const { return &_class_data_; }

void IRTS_RL_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_0 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_0 &>(from));
}


void IRTS_RL_0::MergeFrom(const IRTS_RL_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_0::CopyFrom(const IRTS_RL_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_0::IsInitialized() const {
  return true;
}

void IRTS_RL_0::InternalSwap(IRTS_RL_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_0, channel4_)
      + sizeof(IRTS_RL_0::channel4_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_0::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[10]);
}

// ===================================================================

class IRTS_RL_1::_Internal {
 public:
};

IRTS_RL_1::IRTS_RL_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_1)
}
IRTS_RL_1::IRTS_RL_1(const IRTS_RL_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_1)
}

inline void IRTS_RL_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
}

IRTS_RL_1::~IRTS_RL_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RL_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_1::ArenaDtor(void* object) {
  IRTS_RL_1* _this = reinterpret_cast< IRTS_RL_1* >(object);
  (void)_this;
}
void IRTS_RL_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel8_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_1)
  return target;
}

size_t IRTS_RL_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_1::GetClassData() const { return &_class_data_; }

void IRTS_RL_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_1 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_1 &>(from));
}


void IRTS_RL_1::MergeFrom(const IRTS_RL_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_1::CopyFrom(const IRTS_RL_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_1::IsInitialized() const {
  return true;
}

void IRTS_RL_1::InternalSwap(IRTS_RL_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_1, channel8_)
      + sizeof(IRTS_RL_1::channel8_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[11]);
}

// ===================================================================

class IRTS_RL_2::_Internal {
 public:
};

IRTS_RL_2::IRTS_RL_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_2)
}
IRTS_RL_2::IRTS_RL_2(const IRTS_RL_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_2)
}

inline void IRTS_RL_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
}

IRTS_RL_2::~IRTS_RL_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RL_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_2::ArenaDtor(void* object) {
  IRTS_RL_2* _this = reinterpret_cast< IRTS_RL_2* >(object);
  (void)_this;
}
void IRTS_RL_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel12_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_2)
  return target;
}

size_t IRTS_RL_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_2::GetClassData() const { return &_class_data_; }

void IRTS_RL_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_2 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_2 &>(from));
}


void IRTS_RL_2::MergeFrom(const IRTS_RL_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_2::CopyFrom(const IRTS_RL_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_2::IsInitialized() const {
  return true;
}

void IRTS_RL_2::InternalSwap(IRTS_RL_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_2, channel12_)
      + sizeof(IRTS_RL_2::channel12_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[12]);
}

// ===================================================================

class IRTS_RL_3::_Internal {
 public:
};

IRTS_RL_3::IRTS_RL_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RL_3)
}
IRTS_RL_3::IRTS_RL_3(const IRTS_RL_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RL_3)
}

inline void IRTS_RL_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
}

IRTS_RL_3::~IRTS_RL_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RL_3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RL_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RL_3::ArenaDtor(void* object) {
  IRTS_RL_3* _this = reinterpret_cast< IRTS_RL_3* >(object);
  (void)_this;
}
void IRTS_RL_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RL_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RL_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RL_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel16_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RL_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RL_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RL_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RL_3)
  return target;
}

size_t IRTS_RL_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RL_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RL_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RL_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RL_3::GetClassData() const { return &_class_data_; }

void IRTS_RL_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RL_3 *>(to)->MergeFrom(
      static_cast<const IRTS_RL_3 &>(from));
}


void IRTS_RL_3::MergeFrom(const IRTS_RL_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RL_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RL_3::CopyFrom(const IRTS_RL_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RL_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RL_3::IsInitialized() const {
  return true;
}

void IRTS_RL_3::InternalSwap(IRTS_RL_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RL_3, channel16_)
      + sizeof(IRTS_RL_3::channel16_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RL_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RL_3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[13]);
}

// ===================================================================

class IRTS_RR_0::_Internal {
 public:
};

IRTS_RR_0::IRTS_RR_0(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_0)
}
IRTS_RR_0::IRTS_RR_0(const IRTS_RR_0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel1_, &from.channel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_0)
}

inline void IRTS_RR_0::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel4_) -
    reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
}

IRTS_RR_0::~IRTS_RR_0() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_0)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RR_0::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_0::ArenaDtor(void* object) {
  IRTS_RR_0* _this = reinterpret_cast< IRTS_RR_0* >(object);
  (void)_this;
}
void IRTS_RR_0::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_0::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_0)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel4_) -
      reinterpret_cast<char*>(&channel1_)) + sizeof(channel4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_0::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_0)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel1(), target);
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel2(), target);
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel3(), target);
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_0)
  return target;
}

size_t IRTS_RR_0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_0)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel1 = 1;
  if (this->_internal_channel1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel1());
  }

  // uint32 channel2 = 2;
  if (this->_internal_channel2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel2());
  }

  // uint32 channel3 = 3;
  if (this->_internal_channel3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel3());
  }

  // uint32 channel4 = 4;
  if (this->_internal_channel4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_0::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_0::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_0::GetClassData() const { return &_class_data_; }

void IRTS_RR_0::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_0 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_0 &>(from));
}


void IRTS_RR_0::MergeFrom(const IRTS_RR_0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_0)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_channel3() != 0) {
    _internal_set_channel3(from._internal_channel3());
  }
  if (from._internal_channel4() != 0) {
    _internal_set_channel4(from._internal_channel4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_0::CopyFrom(const IRTS_RR_0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_0::IsInitialized() const {
  return true;
}

void IRTS_RR_0::InternalSwap(IRTS_RR_0* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_0, channel4_)
      + sizeof(IRTS_RR_0::channel4_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_0, channel1_)>(
          reinterpret_cast<char*>(&channel1_),
          reinterpret_cast<char*>(&other->channel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_0::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[14]);
}

// ===================================================================

class IRTS_RR_1::_Internal {
 public:
};

IRTS_RR_1::IRTS_RR_1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_1)
}
IRTS_RR_1::IRTS_RR_1(const IRTS_RR_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel5_, &from.channel5_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_1)
}

inline void IRTS_RR_1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel8_) -
    reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
}

IRTS_RR_1::~IRTS_RR_1() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RR_1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_1::ArenaDtor(void* object) {
  IRTS_RR_1* _this = reinterpret_cast< IRTS_RR_1* >(object);
  (void)_this;
}
void IRTS_RR_1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_1::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel8_) -
      reinterpret_cast<char*>(&channel5_)) + sizeof(channel8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel5(), target);
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel6(), target);
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel7(), target);
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_1)
  return target;
}

size_t IRTS_RR_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel5 = 1;
  if (this->_internal_channel5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel5());
  }

  // uint32 channel6 = 2;
  if (this->_internal_channel6() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel6());
  }

  // uint32 channel7 = 3;
  if (this->_internal_channel7() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel7());
  }

  // uint32 channel8 = 4;
  if (this->_internal_channel8() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel8());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_1::GetClassData() const { return &_class_data_; }

void IRTS_RR_1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_1 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_1 &>(from));
}


void IRTS_RR_1::MergeFrom(const IRTS_RR_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel5() != 0) {
    _internal_set_channel5(from._internal_channel5());
  }
  if (from._internal_channel6() != 0) {
    _internal_set_channel6(from._internal_channel6());
  }
  if (from._internal_channel7() != 0) {
    _internal_set_channel7(from._internal_channel7());
  }
  if (from._internal_channel8() != 0) {
    _internal_set_channel8(from._internal_channel8());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_1::CopyFrom(const IRTS_RR_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_1::IsInitialized() const {
  return true;
}

void IRTS_RR_1::InternalSwap(IRTS_RR_1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_1, channel8_)
      + sizeof(IRTS_RR_1::channel8_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_1, channel5_)>(
          reinterpret_cast<char*>(&channel5_),
          reinterpret_cast<char*>(&other->channel5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[15]);
}

// ===================================================================

class IRTS_RR_2::_Internal {
 public:
};

IRTS_RR_2::IRTS_RR_2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_2)
}
IRTS_RR_2::IRTS_RR_2(const IRTS_RR_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel9_, &from.channel9_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_2)
}

inline void IRTS_RR_2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel9_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel12_) -
    reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
}

IRTS_RR_2::~IRTS_RR_2() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RR_2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_2::ArenaDtor(void* object) {
  IRTS_RR_2* _this = reinterpret_cast< IRTS_RR_2* >(object);
  (void)_this;
}
void IRTS_RR_2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_2::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel12_) -
      reinterpret_cast<char*>(&channel9_)) + sizeof(channel12_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel9 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel11 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel9(), target);
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel10(), target);
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel11(), target);
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_2)
  return target;
}

size_t IRTS_RR_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel9 = 1;
  if (this->_internal_channel9() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel9());
  }

  // uint32 channel10 = 2;
  if (this->_internal_channel10() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel10());
  }

  // uint32 channel11 = 3;
  if (this->_internal_channel11() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel11());
  }

  // uint32 channel12 = 4;
  if (this->_internal_channel12() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel12());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_2::GetClassData() const { return &_class_data_; }

void IRTS_RR_2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_2 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_2 &>(from));
}


void IRTS_RR_2::MergeFrom(const IRTS_RR_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel9() != 0) {
    _internal_set_channel9(from._internal_channel9());
  }
  if (from._internal_channel10() != 0) {
    _internal_set_channel10(from._internal_channel10());
  }
  if (from._internal_channel11() != 0) {
    _internal_set_channel11(from._internal_channel11());
  }
  if (from._internal_channel12() != 0) {
    _internal_set_channel12(from._internal_channel12());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_2::CopyFrom(const IRTS_RR_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_2::IsInitialized() const {
  return true;
}

void IRTS_RR_2::InternalSwap(IRTS_RR_2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_2, channel12_)
      + sizeof(IRTS_RR_2::channel12_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_2, channel9_)>(
          reinterpret_cast<char*>(&channel9_),
          reinterpret_cast<char*>(&other->channel9_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[16]);
}

// ===================================================================

class IRTS_RR_3::_Internal {
 public:
};

IRTS_RR_3::IRTS_RR_3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.IRTS_RR_3)
}
IRTS_RR_3::IRTS_RR_3(const IRTS_RR_3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel13_, &from.channel13_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  // @@protoc_insertion_point(copy_constructor:secondary.IRTS_RR_3)
}

inline void IRTS_RR_3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel13_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel16_) -
    reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
}

IRTS_RR_3::~IRTS_RR_3() {
  // @@protoc_insertion_point(destructor:secondary.IRTS_RR_3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IRTS_RR_3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IRTS_RR_3::ArenaDtor(void* object) {
  IRTS_RR_3* _this = reinterpret_cast< IRTS_RR_3* >(object);
  (void)_this;
}
void IRTS_RR_3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRTS_RR_3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IRTS_RR_3::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.IRTS_RR_3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel13_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel16_) -
      reinterpret_cast<char*>(&channel13_)) + sizeof(channel16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRTS_RR_3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel13 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel15 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          channel16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IRTS_RR_3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.IRTS_RR_3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel13(), target);
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel14(), target);
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel15(), target);
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.IRTS_RR_3)
  return target;
}

size_t IRTS_RR_3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.IRTS_RR_3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel13 = 1;
  if (this->_internal_channel13() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel13());
  }

  // uint32 channel14 = 2;
  if (this->_internal_channel14() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel14());
  }

  // uint32 channel15 = 3;
  if (this->_internal_channel15() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel15());
  }

  // uint32 channel16 = 4;
  if (this->_internal_channel16() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel16());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IRTS_RR_3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IRTS_RR_3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IRTS_RR_3::GetClassData() const { return &_class_data_; }

void IRTS_RR_3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IRTS_RR_3 *>(to)->MergeFrom(
      static_cast<const IRTS_RR_3 &>(from));
}


void IRTS_RR_3::MergeFrom(const IRTS_RR_3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.IRTS_RR_3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel13() != 0) {
    _internal_set_channel13(from._internal_channel13());
  }
  if (from._internal_channel14() != 0) {
    _internal_set_channel14(from._internal_channel14());
  }
  if (from._internal_channel15() != 0) {
    _internal_set_channel15(from._internal_channel15());
  }
  if (from._internal_channel16() != 0) {
    _internal_set_channel16(from._internal_channel16());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IRTS_RR_3::CopyFrom(const IRTS_RR_3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.IRTS_RR_3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRTS_RR_3::IsInitialized() const {
  return true;
}

void IRTS_RR_3::InternalSwap(IRTS_RR_3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRTS_RR_3, channel16_)
      + sizeof(IRTS_RR_3::channel16_)
      - PROTOBUF_FIELD_OFFSET(IRTS_RR_3, channel13_)>(
          reinterpret_cast<char*>(&channel13_),
          reinterpret_cast<char*>(&other->channel13_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRTS_RR_3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[17]);
}

// ===================================================================

class GPS_COORDS::_Internal {
 public:
};

GPS_COORDS::GPS_COORDS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.GPS_COORDS)
}
GPS_COORDS::GPS_COORDS(const GPS_COORDS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:secondary.GPS_COORDS)
}

inline void GPS_COORDS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

GPS_COORDS::~GPS_COORDS() {
  // @@protoc_insertion_point(destructor:secondary.GPS_COORDS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPS_COORDS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPS_COORDS::ArenaDtor(void* object) {
  GPS_COORDS* _this = reinterpret_cast< GPS_COORDS* >(object);
  (void)_this;
}
void GPS_COORDS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPS_COORDS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPS_COORDS::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.GPS_COORDS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_COORDS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPS_COORDS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.GPS_COORDS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.GPS_COORDS)
  return target;
}

size_t GPS_COORDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.GPS_COORDS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPS_COORDS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPS_COORDS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPS_COORDS::GetClassData() const { return &_class_data_; }

void GPS_COORDS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPS_COORDS *>(to)->MergeFrom(
      static_cast<const GPS_COORDS &>(from));
}


void GPS_COORDS::MergeFrom(const GPS_COORDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.GPS_COORDS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPS_COORDS::CopyFrom(const GPS_COORDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.GPS_COORDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_COORDS::IsInitialized() const {
  return true;
}

void GPS_COORDS::InternalSwap(GPS_COORDS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPS_COORDS, longitude_)
      + sizeof(GPS_COORDS::longitude_)
      - PROTOBUF_FIELD_OFFSET(GPS_COORDS, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_COORDS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[18]);
}

// ===================================================================

class GPS_SPEED::_Internal {
 public:
};

GPS_SPEED::GPS_SPEED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.GPS_SPEED)
}
GPS_SPEED::GPS_SPEED(const GPS_SPEED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:secondary.GPS_SPEED)
}

inline void GPS_SPEED::SharedCtor() {
speed_ = 0u;
}

GPS_SPEED::~GPS_SPEED() {
  // @@protoc_insertion_point(destructor:secondary.GPS_SPEED)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPS_SPEED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPS_SPEED::ArenaDtor(void* object) {
  GPS_SPEED* _this = reinterpret_cast< GPS_SPEED* >(object);
  (void)_this;
}
void GPS_SPEED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPS_SPEED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPS_SPEED::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.GPS_SPEED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_SPEED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPS_SPEED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.GPS_SPEED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.GPS_SPEED)
  return target;
}

size_t GPS_SPEED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.GPS_SPEED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->_internal_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPS_SPEED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPS_SPEED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPS_SPEED::GetClassData() const { return &_class_data_; }

void GPS_SPEED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPS_SPEED *>(to)->MergeFrom(
      static_cast<const GPS_SPEED &>(from));
}


void GPS_SPEED::MergeFrom(const GPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.GPS_SPEED)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPS_SPEED::CopyFrom(const GPS_SPEED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.GPS_SPEED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_SPEED::IsInitialized() const {
  return true;
}

void GPS_SPEED::InternalSwap(GPS_SPEED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_SPEED::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[19]);
}

// ===================================================================

class LAP_COUNT::_Internal {
 public:
};

LAP_COUNT::LAP_COUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:secondary.LAP_COUNT)
}
LAP_COUNT::LAP_COUNT(const LAP_COUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lap_count_, &from.lap_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&lap_count_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:secondary.LAP_COUNT)
}

inline void LAP_COUNT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lap_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&lap_count_)) + sizeof(timestamp_));
}

LAP_COUNT::~LAP_COUNT() {
  // @@protoc_insertion_point(destructor:secondary.LAP_COUNT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LAP_COUNT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LAP_COUNT::ArenaDtor(void* object) {
  LAP_COUNT* _this = reinterpret_cast< LAP_COUNT* >(object);
  (void)_this;
}
void LAP_COUNT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LAP_COUNT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LAP_COUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:secondary.LAP_COUNT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lap_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&lap_count_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LAP_COUNT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 lap_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LAP_COUNT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:secondary.LAP_COUNT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lap_count = 1;
  if (this->_internal_lap_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lap_count(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:secondary.LAP_COUNT)
  return target;
}

size_t LAP_COUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:secondary.LAP_COUNT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lap_count = 1;
  if (this->_internal_lap_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lap_count());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LAP_COUNT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LAP_COUNT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LAP_COUNT::GetClassData() const { return &_class_data_; }

void LAP_COUNT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LAP_COUNT *>(to)->MergeFrom(
      static_cast<const LAP_COUNT &>(from));
}


void LAP_COUNT::MergeFrom(const LAP_COUNT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:secondary.LAP_COUNT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lap_count() != 0) {
    _internal_set_lap_count(from._internal_lap_count());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LAP_COUNT::CopyFrom(const LAP_COUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:secondary.LAP_COUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LAP_COUNT::IsInitialized() const {
  return true;
}

void LAP_COUNT::InternalSwap(LAP_COUNT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LAP_COUNT, timestamp_)
      + sizeof(LAP_COUNT::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LAP_COUNT, lap_count_)>(
          reinterpret_cast<char*>(&lap_count_),
          reinterpret_cast<char*>(&other->lap_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LAP_COUNT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_secondary_2eproto_getter, &descriptor_table_secondary_2eproto_once,
      file_level_metadata_secondary_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace secondary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::secondary::IMU_ANGULAR_RATE* Arena::CreateMaybeMessage< ::secondary::IMU_ANGULAR_RATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IMU_ANGULAR_RATE >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IMU_ACCELERATION* Arena::CreateMaybeMessage< ::secondary::IMU_ACCELERATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IMU_ACCELERATION >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_0* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_1* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_2* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FL_3* Arena::CreateMaybeMessage< ::secondary::IRTS_FL_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FL_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_0* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_1* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_2* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_FR_3* Arena::CreateMaybeMessage< ::secondary::IRTS_FR_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_FR_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_0* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_1* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_2* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RL_3* Arena::CreateMaybeMessage< ::secondary::IRTS_RL_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RL_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_0* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_0 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_0 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_1* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_2* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::IRTS_RR_3* Arena::CreateMaybeMessage< ::secondary::IRTS_RR_3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::IRTS_RR_3 >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::GPS_COORDS* Arena::CreateMaybeMessage< ::secondary::GPS_COORDS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::GPS_COORDS >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::GPS_SPEED* Arena::CreateMaybeMessage< ::secondary::GPS_SPEED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::GPS_SPEED >(arena);
}
template<> PROTOBUF_NOINLINE ::secondary::LAP_COUNT* Arena::CreateMaybeMessage< ::secondary::LAP_COUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::secondary::LAP_COUNT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
