// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bms.proto

#include "bms.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace bms {
constexpr BOARD_STATUS::BOARD_STATUS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errors_(0u)
  , balancing_status_(0)
{}
struct BOARD_STATUSDefaultTypeInternal {
  constexpr BOARD_STATUSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BOARD_STATUSDefaultTypeInternal() {}
  union {
    BOARD_STATUS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BOARD_STATUSDefaultTypeInternal _BOARD_STATUS_default_instance_;
constexpr TEMPERATURES::TEMPERATURES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_index_(0u)
  , temp0_(0u)
  , temp1_(0u)
  , temp2_(0u)
  , temp3_(0u)
  , temp4_(0u)
  , temp5_(0u){}
struct TEMPERATURESDefaultTypeInternal {
  constexpr TEMPERATURESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TEMPERATURESDefaultTypeInternal() {}
  union {
    TEMPERATURES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TEMPERATURESDefaultTypeInternal _TEMPERATURES_default_instance_;
constexpr VOLTAGES::VOLTAGES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_index_(0u)
  , voltage0_(0u)
  , voltage1_(0u)
  , voltage2_(0u){}
struct VOLTAGESDefaultTypeInternal {
  constexpr VOLTAGESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VOLTAGESDefaultTypeInternal() {}
  union {
    VOLTAGES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VOLTAGESDefaultTypeInternal _VOLTAGES_default_instance_;
constexpr BALANCING::BALANCING(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_index_(0u)
  , cells_(0u){}
struct BALANCINGDefaultTypeInternal {
  constexpr BALANCINGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BALANCINGDefaultTypeInternal() {}
  union {
    BALANCING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BALANCINGDefaultTypeInternal _BALANCING_default_instance_;
constexpr FW_UPDATE::FW_UPDATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_index_(0u){}
struct FW_UPDATEDefaultTypeInternal {
  constexpr FW_UPDATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FW_UPDATEDefaultTypeInternal() {}
  union {
    FW_UPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FW_UPDATEDefaultTypeInternal _FW_UPDATE_default_instance_;
}  // namespace bms
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bms_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bms_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bms_2eproto = nullptr;

const uint32_t TableStruct_bms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::BOARD_STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::BOARD_STATUS, errors_),
  PROTOBUF_FIELD_OFFSET(::bms::BOARD_STATUS, balancing_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, start_index_),
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, temp0_),
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, temp1_),
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, temp2_),
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, temp3_),
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, temp4_),
  PROTOBUF_FIELD_OFFSET(::bms::TEMPERATURES, temp5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::VOLTAGES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::VOLTAGES, start_index_),
  PROTOBUF_FIELD_OFFSET(::bms::VOLTAGES, voltage0_),
  PROTOBUF_FIELD_OFFSET(::bms::VOLTAGES, voltage1_),
  PROTOBUF_FIELD_OFFSET(::bms::VOLTAGES, voltage2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::BALANCING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::BALANCING, board_index_),
  PROTOBUF_FIELD_OFFSET(::bms::BALANCING, cells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::FW_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::FW_UPDATE, board_index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bms::BOARD_STATUS)},
  { 8, -1, -1, sizeof(::bms::TEMPERATURES)},
  { 21, -1, -1, sizeof(::bms::VOLTAGES)},
  { 31, -1, -1, sizeof(::bms::BALANCING)},
  { 39, -1, -1, sizeof(::bms::FW_UPDATE)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bms::_BOARD_STATUS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bms::_TEMPERATURES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bms::_VOLTAGES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bms::_BALANCING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bms::_FW_UPDATE_default_instance_),
};

const char descriptor_table_protodef_bms_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbms.proto\022\003bms\"O\n\014BOARD_STATUS\022\016\n\006erro"
  "rs\030\001 \001(\r\022/\n\020balancing_status\030\002 \001(\0162\025.bms"
  ".balancing_status\"}\n\014TEMPERATURES\022\023\n\013sta"
  "rt_index\030\001 \001(\r\022\r\n\005temp0\030\002 \001(\r\022\r\n\005temp1\030\003"
  " \001(\r\022\r\n\005temp2\030\004 \001(\r\022\r\n\005temp3\030\005 \001(\r\022\r\n\005te"
  "mp4\030\006 \001(\r\022\r\n\005temp5\030\007 \001(\r\"U\n\010VOLTAGES\022\023\n\013"
  "start_index\030\001 \001(\r\022\020\n\010voltage0\030\002 \001(\r\022\020\n\010v"
  "oltage1\030\003 \001(\r\022\020\n\010voltage2\030\004 \001(\r\"/\n\tBALAN"
  "CING\022\023\n\013board_index\030\001 \001(\r\022\r\n\005cells\030\002 \001(\r"
  "\" \n\tFW_UPDATE\022\023\n\013board_index\030\001 \001(\r*L\n\020ba"
  "lancing_status\022\030\n\024BALANCING_STATUS_OFF\020\000"
  "\022\036\n\032BALANCING_STATUS_DISCHARGE\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bms_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bms_2eproto = {
  false, false, 480, descriptor_table_protodef_bms_2eproto, "bms.proto", 
  &descriptor_table_bms_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_bms_2eproto::offsets,
  file_level_metadata_bms_2eproto, file_level_enum_descriptors_bms_2eproto, file_level_service_descriptors_bms_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_bms_2eproto_getter() {
  return &descriptor_table_bms_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bms_2eproto(&descriptor_table_bms_2eproto);
namespace bms {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* balancing_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bms_2eproto);
  return file_level_enum_descriptors_bms_2eproto[0];
}
bool balancing_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BOARD_STATUS::_Internal {
 public:
};

BOARD_STATUS::BOARD_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bms.BOARD_STATUS)
}
BOARD_STATUS::BOARD_STATUS(const BOARD_STATUS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&errors_, &from.errors_,
    static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&errors_)) + sizeof(balancing_status_));
  // @@protoc_insertion_point(copy_constructor:bms.BOARD_STATUS)
}

inline void BOARD_STATUS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errors_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&errors_)) + sizeof(balancing_status_));
}

BOARD_STATUS::~BOARD_STATUS() {
  // @@protoc_insertion_point(destructor:bms.BOARD_STATUS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BOARD_STATUS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BOARD_STATUS::ArenaDtor(void* object) {
  BOARD_STATUS* _this = reinterpret_cast< BOARD_STATUS* >(object);
  (void)_this;
}
void BOARD_STATUS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BOARD_STATUS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BOARD_STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.BOARD_STATUS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&errors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balancing_status_) -
      reinterpret_cast<char*>(&errors_)) + sizeof(balancing_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BOARD_STATUS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bms.balancing_status balancing_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::bms::balancing_status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BOARD_STATUS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.BOARD_STATUS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 errors = 1;
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errors(), target);
  }

  // .bms.balancing_status balancing_status = 2;
  if (this->_internal_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_balancing_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.BOARD_STATUS)
  return target;
}

size_t BOARD_STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.BOARD_STATUS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 errors = 1;
  if (this->_internal_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  // .bms.balancing_status balancing_status = 2;
  if (this->_internal_balancing_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BOARD_STATUS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BOARD_STATUS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BOARD_STATUS::GetClassData() const { return &_class_data_; }

void BOARD_STATUS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BOARD_STATUS *>(to)->MergeFrom(
      static_cast<const BOARD_STATUS &>(from));
}


void BOARD_STATUS::MergeFrom(const BOARD_STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.BOARD_STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._internal_balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BOARD_STATUS::CopyFrom(const BOARD_STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.BOARD_STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOARD_STATUS::IsInitialized() const {
  return true;
}

void BOARD_STATUS::InternalSwap(BOARD_STATUS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BOARD_STATUS, balancing_status_)
      + sizeof(BOARD_STATUS::balancing_status_)
      - PROTOBUF_FIELD_OFFSET(BOARD_STATUS, errors_)>(
          reinterpret_cast<char*>(&errors_),
          reinterpret_cast<char*>(&other->errors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BOARD_STATUS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[0]);
}

// ===================================================================

class TEMPERATURES::_Internal {
 public:
};

TEMPERATURES::TEMPERATURES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bms.TEMPERATURES)
}
TEMPERATURES::TEMPERATURES(const TEMPERATURES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp5_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(temp5_));
  // @@protoc_insertion_point(copy_constructor:bms.TEMPERATURES)
}

inline void TEMPERATURES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp5_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(temp5_));
}

TEMPERATURES::~TEMPERATURES() {
  // @@protoc_insertion_point(destructor:bms.TEMPERATURES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TEMPERATURES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TEMPERATURES::ArenaDtor(void* object) {
  TEMPERATURES* _this = reinterpret_cast< TEMPERATURES* >(object);
  (void)_this;
}
void TEMPERATURES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TEMPERATURES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TEMPERATURES::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.TEMPERATURES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp5_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(temp5_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TEMPERATURES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          temp3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          temp4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          temp5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TEMPERATURES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.TEMPERATURES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // uint32 temp0 = 2;
  if (this->_internal_temp0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_temp0(), target);
  }

  // uint32 temp1 = 3;
  if (this->_internal_temp1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_temp1(), target);
  }

  // uint32 temp2 = 4;
  if (this->_internal_temp2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp2(), target);
  }

  // uint32 temp3 = 5;
  if (this->_internal_temp3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temp3(), target);
  }

  // uint32 temp4 = 6;
  if (this->_internal_temp4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temp4(), target);
  }

  // uint32 temp5 = 7;
  if (this->_internal_temp5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_temp5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.TEMPERATURES)
  return target;
}

size_t TEMPERATURES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.TEMPERATURES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  // uint32 temp0 = 2;
  if (this->_internal_temp0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp0());
  }

  // uint32 temp1 = 3;
  if (this->_internal_temp1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp1());
  }

  // uint32 temp2 = 4;
  if (this->_internal_temp2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp2());
  }

  // uint32 temp3 = 5;
  if (this->_internal_temp3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp3());
  }

  // uint32 temp4 = 6;
  if (this->_internal_temp4() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp4());
  }

  // uint32 temp5 = 7;
  if (this->_internal_temp5() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TEMPERATURES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TEMPERATURES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TEMPERATURES::GetClassData() const { return &_class_data_; }

void TEMPERATURES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TEMPERATURES *>(to)->MergeFrom(
      static_cast<const TEMPERATURES &>(from));
}


void TEMPERATURES::MergeFrom(const TEMPERATURES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.TEMPERATURES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from._internal_temp0() != 0) {
    _internal_set_temp0(from._internal_temp0());
  }
  if (from._internal_temp1() != 0) {
    _internal_set_temp1(from._internal_temp1());
  }
  if (from._internal_temp2() != 0) {
    _internal_set_temp2(from._internal_temp2());
  }
  if (from._internal_temp3() != 0) {
    _internal_set_temp3(from._internal_temp3());
  }
  if (from._internal_temp4() != 0) {
    _internal_set_temp4(from._internal_temp4());
  }
  if (from._internal_temp5() != 0) {
    _internal_set_temp5(from._internal_temp5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TEMPERATURES::CopyFrom(const TEMPERATURES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.TEMPERATURES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEMPERATURES::IsInitialized() const {
  return true;
}

void TEMPERATURES::InternalSwap(TEMPERATURES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TEMPERATURES, temp5_)
      + sizeof(TEMPERATURES::temp5_)
      - PROTOBUF_FIELD_OFFSET(TEMPERATURES, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TEMPERATURES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[1]);
}

// ===================================================================

class VOLTAGES::_Internal {
 public:
};

VOLTAGES::VOLTAGES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bms.VOLTAGES)
}
VOLTAGES::VOLTAGES(const VOLTAGES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage2_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(voltage2_));
  // @@protoc_insertion_point(copy_constructor:bms.VOLTAGES)
}

inline void VOLTAGES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltage2_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(voltage2_));
}

VOLTAGES::~VOLTAGES() {
  // @@protoc_insertion_point(destructor:bms.VOLTAGES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VOLTAGES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VOLTAGES::ArenaDtor(void* object) {
  VOLTAGES* _this = reinterpret_cast< VOLTAGES* >(object);
  (void)_this;
}
void VOLTAGES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VOLTAGES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VOLTAGES::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.VOLTAGES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage2_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(voltage2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VOLTAGES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VOLTAGES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.VOLTAGES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // uint32 voltage0 = 2;
  if (this->_internal_voltage0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage0(), target);
  }

  // uint32 voltage1 = 3;
  if (this->_internal_voltage1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage1(), target);
  }

  // uint32 voltage2 = 4;
  if (this->_internal_voltage2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.VOLTAGES)
  return target;
}

size_t VOLTAGES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.VOLTAGES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  // uint32 voltage0 = 2;
  if (this->_internal_voltage0() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage0());
  }

  // uint32 voltage1 = 3;
  if (this->_internal_voltage1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage1());
  }

  // uint32 voltage2 = 4;
  if (this->_internal_voltage2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VOLTAGES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VOLTAGES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VOLTAGES::GetClassData() const { return &_class_data_; }

void VOLTAGES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VOLTAGES *>(to)->MergeFrom(
      static_cast<const VOLTAGES &>(from));
}


void VOLTAGES::MergeFrom(const VOLTAGES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.VOLTAGES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from._internal_voltage0() != 0) {
    _internal_set_voltage0(from._internal_voltage0());
  }
  if (from._internal_voltage1() != 0) {
    _internal_set_voltage1(from._internal_voltage1());
  }
  if (from._internal_voltage2() != 0) {
    _internal_set_voltage2(from._internal_voltage2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VOLTAGES::CopyFrom(const VOLTAGES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.VOLTAGES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VOLTAGES::IsInitialized() const {
  return true;
}

void VOLTAGES::InternalSwap(VOLTAGES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VOLTAGES, voltage2_)
      + sizeof(VOLTAGES::voltage2_)
      - PROTOBUF_FIELD_OFFSET(VOLTAGES, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VOLTAGES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[2]);
}

// ===================================================================

class BALANCING::_Internal {
 public:
};

BALANCING::BALANCING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bms.BALANCING)
}
BALANCING::BALANCING(const BALANCING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_index_, &from.board_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&cells_) -
    reinterpret_cast<char*>(&board_index_)) + sizeof(cells_));
  // @@protoc_insertion_point(copy_constructor:bms.BALANCING)
}

inline void BALANCING::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cells_) -
    reinterpret_cast<char*>(&board_index_)) + sizeof(cells_));
}

BALANCING::~BALANCING() {
  // @@protoc_insertion_point(destructor:bms.BALANCING)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BALANCING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BALANCING::ArenaDtor(void* object) {
  BALANCING* _this = reinterpret_cast< BALANCING* >(object);
  (void)_this;
}
void BALANCING::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BALANCING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BALANCING::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.BALANCING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&board_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cells_) -
      reinterpret_cast<char*>(&board_index_)) + sizeof(cells_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BALANCING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 board_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          board_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BALANCING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.BALANCING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_board_index(), target);
  }

  // uint32 cells = 2;
  if (this->_internal_cells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.BALANCING)
  return target;
}

size_t BALANCING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.BALANCING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_board_index());
  }

  // uint32 cells = 2;
  if (this->_internal_cells() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cells());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BALANCING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BALANCING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BALANCING::GetClassData() const { return &_class_data_; }

void BALANCING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BALANCING *>(to)->MergeFrom(
      static_cast<const BALANCING &>(from));
}


void BALANCING::MergeFrom(const BALANCING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.BALANCING)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_board_index() != 0) {
    _internal_set_board_index(from._internal_board_index());
  }
  if (from._internal_cells() != 0) {
    _internal_set_cells(from._internal_cells());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BALANCING::CopyFrom(const BALANCING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.BALANCING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BALANCING::IsInitialized() const {
  return true;
}

void BALANCING::InternalSwap(BALANCING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BALANCING, cells_)
      + sizeof(BALANCING::cells_)
      - PROTOBUF_FIELD_OFFSET(BALANCING, board_index_)>(
          reinterpret_cast<char*>(&board_index_),
          reinterpret_cast<char*>(&other->board_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BALANCING::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[3]);
}

// ===================================================================

class FW_UPDATE::_Internal {
 public:
};

FW_UPDATE::FW_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bms.FW_UPDATE)
}
FW_UPDATE::FW_UPDATE(const FW_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  board_index_ = from.board_index_;
  // @@protoc_insertion_point(copy_constructor:bms.FW_UPDATE)
}

inline void FW_UPDATE::SharedCtor() {
board_index_ = 0u;
}

FW_UPDATE::~FW_UPDATE() {
  // @@protoc_insertion_point(destructor:bms.FW_UPDATE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FW_UPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FW_UPDATE::ArenaDtor(void* object) {
  FW_UPDATE* _this = reinterpret_cast< FW_UPDATE* >(object);
  (void)_this;
}
void FW_UPDATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FW_UPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FW_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.FW_UPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  board_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FW_UPDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 board_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          board_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FW_UPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.FW_UPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_board_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.FW_UPDATE)
  return target;
}

size_t FW_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.FW_UPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_board_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FW_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FW_UPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FW_UPDATE::GetClassData() const { return &_class_data_; }

void FW_UPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FW_UPDATE *>(to)->MergeFrom(
      static_cast<const FW_UPDATE &>(from));
}


void FW_UPDATE::MergeFrom(const FW_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.FW_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_board_index() != 0) {
    _internal_set_board_index(from._internal_board_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FW_UPDATE::CopyFrom(const FW_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.FW_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FW_UPDATE::IsInitialized() const {
  return true;
}

void FW_UPDATE::InternalSwap(FW_UPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(board_index_, other->board_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FW_UPDATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bms
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bms::BOARD_STATUS* Arena::CreateMaybeMessage< ::bms::BOARD_STATUS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::BOARD_STATUS >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::TEMPERATURES* Arena::CreateMaybeMessage< ::bms::TEMPERATURES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::TEMPERATURES >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::VOLTAGES* Arena::CreateMaybeMessage< ::bms::VOLTAGES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::VOLTAGES >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::BALANCING* Arena::CreateMaybeMessage< ::bms::BALANCING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::BALANCING >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::FW_UPDATE* Arena::CreateMaybeMessage< ::bms::FW_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::FW_UPDATE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
