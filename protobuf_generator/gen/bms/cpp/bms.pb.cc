// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bms.proto

#include "bms.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bms {
PROTOBUF_CONSTEXPR BoardStatus::BoardStatus(
    ::_pbi::ConstantInitialized)
  : errors_(0u)
  , balancing_status_(0)
{}
struct BoardStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStatusDefaultTypeInternal() {}
  union {
    BoardStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStatusDefaultTypeInternal _BoardStatus_default_instance_;
PROTOBUF_CONSTEXPR Temperatures::Temperatures(
    ::_pbi::ConstantInitialized)
  : start_index_(0u)
  , temp0_(0u)
  , temp1_(0u)
  , temp2_(0u)
  , temp3_(0u)
  , temp4_(0u)
  , temp5_(0u){}
struct TemperaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemperaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemperaturesDefaultTypeInternal() {}
  union {
    Temperatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemperaturesDefaultTypeInternal _Temperatures_default_instance_;
PROTOBUF_CONSTEXPR Voltages::Voltages(
    ::_pbi::ConstantInitialized)
  : start_index_(0u)
  , voltage0_(0u)
  , voltage1_(0u)
  , voltage2_(0u){}
struct VoltagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoltagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoltagesDefaultTypeInternal() {}
  union {
    Voltages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoltagesDefaultTypeInternal _Voltages_default_instance_;
PROTOBUF_CONSTEXPR Balancing::Balancing(
    ::_pbi::ConstantInitialized)
  : board_index_(0u)
  , cells_(0u){}
struct BalancingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BalancingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BalancingDefaultTypeInternal() {}
  union {
    Balancing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BalancingDefaultTypeInternal _Balancing_default_instance_;
PROTOBUF_CONSTEXPR FwUpdate::FwUpdate(
    ::_pbi::ConstantInitialized)
  : board_index_(0u){}
struct FwUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FwUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FwUpdateDefaultTypeInternal() {}
  union {
    FwUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FwUpdateDefaultTypeInternal _FwUpdate_default_instance_;
}  // namespace bms
static ::_pb::Metadata file_level_metadata_bms_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bms_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bms_2eproto = nullptr;

const uint32_t TableStruct_bms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::BoardStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::BoardStatus, errors_),
  PROTOBUF_FIELD_OFFSET(::bms::BoardStatus, balancing_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, start_index_),
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, temp0_),
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, temp1_),
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, temp2_),
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, temp3_),
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, temp4_),
  PROTOBUF_FIELD_OFFSET(::bms::Temperatures, temp5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::Voltages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::Voltages, start_index_),
  PROTOBUF_FIELD_OFFSET(::bms::Voltages, voltage0_),
  PROTOBUF_FIELD_OFFSET(::bms::Voltages, voltage1_),
  PROTOBUF_FIELD_OFFSET(::bms::Voltages, voltage2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::Balancing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::Balancing, board_index_),
  PROTOBUF_FIELD_OFFSET(::bms::Balancing, cells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bms::FwUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bms::FwUpdate, board_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bms::BoardStatus)},
  { 8, -1, -1, sizeof(::bms::Temperatures)},
  { 21, -1, -1, sizeof(::bms::Voltages)},
  { 31, -1, -1, sizeof(::bms::Balancing)},
  { 39, -1, -1, sizeof(::bms::FwUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bms::_BoardStatus_default_instance_._instance,
  &::bms::_Temperatures_default_instance_._instance,
  &::bms::_Voltages_default_instance_._instance,
  &::bms::_Balancing_default_instance_._instance,
  &::bms::_FwUpdate_default_instance_._instance,
};

const char descriptor_table_protodef_bms_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbms.proto\022\003bms\"Q\n\013BoardStatus\022\016\n\006error"
  "s\030\001 \001(\r\0222\n\020balancing_status\030\002 \001(\0162\030.bms."
  "BalancingStatusType\"}\n\014Temperatures\022\023\n\013s"
  "tart_index\030\001 \001(\r\022\r\n\005temp0\030\002 \001(\r\022\r\n\005temp1"
  "\030\003 \001(\r\022\r\n\005temp2\030\004 \001(\r\022\r\n\005temp3\030\005 \001(\r\022\r\n\005"
  "temp4\030\006 \001(\r\022\r\n\005temp5\030\007 \001(\r\"U\n\010Voltages\022\023"
  "\n\013start_index\030\001 \001(\r\022\020\n\010voltage0\030\002 \001(\r\022\020\n"
  "\010voltage1\030\003 \001(\r\022\020\n\010voltage2\030\004 \001(\r\"/\n\tBal"
  "ancing\022\023\n\013board_index\030\001 \001(\r\022\r\n\005cells\030\002 \001"
  "(\r\"\037\n\010FwUpdate\022\023\n\013board_index\030\001 \001(\r*O\n\023B"
  "alancingStatusType\022\030\n\024BALANCING_STATUS_O"
  "FF\020\000\022\036\n\032BALANCING_STATUS_DISCHARGE\020\001b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_bms_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bms_2eproto = {
    false, false, 484, descriptor_table_protodef_bms_2eproto,
    "bms.proto",
    &descriptor_table_bms_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_bms_2eproto::offsets,
    file_level_metadata_bms_2eproto, file_level_enum_descriptors_bms_2eproto,
    file_level_service_descriptors_bms_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bms_2eproto_getter() {
  return &descriptor_table_bms_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bms_2eproto(&descriptor_table_bms_2eproto);
namespace bms {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BalancingStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bms_2eproto);
  return file_level_enum_descriptors_bms_2eproto[0];
}
bool BalancingStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BoardStatus::_Internal {
 public:
};

BoardStatus::BoardStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bms.BoardStatus)
}
BoardStatus::BoardStatus(const BoardStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&errors_, &from.errors_,
    static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&errors_)) + sizeof(balancing_status_));
  // @@protoc_insertion_point(copy_constructor:bms.BoardStatus)
}

inline void BoardStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&errors_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balancing_status_) -
    reinterpret_cast<char*>(&errors_)) + sizeof(balancing_status_));
}

BoardStatus::~BoardStatus() {
  // @@protoc_insertion_point(destructor:bms.BoardStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoardStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoardStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.BoardStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&errors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balancing_status_) -
      reinterpret_cast<char*>(&errors_)) + sizeof(balancing_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bms.BalancingStatusType balancing_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_balancing_status(static_cast<::bms::BalancingStatusType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.BoardStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 errors = 1;
  if (this->_internal_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errors(), target);
  }

  // .bms.BalancingStatusType balancing_status = 2;
  if (this->_internal_balancing_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_balancing_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.BoardStatus)
  return target;
}

size_t BoardStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.BoardStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 errors = 1;
  if (this->_internal_errors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  // .bms.BalancingStatusType balancing_status = 2;
  if (this->_internal_balancing_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_balancing_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStatus::GetClassData() const { return &_class_data_; }

void BoardStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStatus *>(to)->MergeFrom(
      static_cast<const BoardStatus &>(from));
}


void BoardStatus::MergeFrom(const BoardStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.BoardStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from._internal_balancing_status() != 0) {
    _internal_set_balancing_status(from._internal_balancing_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStatus::CopyFrom(const BoardStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.BoardStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStatus::IsInitialized() const {
  return true;
}

void BoardStatus::InternalSwap(BoardStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardStatus, balancing_status_)
      + sizeof(BoardStatus::balancing_status_)
      - PROTOBUF_FIELD_OFFSET(BoardStatus, errors_)>(
          reinterpret_cast<char*>(&errors_),
          reinterpret_cast<char*>(&other->errors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[0]);
}

// ===================================================================

class Temperatures::_Internal {
 public:
};

Temperatures::Temperatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bms.Temperatures)
}
Temperatures::Temperatures(const Temperatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp5_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(temp5_));
  // @@protoc_insertion_point(copy_constructor:bms.Temperatures)
}

inline void Temperatures::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp5_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(temp5_));
}

Temperatures::~Temperatures() {
  // @@protoc_insertion_point(destructor:bms.Temperatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Temperatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Temperatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Temperatures::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.Temperatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp5_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(temp5_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Temperatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          temp3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          temp4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          temp5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Temperatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.Temperatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // uint32 temp0 = 2;
  if (this->_internal_temp0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_temp0(), target);
  }

  // uint32 temp1 = 3;
  if (this->_internal_temp1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_temp1(), target);
  }

  // uint32 temp2 = 4;
  if (this->_internal_temp2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp2(), target);
  }

  // uint32 temp3 = 5;
  if (this->_internal_temp3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_temp3(), target);
  }

  // uint32 temp4 = 6;
  if (this->_internal_temp4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temp4(), target);
  }

  // uint32 temp5 = 7;
  if (this->_internal_temp5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_temp5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.Temperatures)
  return target;
}

size_t Temperatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.Temperatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  // uint32 temp0 = 2;
  if (this->_internal_temp0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp0());
  }

  // uint32 temp1 = 3;
  if (this->_internal_temp1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp1());
  }

  // uint32 temp2 = 4;
  if (this->_internal_temp2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp2());
  }

  // uint32 temp3 = 5;
  if (this->_internal_temp3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp3());
  }

  // uint32 temp4 = 6;
  if (this->_internal_temp4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp4());
  }

  // uint32 temp5 = 7;
  if (this->_internal_temp5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_temp5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Temperatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Temperatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Temperatures::GetClassData() const { return &_class_data_; }

void Temperatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Temperatures *>(to)->MergeFrom(
      static_cast<const Temperatures &>(from));
}


void Temperatures::MergeFrom(const Temperatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.Temperatures)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from._internal_temp0() != 0) {
    _internal_set_temp0(from._internal_temp0());
  }
  if (from._internal_temp1() != 0) {
    _internal_set_temp1(from._internal_temp1());
  }
  if (from._internal_temp2() != 0) {
    _internal_set_temp2(from._internal_temp2());
  }
  if (from._internal_temp3() != 0) {
    _internal_set_temp3(from._internal_temp3());
  }
  if (from._internal_temp4() != 0) {
    _internal_set_temp4(from._internal_temp4());
  }
  if (from._internal_temp5() != 0) {
    _internal_set_temp5(from._internal_temp5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Temperatures::CopyFrom(const Temperatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.Temperatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Temperatures::IsInitialized() const {
  return true;
}

void Temperatures::InternalSwap(Temperatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Temperatures, temp5_)
      + sizeof(Temperatures::temp5_)
      - PROTOBUF_FIELD_OFFSET(Temperatures, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Temperatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[1]);
}

// ===================================================================

class Voltages::_Internal {
 public:
};

Voltages::Voltages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bms.Voltages)
}
Voltages::Voltages(const Voltages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage2_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(voltage2_));
  // @@protoc_insertion_point(copy_constructor:bms.Voltages)
}

inline void Voltages::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&voltage2_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(voltage2_));
}

Voltages::~Voltages() {
  // @@protoc_insertion_point(destructor:bms.Voltages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Voltages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Voltages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Voltages::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.Voltages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage2_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(voltage2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Voltages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          voltage0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          voltage1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 voltage2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          voltage2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Voltages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.Voltages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // uint32 voltage0 = 2;
  if (this->_internal_voltage0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage0(), target);
  }

  // uint32 voltage1 = 3;
  if (this->_internal_voltage1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voltage1(), target);
  }

  // uint32 voltage2 = 4;
  if (this->_internal_voltage2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_voltage2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.Voltages)
  return target;
}

size_t Voltages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.Voltages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start_index = 1;
  if (this->_internal_start_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  // uint32 voltage0 = 2;
  if (this->_internal_voltage0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage0());
  }

  // uint32 voltage1 = 3;
  if (this->_internal_voltage1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage1());
  }

  // uint32 voltage2 = 4;
  if (this->_internal_voltage2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voltage2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Voltages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Voltages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Voltages::GetClassData() const { return &_class_data_; }

void Voltages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Voltages *>(to)->MergeFrom(
      static_cast<const Voltages &>(from));
}


void Voltages::MergeFrom(const Voltages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.Voltages)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from._internal_voltage0() != 0) {
    _internal_set_voltage0(from._internal_voltage0());
  }
  if (from._internal_voltage1() != 0) {
    _internal_set_voltage1(from._internal_voltage1());
  }
  if (from._internal_voltage2() != 0) {
    _internal_set_voltage2(from._internal_voltage2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Voltages::CopyFrom(const Voltages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.Voltages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voltages::IsInitialized() const {
  return true;
}

void Voltages::InternalSwap(Voltages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Voltages, voltage2_)
      + sizeof(Voltages::voltage2_)
      - PROTOBUF_FIELD_OFFSET(Voltages, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Voltages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[2]);
}

// ===================================================================

class Balancing::_Internal {
 public:
};

Balancing::Balancing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bms.Balancing)
}
Balancing::Balancing(const Balancing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_index_, &from.board_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&cells_) -
    reinterpret_cast<char*>(&board_index_)) + sizeof(cells_));
  // @@protoc_insertion_point(copy_constructor:bms.Balancing)
}

inline void Balancing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cells_) -
    reinterpret_cast<char*>(&board_index_)) + sizeof(cells_));
}

Balancing::~Balancing() {
  // @@protoc_insertion_point(destructor:bms.Balancing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Balancing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Balancing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Balancing::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.Balancing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&board_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cells_) -
      reinterpret_cast<char*>(&board_index_)) + sizeof(cells_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balancing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 board_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          board_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Balancing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.Balancing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_board_index(), target);
  }

  // uint32 cells = 2;
  if (this->_internal_cells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.Balancing)
  return target;
}

size_t Balancing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.Balancing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_board_index());
  }

  // uint32 cells = 2;
  if (this->_internal_cells() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cells());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Balancing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Balancing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Balancing::GetClassData() const { return &_class_data_; }

void Balancing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Balancing *>(to)->MergeFrom(
      static_cast<const Balancing &>(from));
}


void Balancing::MergeFrom(const Balancing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.Balancing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_board_index() != 0) {
    _internal_set_board_index(from._internal_board_index());
  }
  if (from._internal_cells() != 0) {
    _internal_set_cells(from._internal_cells());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Balancing::CopyFrom(const Balancing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.Balancing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balancing::IsInitialized() const {
  return true;
}

void Balancing::InternalSwap(Balancing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Balancing, cells_)
      + sizeof(Balancing::cells_)
      - PROTOBUF_FIELD_OFFSET(Balancing, board_index_)>(
          reinterpret_cast<char*>(&board_index_),
          reinterpret_cast<char*>(&other->board_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Balancing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[3]);
}

// ===================================================================

class FwUpdate::_Internal {
 public:
};

FwUpdate::FwUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bms.FwUpdate)
}
FwUpdate::FwUpdate(const FwUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  board_index_ = from.board_index_;
  // @@protoc_insertion_point(copy_constructor:bms.FwUpdate)
}

inline void FwUpdate::SharedCtor() {
board_index_ = 0u;
}

FwUpdate::~FwUpdate() {
  // @@protoc_insertion_point(destructor:bms.FwUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FwUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FwUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FwUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:bms.FwUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  board_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FwUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 board_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          board_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FwUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bms.FwUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_board_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bms.FwUpdate)
  return target;
}

size_t FwUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bms.FwUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 board_index = 1;
  if (this->_internal_board_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_board_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FwUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FwUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FwUpdate::GetClassData() const { return &_class_data_; }

void FwUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FwUpdate *>(to)->MergeFrom(
      static_cast<const FwUpdate &>(from));
}


void FwUpdate::MergeFrom(const FwUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bms.FwUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_board_index() != 0) {
    _internal_set_board_index(from._internal_board_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FwUpdate::CopyFrom(const FwUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bms.FwUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FwUpdate::IsInitialized() const {
  return true;
}

void FwUpdate::InternalSwap(FwUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(board_index_, other->board_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FwUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bms_2eproto_getter, &descriptor_table_bms_2eproto_once,
      file_level_metadata_bms_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bms
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bms::BoardStatus*
Arena::CreateMaybeMessage< ::bms::BoardStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::BoardStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::Temperatures*
Arena::CreateMaybeMessage< ::bms::Temperatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::Temperatures >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::Voltages*
Arena::CreateMaybeMessage< ::bms::Voltages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::Voltages >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::Balancing*
Arena::CreateMaybeMessage< ::bms::Balancing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::Balancing >(arena);
}
template<> PROTOBUF_NOINLINE ::bms::FwUpdate*
Arena::CreateMaybeMessage< ::bms::FwUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bms::FwUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
