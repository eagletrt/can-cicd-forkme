// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bms_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bms_2eproto;
namespace bms {
class BALANCING;
struct BALANCINGDefaultTypeInternal;
extern BALANCINGDefaultTypeInternal _BALANCING_default_instance_;
class BOARD_STATUS;
struct BOARD_STATUSDefaultTypeInternal;
extern BOARD_STATUSDefaultTypeInternal _BOARD_STATUS_default_instance_;
class FW_UPDATE;
struct FW_UPDATEDefaultTypeInternal;
extern FW_UPDATEDefaultTypeInternal _FW_UPDATE_default_instance_;
class TEMPERATURES;
struct TEMPERATURESDefaultTypeInternal;
extern TEMPERATURESDefaultTypeInternal _TEMPERATURES_default_instance_;
class VOLTAGES;
struct VOLTAGESDefaultTypeInternal;
extern VOLTAGESDefaultTypeInternal _VOLTAGES_default_instance_;
}  // namespace bms
PROTOBUF_NAMESPACE_OPEN
template<> ::bms::BALANCING* Arena::CreateMaybeMessage<::bms::BALANCING>(Arena*);
template<> ::bms::BOARD_STATUS* Arena::CreateMaybeMessage<::bms::BOARD_STATUS>(Arena*);
template<> ::bms::FW_UPDATE* Arena::CreateMaybeMessage<::bms::FW_UPDATE>(Arena*);
template<> ::bms::TEMPERATURES* Arena::CreateMaybeMessage<::bms::TEMPERATURES>(Arena*);
template<> ::bms::VOLTAGES* Arena::CreateMaybeMessage<::bms::VOLTAGES>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bms {

enum balancing_status : int {
  BALANCING_STATUS_OFF = 0,
  BALANCING_STATUS_DISCHARGE = 1,
  balancing_status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  balancing_status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool balancing_status_IsValid(int value);
constexpr balancing_status balancing_status_MIN = BALANCING_STATUS_OFF;
constexpr balancing_status balancing_status_MAX = BALANCING_STATUS_DISCHARGE;
constexpr int balancing_status_ARRAYSIZE = balancing_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* balancing_status_descriptor();
template<typename T>
inline const std::string& balancing_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, balancing_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function balancing_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    balancing_status_descriptor(), enum_t_value);
}
inline bool balancing_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, balancing_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<balancing_status>(
    balancing_status_descriptor(), name, value);
}
// ===================================================================

class BOARD_STATUS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bms.BOARD_STATUS) */ {
 public:
  inline BOARD_STATUS() : BOARD_STATUS(nullptr) {}
  ~BOARD_STATUS() override;
  explicit constexpr BOARD_STATUS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BOARD_STATUS(const BOARD_STATUS& from);
  BOARD_STATUS(BOARD_STATUS&& from) noexcept
    : BOARD_STATUS() {
    *this = ::std::move(from);
  }

  inline BOARD_STATUS& operator=(const BOARD_STATUS& from) {
    CopyFrom(from);
    return *this;
  }
  inline BOARD_STATUS& operator=(BOARD_STATUS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BOARD_STATUS& default_instance() {
    return *internal_default_instance();
  }
  static inline const BOARD_STATUS* internal_default_instance() {
    return reinterpret_cast<const BOARD_STATUS*>(
               &_BOARD_STATUS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BOARD_STATUS& a, BOARD_STATUS& b) {
    a.Swap(&b);
  }
  inline void Swap(BOARD_STATUS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BOARD_STATUS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BOARD_STATUS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BOARD_STATUS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BOARD_STATUS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BOARD_STATUS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BOARD_STATUS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bms.BOARD_STATUS";
  }
  protected:
  explicit BOARD_STATUS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
    kBalancingStatusFieldNumber = 2,
  };
  // uint32 errors = 1;
  void clear_errors();
  uint32_t errors() const;
  void set_errors(uint32_t value);
  private:
  uint32_t _internal_errors() const;
  void _internal_set_errors(uint32_t value);
  public:

  // .bms.balancing_status balancing_status = 2;
  void clear_balancing_status();
  ::bms::balancing_status balancing_status() const;
  void set_balancing_status(::bms::balancing_status value);
  private:
  ::bms::balancing_status _internal_balancing_status() const;
  void _internal_set_balancing_status(::bms::balancing_status value);
  public:

  // @@protoc_insertion_point(class_scope:bms.BOARD_STATUS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t errors_;
  int balancing_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bms_2eproto;
};
// -------------------------------------------------------------------

class TEMPERATURES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bms.TEMPERATURES) */ {
 public:
  inline TEMPERATURES() : TEMPERATURES(nullptr) {}
  ~TEMPERATURES() override;
  explicit constexpr TEMPERATURES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEMPERATURES(const TEMPERATURES& from);
  TEMPERATURES(TEMPERATURES&& from) noexcept
    : TEMPERATURES() {
    *this = ::std::move(from);
  }

  inline TEMPERATURES& operator=(const TEMPERATURES& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEMPERATURES& operator=(TEMPERATURES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEMPERATURES& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEMPERATURES* internal_default_instance() {
    return reinterpret_cast<const TEMPERATURES*>(
               &_TEMPERATURES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TEMPERATURES& a, TEMPERATURES& b) {
    a.Swap(&b);
  }
  inline void Swap(TEMPERATURES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEMPERATURES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEMPERATURES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEMPERATURES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEMPERATURES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TEMPERATURES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEMPERATURES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bms.TEMPERATURES";
  }
  protected:
  explicit TEMPERATURES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartIndexFieldNumber = 1,
    kTemp0FieldNumber = 2,
    kTemp1FieldNumber = 3,
    kTemp2FieldNumber = 4,
    kTemp3FieldNumber = 5,
    kTemp4FieldNumber = 6,
    kTemp5FieldNumber = 7,
  };
  // uint32 start_index = 1;
  void clear_start_index();
  uint32_t start_index() const;
  void set_start_index(uint32_t value);
  private:
  uint32_t _internal_start_index() const;
  void _internal_set_start_index(uint32_t value);
  public:

  // uint32 temp0 = 2;
  void clear_temp0();
  uint32_t temp0() const;
  void set_temp0(uint32_t value);
  private:
  uint32_t _internal_temp0() const;
  void _internal_set_temp0(uint32_t value);
  public:

  // uint32 temp1 = 3;
  void clear_temp1();
  uint32_t temp1() const;
  void set_temp1(uint32_t value);
  private:
  uint32_t _internal_temp1() const;
  void _internal_set_temp1(uint32_t value);
  public:

  // uint32 temp2 = 4;
  void clear_temp2();
  uint32_t temp2() const;
  void set_temp2(uint32_t value);
  private:
  uint32_t _internal_temp2() const;
  void _internal_set_temp2(uint32_t value);
  public:

  // uint32 temp3 = 5;
  void clear_temp3();
  uint32_t temp3() const;
  void set_temp3(uint32_t value);
  private:
  uint32_t _internal_temp3() const;
  void _internal_set_temp3(uint32_t value);
  public:

  // uint32 temp4 = 6;
  void clear_temp4();
  uint32_t temp4() const;
  void set_temp4(uint32_t value);
  private:
  uint32_t _internal_temp4() const;
  void _internal_set_temp4(uint32_t value);
  public:

  // uint32 temp5 = 7;
  void clear_temp5();
  uint32_t temp5() const;
  void set_temp5(uint32_t value);
  private:
  uint32_t _internal_temp5() const;
  void _internal_set_temp5(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bms.TEMPERATURES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t start_index_;
  uint32_t temp0_;
  uint32_t temp1_;
  uint32_t temp2_;
  uint32_t temp3_;
  uint32_t temp4_;
  uint32_t temp5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bms_2eproto;
};
// -------------------------------------------------------------------

class VOLTAGES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bms.VOLTAGES) */ {
 public:
  inline VOLTAGES() : VOLTAGES(nullptr) {}
  ~VOLTAGES() override;
  explicit constexpr VOLTAGES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VOLTAGES(const VOLTAGES& from);
  VOLTAGES(VOLTAGES&& from) noexcept
    : VOLTAGES() {
    *this = ::std::move(from);
  }

  inline VOLTAGES& operator=(const VOLTAGES& from) {
    CopyFrom(from);
    return *this;
  }
  inline VOLTAGES& operator=(VOLTAGES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VOLTAGES& default_instance() {
    return *internal_default_instance();
  }
  static inline const VOLTAGES* internal_default_instance() {
    return reinterpret_cast<const VOLTAGES*>(
               &_VOLTAGES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VOLTAGES& a, VOLTAGES& b) {
    a.Swap(&b);
  }
  inline void Swap(VOLTAGES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VOLTAGES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VOLTAGES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VOLTAGES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VOLTAGES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VOLTAGES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VOLTAGES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bms.VOLTAGES";
  }
  protected:
  explicit VOLTAGES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartIndexFieldNumber = 1,
    kVoltage0FieldNumber = 2,
    kVoltage1FieldNumber = 3,
    kVoltage2FieldNumber = 4,
  };
  // uint32 start_index = 1;
  void clear_start_index();
  uint32_t start_index() const;
  void set_start_index(uint32_t value);
  private:
  uint32_t _internal_start_index() const;
  void _internal_set_start_index(uint32_t value);
  public:

  // uint32 voltage0 = 2;
  void clear_voltage0();
  uint32_t voltage0() const;
  void set_voltage0(uint32_t value);
  private:
  uint32_t _internal_voltage0() const;
  void _internal_set_voltage0(uint32_t value);
  public:

  // uint32 voltage1 = 3;
  void clear_voltage1();
  uint32_t voltage1() const;
  void set_voltage1(uint32_t value);
  private:
  uint32_t _internal_voltage1() const;
  void _internal_set_voltage1(uint32_t value);
  public:

  // uint32 voltage2 = 4;
  void clear_voltage2();
  uint32_t voltage2() const;
  void set_voltage2(uint32_t value);
  private:
  uint32_t _internal_voltage2() const;
  void _internal_set_voltage2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bms.VOLTAGES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t start_index_;
  uint32_t voltage0_;
  uint32_t voltage1_;
  uint32_t voltage2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bms_2eproto;
};
// -------------------------------------------------------------------

class BALANCING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bms.BALANCING) */ {
 public:
  inline BALANCING() : BALANCING(nullptr) {}
  ~BALANCING() override;
  explicit constexpr BALANCING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BALANCING(const BALANCING& from);
  BALANCING(BALANCING&& from) noexcept
    : BALANCING() {
    *this = ::std::move(from);
  }

  inline BALANCING& operator=(const BALANCING& from) {
    CopyFrom(from);
    return *this;
  }
  inline BALANCING& operator=(BALANCING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BALANCING& default_instance() {
    return *internal_default_instance();
  }
  static inline const BALANCING* internal_default_instance() {
    return reinterpret_cast<const BALANCING*>(
               &_BALANCING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BALANCING& a, BALANCING& b) {
    a.Swap(&b);
  }
  inline void Swap(BALANCING* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BALANCING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BALANCING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BALANCING>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BALANCING& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BALANCING& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BALANCING* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bms.BALANCING";
  }
  protected:
  explicit BALANCING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardIndexFieldNumber = 1,
    kCellsFieldNumber = 2,
  };
  // uint32 board_index = 1;
  void clear_board_index();
  uint32_t board_index() const;
  void set_board_index(uint32_t value);
  private:
  uint32_t _internal_board_index() const;
  void _internal_set_board_index(uint32_t value);
  public:

  // uint32 cells = 2;
  void clear_cells();
  uint32_t cells() const;
  void set_cells(uint32_t value);
  private:
  uint32_t _internal_cells() const;
  void _internal_set_cells(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bms.BALANCING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t board_index_;
  uint32_t cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bms_2eproto;
};
// -------------------------------------------------------------------

class FW_UPDATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bms.FW_UPDATE) */ {
 public:
  inline FW_UPDATE() : FW_UPDATE(nullptr) {}
  ~FW_UPDATE() override;
  explicit constexpr FW_UPDATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FW_UPDATE(const FW_UPDATE& from);
  FW_UPDATE(FW_UPDATE&& from) noexcept
    : FW_UPDATE() {
    *this = ::std::move(from);
  }

  inline FW_UPDATE& operator=(const FW_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline FW_UPDATE& operator=(FW_UPDATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FW_UPDATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const FW_UPDATE* internal_default_instance() {
    return reinterpret_cast<const FW_UPDATE*>(
               &_FW_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FW_UPDATE& a, FW_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(FW_UPDATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FW_UPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FW_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FW_UPDATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FW_UPDATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FW_UPDATE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FW_UPDATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bms.FW_UPDATE";
  }
  protected:
  explicit FW_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardIndexFieldNumber = 1,
  };
  // uint32 board_index = 1;
  void clear_board_index();
  uint32_t board_index() const;
  void set_board_index(uint32_t value);
  private:
  uint32_t _internal_board_index() const;
  void _internal_set_board_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bms.FW_UPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t board_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BOARD_STATUS

// uint32 errors = 1;
inline void BOARD_STATUS::clear_errors() {
  errors_ = 0u;
}
inline uint32_t BOARD_STATUS::_internal_errors() const {
  return errors_;
}
inline uint32_t BOARD_STATUS::errors() const {
  // @@protoc_insertion_point(field_get:bms.BOARD_STATUS.errors)
  return _internal_errors();
}
inline void BOARD_STATUS::_internal_set_errors(uint32_t value) {
  
  errors_ = value;
}
inline void BOARD_STATUS::set_errors(uint32_t value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:bms.BOARD_STATUS.errors)
}

// .bms.balancing_status balancing_status = 2;
inline void BOARD_STATUS::clear_balancing_status() {
  balancing_status_ = 0;
}
inline ::bms::balancing_status BOARD_STATUS::_internal_balancing_status() const {
  return static_cast< ::bms::balancing_status >(balancing_status_);
}
inline ::bms::balancing_status BOARD_STATUS::balancing_status() const {
  // @@protoc_insertion_point(field_get:bms.BOARD_STATUS.balancing_status)
  return _internal_balancing_status();
}
inline void BOARD_STATUS::_internal_set_balancing_status(::bms::balancing_status value) {
  
  balancing_status_ = value;
}
inline void BOARD_STATUS::set_balancing_status(::bms::balancing_status value) {
  _internal_set_balancing_status(value);
  // @@protoc_insertion_point(field_set:bms.BOARD_STATUS.balancing_status)
}

// -------------------------------------------------------------------

// TEMPERATURES

// uint32 start_index = 1;
inline void TEMPERATURES::clear_start_index() {
  start_index_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_start_index() const {
  return start_index_;
}
inline uint32_t TEMPERATURES::start_index() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.start_index)
  return _internal_start_index();
}
inline void TEMPERATURES::_internal_set_start_index(uint32_t value) {
  
  start_index_ = value;
}
inline void TEMPERATURES::set_start_index(uint32_t value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.start_index)
}

// uint32 temp0 = 2;
inline void TEMPERATURES::clear_temp0() {
  temp0_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_temp0() const {
  return temp0_;
}
inline uint32_t TEMPERATURES::temp0() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.temp0)
  return _internal_temp0();
}
inline void TEMPERATURES::_internal_set_temp0(uint32_t value) {
  
  temp0_ = value;
}
inline void TEMPERATURES::set_temp0(uint32_t value) {
  _internal_set_temp0(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.temp0)
}

// uint32 temp1 = 3;
inline void TEMPERATURES::clear_temp1() {
  temp1_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_temp1() const {
  return temp1_;
}
inline uint32_t TEMPERATURES::temp1() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.temp1)
  return _internal_temp1();
}
inline void TEMPERATURES::_internal_set_temp1(uint32_t value) {
  
  temp1_ = value;
}
inline void TEMPERATURES::set_temp1(uint32_t value) {
  _internal_set_temp1(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.temp1)
}

// uint32 temp2 = 4;
inline void TEMPERATURES::clear_temp2() {
  temp2_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_temp2() const {
  return temp2_;
}
inline uint32_t TEMPERATURES::temp2() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.temp2)
  return _internal_temp2();
}
inline void TEMPERATURES::_internal_set_temp2(uint32_t value) {
  
  temp2_ = value;
}
inline void TEMPERATURES::set_temp2(uint32_t value) {
  _internal_set_temp2(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.temp2)
}

// uint32 temp3 = 5;
inline void TEMPERATURES::clear_temp3() {
  temp3_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_temp3() const {
  return temp3_;
}
inline uint32_t TEMPERATURES::temp3() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.temp3)
  return _internal_temp3();
}
inline void TEMPERATURES::_internal_set_temp3(uint32_t value) {
  
  temp3_ = value;
}
inline void TEMPERATURES::set_temp3(uint32_t value) {
  _internal_set_temp3(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.temp3)
}

// uint32 temp4 = 6;
inline void TEMPERATURES::clear_temp4() {
  temp4_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_temp4() const {
  return temp4_;
}
inline uint32_t TEMPERATURES::temp4() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.temp4)
  return _internal_temp4();
}
inline void TEMPERATURES::_internal_set_temp4(uint32_t value) {
  
  temp4_ = value;
}
inline void TEMPERATURES::set_temp4(uint32_t value) {
  _internal_set_temp4(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.temp4)
}

// uint32 temp5 = 7;
inline void TEMPERATURES::clear_temp5() {
  temp5_ = 0u;
}
inline uint32_t TEMPERATURES::_internal_temp5() const {
  return temp5_;
}
inline uint32_t TEMPERATURES::temp5() const {
  // @@protoc_insertion_point(field_get:bms.TEMPERATURES.temp5)
  return _internal_temp5();
}
inline void TEMPERATURES::_internal_set_temp5(uint32_t value) {
  
  temp5_ = value;
}
inline void TEMPERATURES::set_temp5(uint32_t value) {
  _internal_set_temp5(value);
  // @@protoc_insertion_point(field_set:bms.TEMPERATURES.temp5)
}

// -------------------------------------------------------------------

// VOLTAGES

// uint32 start_index = 1;
inline void VOLTAGES::clear_start_index() {
  start_index_ = 0u;
}
inline uint32_t VOLTAGES::_internal_start_index() const {
  return start_index_;
}
inline uint32_t VOLTAGES::start_index() const {
  // @@protoc_insertion_point(field_get:bms.VOLTAGES.start_index)
  return _internal_start_index();
}
inline void VOLTAGES::_internal_set_start_index(uint32_t value) {
  
  start_index_ = value;
}
inline void VOLTAGES::set_start_index(uint32_t value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:bms.VOLTAGES.start_index)
}

// uint32 voltage0 = 2;
inline void VOLTAGES::clear_voltage0() {
  voltage0_ = 0u;
}
inline uint32_t VOLTAGES::_internal_voltage0() const {
  return voltage0_;
}
inline uint32_t VOLTAGES::voltage0() const {
  // @@protoc_insertion_point(field_get:bms.VOLTAGES.voltage0)
  return _internal_voltage0();
}
inline void VOLTAGES::_internal_set_voltage0(uint32_t value) {
  
  voltage0_ = value;
}
inline void VOLTAGES::set_voltage0(uint32_t value) {
  _internal_set_voltage0(value);
  // @@protoc_insertion_point(field_set:bms.VOLTAGES.voltage0)
}

// uint32 voltage1 = 3;
inline void VOLTAGES::clear_voltage1() {
  voltage1_ = 0u;
}
inline uint32_t VOLTAGES::_internal_voltage1() const {
  return voltage1_;
}
inline uint32_t VOLTAGES::voltage1() const {
  // @@protoc_insertion_point(field_get:bms.VOLTAGES.voltage1)
  return _internal_voltage1();
}
inline void VOLTAGES::_internal_set_voltage1(uint32_t value) {
  
  voltage1_ = value;
}
inline void VOLTAGES::set_voltage1(uint32_t value) {
  _internal_set_voltage1(value);
  // @@protoc_insertion_point(field_set:bms.VOLTAGES.voltage1)
}

// uint32 voltage2 = 4;
inline void VOLTAGES::clear_voltage2() {
  voltage2_ = 0u;
}
inline uint32_t VOLTAGES::_internal_voltage2() const {
  return voltage2_;
}
inline uint32_t VOLTAGES::voltage2() const {
  // @@protoc_insertion_point(field_get:bms.VOLTAGES.voltage2)
  return _internal_voltage2();
}
inline void VOLTAGES::_internal_set_voltage2(uint32_t value) {
  
  voltage2_ = value;
}
inline void VOLTAGES::set_voltage2(uint32_t value) {
  _internal_set_voltage2(value);
  // @@protoc_insertion_point(field_set:bms.VOLTAGES.voltage2)
}

// -------------------------------------------------------------------

// BALANCING

// uint32 board_index = 1;
inline void BALANCING::clear_board_index() {
  board_index_ = 0u;
}
inline uint32_t BALANCING::_internal_board_index() const {
  return board_index_;
}
inline uint32_t BALANCING::board_index() const {
  // @@protoc_insertion_point(field_get:bms.BALANCING.board_index)
  return _internal_board_index();
}
inline void BALANCING::_internal_set_board_index(uint32_t value) {
  
  board_index_ = value;
}
inline void BALANCING::set_board_index(uint32_t value) {
  _internal_set_board_index(value);
  // @@protoc_insertion_point(field_set:bms.BALANCING.board_index)
}

// uint32 cells = 2;
inline void BALANCING::clear_cells() {
  cells_ = 0u;
}
inline uint32_t BALANCING::_internal_cells() const {
  return cells_;
}
inline uint32_t BALANCING::cells() const {
  // @@protoc_insertion_point(field_get:bms.BALANCING.cells)
  return _internal_cells();
}
inline void BALANCING::_internal_set_cells(uint32_t value) {
  
  cells_ = value;
}
inline void BALANCING::set_cells(uint32_t value) {
  _internal_set_cells(value);
  // @@protoc_insertion_point(field_set:bms.BALANCING.cells)
}

// -------------------------------------------------------------------

// FW_UPDATE

// uint32 board_index = 1;
inline void FW_UPDATE::clear_board_index() {
  board_index_ = 0u;
}
inline uint32_t FW_UPDATE::_internal_board_index() const {
  return board_index_;
}
inline uint32_t FW_UPDATE::board_index() const {
  // @@protoc_insertion_point(field_get:bms.FW_UPDATE.board_index)
  return _internal_board_index();
}
inline void FW_UPDATE::_internal_set_board_index(uint32_t value) {
  
  board_index_ = value;
}
inline void FW_UPDATE::set_board_index(uint32_t value) {
  _internal_set_board_index(value);
  // @@protoc_insertion_point(field_set:bms.FW_UPDATE.board_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bms

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bms::balancing_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bms::balancing_status>() {
  return ::bms::balancing_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bms_2eproto
