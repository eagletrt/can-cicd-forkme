syntax = "proto3";

package primary;

enum Tlm_Status_Set {
  TLM_STATUS_SET_OFF = 0;
  TLM_STATUS_SET_ON = 1;
}

enum Race_Type {
  RACE_TYPE_ACCELERATION = 0;
  RACE_TYPE_SKIDPAD = 1;
  RACE_TYPE_AUTOCROSS = 2;
  RACE_TYPE_ENDURANCE = 3;
}

enum Tlm_Status {
  TLM_STATUS_ON = 0;
  TLM_STATUS_OFF = 1;
}

enum Inverter_Status {
  INVERTER_STATUS_OFF = 0;
  INVERTER_STATUS_IDLE = 1;
  INVERTER_STATUS_ON = 2;
}

enum Car_Status {
  CAR_STATUS_IDLE = 0;
  CAR_STATUS_SETUP = 1;
  CAR_STATUS_RUN = 2;
}

enum Ts_Status {
  TS_STATUS_OFF = 0;
  TS_STATUS_PRECHARGE = 1;
  TS_STATUS_ON = 2;
  TS_STATUS_FATAL = 3;
}

enum Ts_Status_Set {
  TS_STATUS_SET_OFF = 0;
  TS_STATUS_SET_ON = 1;
}

enum Set_Balancing_Status {
  SET_BALANCING_STATUS_OFF = 0;
  SET_BALANCING_STATUS_ON = 1;
}

enum Traction_Control {
  TRACTION_CONTROL_OFF = 0;
  TRACTION_CONTROL_SLIP_CONTROL = 1;
  TRACTION_CONTROL_TORQUE_VECTORING = 2;
  TRACTION_CONTROL_COMPLETE = 3;
}

enum Map {
  MAP_R = 0;
  MAP_D20 = 1;
  MAP_D40 = 2;
  MAP_D60 = 3;
  MAP_D80 = 4;
  MAP_D100 = 5;
}

enum Car_Status_Set {
  CAR_STATUS_SET_IDLE = 0;
  CAR_STATUS_SET_RUN = 1;
}

enum Bound {
  BOUND_SET_MAX = 0;
  BOUND_SET_MIN = 1;
}

enum Pedal {
  PEDAL_ACCELERATOR = 0;
  PEDAL_BRAKE = 1;
}

enum Balancing_Status {
  BALANCING_STATUS_ON = 0;
  BALANCING_STATUS_OFF = 1;
}

message STEER_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
}

message DAS_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
}

message HV_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
}

message LV_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
}

message TLM_VERSION {
    uint32 component_version = 1;
    uint32 cancicd_version = 2;
}

message TIMESTAMP {
    uint32 timestamp = 1;
}

message SET_TLM_STATUS {
    Tlm_Status_Set tlm_status_set = 1;
    Race_Type race_type = 2;
    uint32 driver = 3;
    uint32 circuit = 4;
}

message STEER_SYSTEM_STATUS {
    uint32 soc_temp = 1;
}

message TLM_STATUS {
    Tlm_Status tlm_status = 1;
    Race_Type race_type = 2;
    uint32 driver = 3;
    uint32 circuit = 4;
}

message CAR_STATUS {
    Inverter_Status inverter_l = 1;
    Inverter_Status inverter_r = 2;
    Car_Status car_status = 3;
}

message SPEED {
    uint32 encoder_r = 1;
    uint32 encoder_l = 2;
    uint32 inverter_r = 3;
    uint32 inverter_l = 4;
}

message HV_VOLTAGE {
    uint32 pack_voltage = 1;
    uint32 bus_voltage = 2;
    uint32 max_cell_voltage = 3;
    uint32 min_cell_voltage = 4;
}

message HV_CURRENT {
    uint32 current = 1;
    int32 power = 2;
}

message HV_TEMP {
    uint32 average_temp = 1;
    uint32 max_temp = 2;
    uint32 min_temp = 3;
}

message HV_ERRORS {
    uint32 warnings = 1;
    uint32 errors = 2;
}

message TS_STATUS {
    Ts_Status ts_status = 1;
}

message SET_TS_STATUS {
    Ts_Status_Set ts_status_set = 1;
}

message SET_CELL_BALANCING_STATUS {
    Set_Balancing_Status set_balancing_status = 1;
}

message HANDCART_STATUS {
    bool connected = 1;
}

message STEER_STATUS {
    Traction_Control traction_control = 1;
    Map map = 2;
}

message SET_CAR_STATUS {
    Car_Status_Set car_status_set = 1;
}

message SET_PEDALS_RANGE {
    Bound bound = 1;
    Pedal pedal = 2;
}

message LV_CURRENT {
    uint32 current = 1;
}

message LV_VOLTAGE {
    uint32 total_voltage = 1;
    uint32 voltage_1 = 2;
    uint32 voltage_2 = 3;
    uint32 voltage_3 = 4;
    uint32 voltage_4 = 5;
}

message LV_TEMPERATURE {
    uint32 bp_temperature = 1;
    uint32 dcdc_temperature = 2;
}

message COOLING_STATUS {
    uint32 hv_fan_speed = 1;
    uint32 lv_fan_speed = 2;
    uint32 pump_speed = 3;
}

message HV_CELLS_VOLTAGE {
    uint32 cell_index = 1;
    uint32 voltage_0 = 2;
    uint32 voltage_1 = 3;
    uint32 voltage_2 = 4;
}

message HV_CELLS_TEMP {
    uint32 cell_index = 1;
    uint32 temp_0 = 2;
    uint32 temp_1 = 3;
    uint32 temp_2 = 4;
    uint32 temp_3 = 5;
    uint32 temp_4 = 6;
    uint32 temp_5 = 7;
    uint32 temp_6 = 8;
}

message HV_CELL_BALANCING_STATUS {
    Balancing_Status balancing_status = 1;
}
